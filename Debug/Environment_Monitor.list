
Environment_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007624  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  08007738  08007738  00017738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008170  08008170  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08008170  08008170  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008170  08008170  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  200001e4  0800835c  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000080c  0800835c  0002080c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c87  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002374  00000000  00000000  00030e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  00033208  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  00034278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001609e  00000000  00000000  000351f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c1ef  00000000  00000000  0004b28e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c029  00000000  00000000  0005747d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d34a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005034  00000000  00000000  000d3524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800771c 	.word	0x0800771c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	0800771c 	.word	0x0800771c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2iz>:
 8000d44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30f      	bcc.n	8000d6e <__aeabi_f2iz+0x2a>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d90d      	bls.n	8000d74 <__aeabi_f2iz+0x30>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d64:	fa23 f002 	lsr.w	r0, r3, r2
 8000d68:	bf18      	it	ne
 8000d6a:	4240      	negne	r0, r0
 8000d6c:	4770      	bx	lr
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	4770      	bx	lr
 8000d74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d78:	d101      	bne.n	8000d7e <__aeabi_f2iz+0x3a>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d105      	bne.n	8000d8a <__aeabi_f2iz+0x46>
 8000d7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr

08000d90 <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	4613      	mov	r3, r2
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	4413      	add	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	461a      	mov	r2, r3
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	4413      	add	r3, r2
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bc80      	pop	{r7}
 8000dbc:	4770      	bx	lr
	...

08000dc0 <Get_Time>:

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time (void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8000dc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dca:	9302      	str	r3, [sp, #8]
 8000dcc:	2307      	movs	r3, #7
 8000dce:	9301      	str	r3, [sp, #4]
 8000dd0:	463b      	mov	r3, r7
 8000dd2:	9300      	str	r3, [sp, #0]
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	21d0      	movs	r1, #208	; 0xd0
 8000dda:	481f      	ldr	r0, [pc, #124]	; (8000e58 <Get_Time+0x98>)
 8000ddc:	f002 fb86 	bl	80034ec <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 8000de0:	783b      	ldrb	r3, [r7, #0]
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff ffd4 	bl	8000d90 <bcdToDec>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	4b1b      	ldr	r3, [pc, #108]	; (8000e5c <Get_Time+0x9c>)
 8000dee:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 8000df0:	787b      	ldrb	r3, [r7, #1]
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ffcc 	bl	8000d90 <bcdToDec>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b17      	ldr	r3, [pc, #92]	; (8000e5c <Get_Time+0x9c>)
 8000dfe:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 8000e00:	78bb      	ldrb	r3, [r7, #2]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ffc4 	bl	8000d90 <bcdToDec>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <Get_Time+0x9c>)
 8000e0e:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 8000e10:	78fb      	ldrb	r3, [r7, #3]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff ffbc 	bl	8000d90 <bcdToDec>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <Get_Time+0x9c>)
 8000e1e:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 8000e20:	793b      	ldrb	r3, [r7, #4]
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ffb4 	bl	8000d90 <bcdToDec>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <Get_Time+0x9c>)
 8000e2e:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 8000e30:	797b      	ldrb	r3, [r7, #5]
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff ffac 	bl	8000d90 <bcdToDec>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <Get_Time+0x9c>)
 8000e3e:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 8000e40:	79bb      	ldrb	r3, [r7, #6]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff ffa4 	bl	8000d90 <bcdToDec>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <Get_Time+0x9c>)
 8000e4e:	719a      	strb	r2, [r3, #6]
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000062c 	.word	0x2000062c
 8000e5c:	200007cc 	.word	0x200007cc

08000e60 <pir>:

void pir(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2102      	movs	r1, #2
 8000e68:	4803      	ldr	r0, [pc, #12]	; (8000e78 <pir+0x18>)
 8000e6a:	f001 feba 	bl	8002be2 <HAL_GPIO_WritePin>
		HAL_TIM_Base_Start_IT(&htim3);
 8000e6e:	4803      	ldr	r0, [pc, #12]	; (8000e7c <pir+0x1c>)
 8000e70:	f003 ff69 	bl	8004d46 <HAL_TIM_Base_Start_IT>
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40010800 	.word	0x40010800
 8000e7c:	200006c0 	.word	0x200006c0

08000e80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e80:	b590      	push	{r4, r7, lr}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e86:	f001 f99f 	bl	80021c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8a:	f000 fa01 	bl	8001290 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8e:	f000 fb43 	bl	8001518 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e92:	f000 fa9b 	bl	80013cc <MX_I2C1_Init>
  MX_ADC1_Init();
 8000e96:	f000 fa5b 	bl	8001350 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000e9a:	f000 fb13 	bl	80014c4 <MX_USART1_UART_Init>
//  MX_RTC_Init();
  MX_TIM3_Init();
 8000e9e:	f000 fac3 	bl	8001428 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

//    HAL_RTC_Init(&hrtc);
//    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, GPIO_PIN_RESET);
    init_co2();
 8000ea2:	f000 f90f 	bl	80010c4 <init_co2>
    init_LightSensor();
 8000ea6:	f000 f8f1 	bl	800108c <init_LightSensor>
    SSD1306_Init();
 8000eaa:	f000 fbbf 	bl	800162c <SSD1306_Init>
    SSD1306_Fill(0);
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f000 fcae 	bl	8001810 <SSD1306_Fill>
    SSD1306_GotoXY(0,0);
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f000 fd20 	bl	80018fc <SSD1306_GotoXY>
    SSD1306_Puts("Temp:", &Font_7x10, SSD1306_COLOR_WHITE);
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	4961      	ldr	r1, [pc, #388]	; (8001044 <main+0x1c4>)
 8000ec0:	4861      	ldr	r0, [pc, #388]	; (8001048 <main+0x1c8>)
 8000ec2:	f000 fdb1 	bl	8001a28 <SSD1306_Puts>
    SSD1306_GotoXY(0,12);
 8000ec6:	210c      	movs	r1, #12
 8000ec8:	2000      	movs	r0, #0
 8000eca:	f000 fd17 	bl	80018fc <SSD1306_GotoXY>
    SSD1306_Puts("Humi:", &Font_7x10, SSD1306_COLOR_WHITE);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	495c      	ldr	r1, [pc, #368]	; (8001044 <main+0x1c4>)
 8000ed2:	485e      	ldr	r0, [pc, #376]	; (800104c <main+0x1cc>)
 8000ed4:	f000 fda8 	bl	8001a28 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000ed8:	f000 fc6c 	bl	80017b4 <SSD1306_UpdateScreen>
    SSD1306_GotoXY(0,22);
 8000edc:	2116      	movs	r1, #22
 8000ede:	2000      	movs	r0, #0
 8000ee0:	f000 fd0c 	bl	80018fc <SSD1306_GotoXY>
    SSD1306_Puts("CO2:", &Font_7x10, SSD1306_COLOR_WHITE);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	4957      	ldr	r1, [pc, #348]	; (8001044 <main+0x1c4>)
 8000ee8:	4859      	ldr	r0, [pc, #356]	; (8001050 <main+0x1d0>)
 8000eea:	f000 fd9d 	bl	8001a28 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000eee:	f000 fc61 	bl	80017b4 <SSD1306_UpdateScreen>
    SSD1306_GotoXY(0,32);
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 fd01 	bl	80018fc <SSD1306_GotoXY>
    SSD1306_Puts("VOC:", &Font_7x10, SSD1306_COLOR_WHITE);
 8000efa:	2201      	movs	r2, #1
 8000efc:	4951      	ldr	r1, [pc, #324]	; (8001044 <main+0x1c4>)
 8000efe:	4855      	ldr	r0, [pc, #340]	; (8001054 <main+0x1d4>)
 8000f00:	f000 fd92 	bl	8001a28 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000f04:	f000 fc56 	bl	80017b4 <SSD1306_UpdateScreen>
    SSD1306_GotoXY(0,42);
 8000f08:	212a      	movs	r1, #42	; 0x2a
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	f000 fcf6 	bl	80018fc <SSD1306_GotoXY>
    SSD1306_Puts("Light:", &Font_7x10, SSD1306_COLOR_WHITE);
 8000f10:	2201      	movs	r2, #1
 8000f12:	494c      	ldr	r1, [pc, #304]	; (8001044 <main+0x1c4>)
 8000f14:	4850      	ldr	r0, [pc, #320]	; (8001058 <main+0x1d8>)
 8000f16:	f000 fd87 	bl	8001a28 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000f1a:	f000 fc4b 	bl	80017b4 <SSD1306_UpdateScreen>
    SSD1306_GotoXY(0,52);
 8000f1e:	2134      	movs	r1, #52	; 0x34
 8000f20:	2000      	movs	r0, #0
 8000f22:	f000 fceb 	bl	80018fc <SSD1306_GotoXY>
    SSD1306_Puts("Time:", &Font_7x10, SSD1306_COLOR_WHITE);
 8000f26:	2201      	movs	r2, #1
 8000f28:	4946      	ldr	r1, [pc, #280]	; (8001044 <main+0x1c4>)
 8000f2a:	484c      	ldr	r0, [pc, #304]	; (800105c <main+0x1dc>)
 8000f2c:	f000 fd7c 	bl	8001a28 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8000f30:	f000 fc40 	bl	80017b4 <SSD1306_UpdateScreen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ///////////////////////////////////////////////////////////////////////////////////temp and humidity
	    get_temp_humi();
 8000f34:	f000 f8e0 	bl	80010f8 <get_temp_humi>
		SSD1306_GotoXY(42,0);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	202a      	movs	r0, #42	; 0x2a
 8000f3c:	f000 fcde 	bl	80018fc <SSD1306_GotoXY>
		sprintf(char_buff1,"%.2f",cTemp);
 8000f40:	4b47      	ldr	r3, [pc, #284]	; (8001060 <main+0x1e0>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fa6f 	bl	8000428 <__aeabi_f2d>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	461a      	mov	r2, r3
 8000f50:	4623      	mov	r3, r4
 8000f52:	4944      	ldr	r1, [pc, #272]	; (8001064 <main+0x1e4>)
 8000f54:	4844      	ldr	r0, [pc, #272]	; (8001068 <main+0x1e8>)
 8000f56:	f004 fff5 	bl	8005f44 <siprintf>
		SSD1306_Puts(char_buff1, &Font_7x10, SSD1306_COLOR_WHITE);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	4939      	ldr	r1, [pc, #228]	; (8001044 <main+0x1c4>)
 8000f5e:	4842      	ldr	r0, [pc, #264]	; (8001068 <main+0x1e8>)
 8000f60:	f000 fd62 	bl	8001a28 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 8000f64:	f000 fc26 	bl	80017b4 <SSD1306_UpdateScreen>
		HAL_Delay(1000);
 8000f68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f6c:	f001 f98e 	bl	800228c <HAL_Delay>

		 SSD1306_GotoXY(42,12);
 8000f70:	210c      	movs	r1, #12
 8000f72:	202a      	movs	r0, #42	; 0x2a
 8000f74:	f000 fcc2 	bl	80018fc <SSD1306_GotoXY>
		 sprintf(char_buff2,"%.2f",cHumi);
 8000f78:	4b3c      	ldr	r3, [pc, #240]	; (800106c <main+0x1ec>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa53 	bl	8000428 <__aeabi_f2d>
 8000f82:	4603      	mov	r3, r0
 8000f84:	460c      	mov	r4, r1
 8000f86:	461a      	mov	r2, r3
 8000f88:	4623      	mov	r3, r4
 8000f8a:	4936      	ldr	r1, [pc, #216]	; (8001064 <main+0x1e4>)
 8000f8c:	4838      	ldr	r0, [pc, #224]	; (8001070 <main+0x1f0>)
 8000f8e:	f004 ffd9 	bl	8005f44 <siprintf>
		SSD1306_Puts(char_buff2, &Font_7x10, SSD1306_COLOR_WHITE);
 8000f92:	2201      	movs	r2, #1
 8000f94:	492b      	ldr	r1, [pc, #172]	; (8001044 <main+0x1c4>)
 8000f96:	4836      	ldr	r0, [pc, #216]	; (8001070 <main+0x1f0>)
 8000f98:	f000 fd46 	bl	8001a28 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 8000f9c:	f000 fc0a 	bl	80017b4 <SSD1306_UpdateScreen>
//		  SSD1306_GotoXY(86,52);
//		  sprintf(sectime,"%u",sTime.Seconds);
//		  SSD1306_Puts(sectime, &Font_7x10, SSD1306_COLOR_WHITE);
//		  SSD1306_UpdateScreen();

		  Get_Time();
 8000fa0:	f7ff ff0e 	bl	8000dc0 <Get_Time>
		  SSD1306_DrawFilledRectangle(42, 52, 86, 12, SSD1306_COLOR_BLACK);  //to clear the previous time displayed
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	230c      	movs	r3, #12
 8000faa:	2256      	movs	r2, #86	; 0x56
 8000fac:	2134      	movs	r1, #52	; 0x34
 8000fae:	202a      	movs	r0, #42	; 0x2a
 8000fb0:	f000 fe5a 	bl	8001c68 <SSD1306_DrawFilledRectangle>
		  SSD1306_UpdateScreen();
 8000fb4:	f000 fbfe 	bl	80017b4 <SSD1306_UpdateScreen>
		  SSD1306_GotoXY(42,52);
 8000fb8:	2134      	movs	r1, #52	; 0x34
 8000fba:	202a      	movs	r0, #42	; 0x2a
 8000fbc:	f000 fc9e 	bl	80018fc <SSD1306_GotoXY>
		  sprintf(hrtime,"%u",time.hour);
 8000fc0:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <main+0x1f4>)
 8000fc2:	789b      	ldrb	r3, [r3, #2]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	492c      	ldr	r1, [pc, #176]	; (8001078 <main+0x1f8>)
 8000fc8:	482c      	ldr	r0, [pc, #176]	; (800107c <main+0x1fc>)
 8000fca:	f004 ffbb 	bl	8005f44 <siprintf>
		  SSD1306_Puts(hrtime, &Font_7x10, SSD1306_COLOR_WHITE);
 8000fce:	2201      	movs	r2, #1
 8000fd0:	491c      	ldr	r1, [pc, #112]	; (8001044 <main+0x1c4>)
 8000fd2:	482a      	ldr	r0, [pc, #168]	; (800107c <main+0x1fc>)
 8000fd4:	f000 fd28 	bl	8001a28 <SSD1306_Puts>
		  SSD1306_GotoXY(57,52);
 8000fd8:	2134      	movs	r1, #52	; 0x34
 8000fda:	2039      	movs	r0, #57	; 0x39
 8000fdc:	f000 fc8e 	bl	80018fc <SSD1306_GotoXY>
		  SSD1306_Puts(":", &Font_7x10, SSD1306_COLOR_WHITE);
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4918      	ldr	r1, [pc, #96]	; (8001044 <main+0x1c4>)
 8000fe4:	4826      	ldr	r0, [pc, #152]	; (8001080 <main+0x200>)
 8000fe6:	f000 fd1f 	bl	8001a28 <SSD1306_Puts>
		  SSD1306_GotoXY(64,52);
 8000fea:	2134      	movs	r1, #52	; 0x34
 8000fec:	2040      	movs	r0, #64	; 0x40
 8000fee:	f000 fc85 	bl	80018fc <SSD1306_GotoXY>
		  sprintf(mintime,"%u",time.minutes);
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <main+0x1f4>)
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	491f      	ldr	r1, [pc, #124]	; (8001078 <main+0x1f8>)
 8000ffa:	4822      	ldr	r0, [pc, #136]	; (8001084 <main+0x204>)
 8000ffc:	f004 ffa2 	bl	8005f44 <siprintf>
		  SSD1306_Puts(mintime, &Font_7x10, SSD1306_COLOR_WHITE);
 8001000:	2201      	movs	r2, #1
 8001002:	4910      	ldr	r1, [pc, #64]	; (8001044 <main+0x1c4>)
 8001004:	481f      	ldr	r0, [pc, #124]	; (8001084 <main+0x204>)
 8001006:	f000 fd0f 	bl	8001a28 <SSD1306_Puts>
		  SSD1306_GotoXY(79,52);
 800100a:	2134      	movs	r1, #52	; 0x34
 800100c:	204f      	movs	r0, #79	; 0x4f
 800100e:	f000 fc75 	bl	80018fc <SSD1306_GotoXY>
		  SSD1306_Puts(":", &Font_7x10, SSD1306_COLOR_WHITE);
 8001012:	2201      	movs	r2, #1
 8001014:	490b      	ldr	r1, [pc, #44]	; (8001044 <main+0x1c4>)
 8001016:	481a      	ldr	r0, [pc, #104]	; (8001080 <main+0x200>)
 8001018:	f000 fd06 	bl	8001a28 <SSD1306_Puts>
		  SSD1306_GotoXY(86,52);
 800101c:	2134      	movs	r1, #52	; 0x34
 800101e:	2056      	movs	r0, #86	; 0x56
 8001020:	f000 fc6c 	bl	80018fc <SSD1306_GotoXY>
		  sprintf(sectime,"%u",time.seconds);
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <main+0x1f4>)
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	461a      	mov	r2, r3
 800102a:	4913      	ldr	r1, [pc, #76]	; (8001078 <main+0x1f8>)
 800102c:	4816      	ldr	r0, [pc, #88]	; (8001088 <main+0x208>)
 800102e:	f004 ff89 	bl	8005f44 <siprintf>
		  SSD1306_Puts(sectime, &Font_7x10, SSD1306_COLOR_WHITE);
 8001032:	2201      	movs	r2, #1
 8001034:	4903      	ldr	r1, [pc, #12]	; (8001044 <main+0x1c4>)
 8001036:	4814      	ldr	r0, [pc, #80]	; (8001088 <main+0x208>)
 8001038:	f000 fcf6 	bl	8001a28 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800103c:	f000 fbba 	bl	80017b4 <SSD1306_UpdateScreen>
	    get_temp_humi();
 8001040:	e778      	b.n	8000f34 <main+0xb4>
 8001042:	bf00      	nop
 8001044:	20000000 	.word	0x20000000
 8001048:	08007738 	.word	0x08007738
 800104c:	08007740 	.word	0x08007740
 8001050:	08007748 	.word	0x08007748
 8001054:	08007750 	.word	0x08007750
 8001058:	08007758 	.word	0x08007758
 800105c:	08007760 	.word	0x08007760
 8001060:	200007fc 	.word	0x200007fc
 8001064:	08007768 	.word	0x08007768
 8001068:	2000061c 	.word	0x2000061c
 800106c:	200007c4 	.word	0x200007c4
 8001070:	20000624 	.word	0x20000624
 8001074:	200007cc 	.word	0x200007cc
 8001078:	08007770 	.word	0x08007770
 800107c:	20000730 	.word	0x20000730
 8001080:	08007774 	.word	0x08007774
 8001084:	20000778 	.word	0x20000778
 8001088:	20000800 	.word	0x20000800

0800108c <init_LightSensor>:
  /* USER CODE END 3 */
}


void init_LightSensor()
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af02      	add	r7, sp, #8
	  light_databuff[0]=0x01;
 8001092:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <init_LightSensor+0x30>)
 8001094:	2201      	movs	r2, #1
 8001096:	701a      	strb	r2, [r3, #0]
	  light_databuff[1]=(0xCE10)>>8;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <init_LightSensor+0x30>)
 800109a:	22ce      	movs	r2, #206	; 0xce
 800109c:	705a      	strb	r2, [r3, #1]
	  light_databuff[2]=(0xCE10)& 0x00FF;
 800109e:	4b07      	ldr	r3, [pc, #28]	; (80010bc <init_LightSensor+0x30>)
 80010a0:	2210      	movs	r2, #16
 80010a2:	709a      	strb	r2, [r3, #2]
	  HAL_I2C_Master_Transmit(&hi2c1,lux_address<<1,light_databuff,3,50);
 80010a4:	2332      	movs	r3, #50	; 0x32
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2303      	movs	r3, #3
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <init_LightSensor+0x30>)
 80010ac:	2188      	movs	r1, #136	; 0x88
 80010ae:	4804      	ldr	r0, [pc, #16]	; (80010c0 <init_LightSensor+0x34>)
 80010b0:	f001 fef0 	bl	8002e94 <HAL_I2C_Master_Transmit>
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000698 	.word	0x20000698
 80010c0:	2000062c 	.word	0x2000062c

080010c4 <init_co2>:
	  iExponent = (rawlux & 0xF000) >> 12;
	  flux= iMantissa * (0.01 * powf(2, iExponent));
}

void init_co2()
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af02      	add	r7, sp, #8
data[0]=(0x2003)>>8;
 80010ca:	4b08      	ldr	r3, [pc, #32]	; (80010ec <init_co2+0x28>)
 80010cc:	2220      	movs	r2, #32
 80010ce:	701a      	strb	r2, [r3, #0]
data[1]=(0x2003) & 0x00FF;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <init_co2+0x28>)
 80010d2:	2203      	movs	r2, #3
 80010d4:	705a      	strb	r2, [r3, #1]
HAL_I2C_Master_Transmit(&hi2c1,co2sensor_address<<1,data,2,50);
 80010d6:	2332      	movs	r3, #50	; 0x32
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	2302      	movs	r3, #2
 80010dc:	4a03      	ldr	r2, [pc, #12]	; (80010ec <init_co2+0x28>)
 80010de:	21b0      	movs	r1, #176	; 0xb0
 80010e0:	4803      	ldr	r0, [pc, #12]	; (80010f0 <init_co2+0x2c>)
 80010e2:	f001 fed7 	bl	8002e94 <HAL_I2C_Master_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	200007c8 	.word	0x200007c8
 80010f0:	2000062c 	.word	0x2000062c
 80010f4:	00000000 	.word	0x00000000

080010f8 <get_temp_humi>:
	co2 = (readbuff[0]<<8)|readbuff[1];
	tvoc=(readbuff[3]<<8)|(readbuff[4]);
}

void get_temp_humi()
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af02      	add	r7, sp, #8
	HAL_Delay(50);
 80010fe:	2032      	movs	r0, #50	; 0x32
 8001100:	f001 f8c4 	bl	800228c <HAL_Delay>
	data[0]=0x22; //command
 8001104:	4b44      	ldr	r3, [pc, #272]	; (8001218 <get_temp_humi+0x120>)
 8001106:	2222      	movs	r2, #34	; 0x22
 8001108:	701a      	strb	r2, [r3, #0]
	data[1]=0x36;
 800110a:	4b43      	ldr	r3, [pc, #268]	; (8001218 <get_temp_humi+0x120>)
 800110c:	2236      	movs	r2, #54	; 0x36
 800110e:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1,thermal_address<<1,data,2,50);
 8001110:	2332      	movs	r3, #50	; 0x32
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2302      	movs	r3, #2
 8001116:	4a40      	ldr	r2, [pc, #256]	; (8001218 <get_temp_humi+0x120>)
 8001118:	218a      	movs	r1, #138	; 0x8a
 800111a:	4840      	ldr	r0, [pc, #256]	; (800121c <get_temp_humi+0x124>)
 800111c:	f001 feba 	bl	8002e94 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 8001120:	2032      	movs	r0, #50	; 0x32
 8001122:	f001 f8b3 	bl	800228c <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,thermal_address<<1,readbuff,6,50);
 8001126:	2332      	movs	r3, #50	; 0x32
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2306      	movs	r3, #6
 800112c:	4a3c      	ldr	r2, [pc, #240]	; (8001220 <get_temp_humi+0x128>)
 800112e:	218a      	movs	r1, #138	; 0x8a
 8001130:	483a      	ldr	r0, [pc, #232]	; (800121c <get_temp_humi+0x124>)
 8001132:	f001 ffad 	bl	8003090 <HAL_I2C_Master_Receive>
	 temp = (readbuff[0] * 256) + readbuff[1];
 8001136:	4b3a      	ldr	r3, [pc, #232]	; (8001220 <get_temp_humi+0x128>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	4a38      	ldr	r2, [pc, #224]	; (8001220 <get_temp_humi+0x128>)
 800113e:	7852      	ldrb	r2, [r2, #1]
 8001140:	4413      	add	r3, r2
 8001142:	4a38      	ldr	r2, [pc, #224]	; (8001224 <get_temp_humi+0x12c>)
 8001144:	6013      	str	r3, [r2, #0]
	 cTemp = -45.0 + (175.0 * temp / 65535.0);
 8001146:	4b37      	ldr	r3, [pc, #220]	; (8001224 <get_temp_humi+0x12c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff f95a 	bl	8000404 <__aeabi_i2d>
 8001150:	a32d      	add	r3, pc, #180	; (adr r3, 8001208 <get_temp_humi+0x110>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff f9bf 	bl	80004d8 <__aeabi_dmul>
 800115a:	4603      	mov	r3, r0
 800115c:	460c      	mov	r4, r1
 800115e:	4618      	mov	r0, r3
 8001160:	4621      	mov	r1, r4
 8001162:	a32b      	add	r3, pc, #172	; (adr r3, 8001210 <get_temp_humi+0x118>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff fae0 	bl	800072c <__aeabi_ddiv>
 800116c:	4603      	mov	r3, r0
 800116e:	460c      	mov	r4, r1
 8001170:	4618      	mov	r0, r3
 8001172:	4621      	mov	r1, r4
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <get_temp_humi+0x130>)
 800117a:	f7fe fff5 	bl	8000168 <__aeabi_dsub>
 800117e:	4603      	mov	r3, r0
 8001180:	460c      	mov	r4, r1
 8001182:	4618      	mov	r0, r3
 8001184:	4621      	mov	r1, r4
 8001186:	f7ff fc7f 	bl	8000a88 <__aeabi_d2f>
 800118a:	4602      	mov	r2, r0
 800118c:	4b27      	ldr	r3, [pc, #156]	; (800122c <get_temp_humi+0x134>)
 800118e:	601a      	str	r2, [r3, #0]
	 humi = (readbuff[3] * 256) + readbuff[4];
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <get_temp_humi+0x128>)
 8001192:	78db      	ldrb	r3, [r3, #3]
 8001194:	021b      	lsls	r3, r3, #8
 8001196:	4a22      	ldr	r2, [pc, #136]	; (8001220 <get_temp_humi+0x128>)
 8001198:	7912      	ldrb	r2, [r2, #4]
 800119a:	4413      	add	r3, r2
 800119c:	4a24      	ldr	r2, [pc, #144]	; (8001230 <get_temp_humi+0x138>)
 800119e:	6013      	str	r3, [r2, #0]
	 cHumi = (100.0 * humi / 65535.0);
 80011a0:	4b23      	ldr	r3, [pc, #140]	; (8001230 <get_temp_humi+0x138>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff f92d 	bl	8000404 <__aeabi_i2d>
 80011aa:	f04f 0200 	mov.w	r2, #0
 80011ae:	4b21      	ldr	r3, [pc, #132]	; (8001234 <get_temp_humi+0x13c>)
 80011b0:	f7ff f992 	bl	80004d8 <__aeabi_dmul>
 80011b4:	4603      	mov	r3, r0
 80011b6:	460c      	mov	r4, r1
 80011b8:	4618      	mov	r0, r3
 80011ba:	4621      	mov	r1, r4
 80011bc:	a314      	add	r3, pc, #80	; (adr r3, 8001210 <get_temp_humi+0x118>)
 80011be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c2:	f7ff fab3 	bl	800072c <__aeabi_ddiv>
 80011c6:	4603      	mov	r3, r0
 80011c8:	460c      	mov	r4, r1
 80011ca:	4618      	mov	r0, r3
 80011cc:	4621      	mov	r1, r4
 80011ce:	f7ff fc5b 	bl	8000a88 <__aeabi_d2f>
 80011d2:	4602      	mov	r2, r0
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <get_temp_humi+0x140>)
 80011d6:	601a      	str	r2, [r3, #0]
	 i=abs(25-cTemp);
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <get_temp_humi+0x134>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4619      	mov	r1, r3
 80011de:	4817      	ldr	r0, [pc, #92]	; (800123c <get_temp_humi+0x144>)
 80011e0:	f7ff fca6 	bl	8000b30 <__aeabi_fsub>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff fdac 	bl	8000d44 <__aeabi_f2iz>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	bfb8      	it	lt
 80011f2:	425b      	neglt	r3, r3
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fd51 	bl	8000c9c <__aeabi_i2f>
 80011fa:	4602      	mov	r2, r0
 80011fc:	4b10      	ldr	r3, [pc, #64]	; (8001240 <get_temp_humi+0x148>)
 80011fe:	601a      	str	r2, [r3, #0]

}
 8001200:	bf00      	nop
 8001202:	3704      	adds	r7, #4
 8001204:	46bd      	mov	sp, r7
 8001206:	bd90      	pop	{r4, r7, pc}
 8001208:	00000000 	.word	0x00000000
 800120c:	4065e000 	.word	0x4065e000
 8001210:	00000000 	.word	0x00000000
 8001214:	40efffe0 	.word	0x40efffe0
 8001218:	200007c8 	.word	0x200007c8
 800121c:	2000062c 	.word	0x2000062c
 8001220:	200007dc 	.word	0x200007dc
 8001224:	200006b8 	.word	0x200006b8
 8001228:	40468000 	.word	0x40468000
 800122c:	200007fc 	.word	0x200007fc
 8001230:	20000618 	.word	0x20000618
 8001234:	40590000 	.word	0x40590000
 8001238:	200007c4 	.word	0x200007c4
 800123c:	41c80000 	.word	0x41c80000
 8001240:	20000734 	.word	0x20000734

08001244 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin==GPIO_PIN_13)
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001254:	d105      	bne.n	8001262 <HAL_GPIO_EXTI_Callback+0x1e>
	{
       if(workflag==1)
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_GPIO_EXTI_Callback+0x28>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_EXTI_Callback+0x1e>
       {
		  pir();
 800125e:	f7ff fdff 	bl	8000e60 <pir>
       }
	}
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000200 	.word	0x20000200

08001270 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 8001278:	2201      	movs	r2, #1
 800127a:	2102      	movs	r1, #2
 800127c:	4803      	ldr	r0, [pc, #12]	; (800128c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800127e:	f001 fcb0 	bl	8002be2 <HAL_GPIO_WritePin>

}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40010800 	.word	0x40010800

08001290 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b094      	sub	sp, #80	; 0x50
 8001294:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800129a:	2228      	movs	r2, #40	; 0x28
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 f9f8 	bl	8005694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 80012be:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80012c0:	2305      	movs	r3, #5
 80012c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80012ca:	2300      	movs	r3, #0
 80012cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80012ce:	2301      	movs	r3, #1
 80012d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012d2:	2301      	movs	r3, #1
 80012d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012d6:	2302      	movs	r3, #2
 80012d8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80012e0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80012e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 f82e 	bl	800434c <HAL_RCC_OscConfig>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80012f6:	f000 f993 	bl	8001620 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800130a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	2102      	movs	r1, #2
 8001316:	4618      	mov	r0, r3
 8001318:	f003 fa98 	bl	800484c <HAL_RCC_ClockConfig>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001322:	f000 f97d 	bl	8001620 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 8001326:	2303      	movs	r3, #3
 8001328:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800132a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800132e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001334:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	4618      	mov	r0, r3
 800133a:	f003 fc23 	bl	8004b84 <HAL_RCCEx_PeriphCLKConfig>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001344:	f000 f96c 	bl	8001620 <Error_Handler>
  }
}
 8001348:	bf00      	nop
 800134a:	3750      	adds	r7, #80	; 0x50
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_ADC1_Init+0x74>)
 8001362:	4a19      	ldr	r2, [pc, #100]	; (80013c8 <MX_ADC1_Init+0x78>)
 8001364:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001366:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <MX_ADC1_Init+0x74>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800136c:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_ADC1_Init+0x74>)
 800136e:	2200      	movs	r2, #0
 8001370:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_ADC1_Init+0x74>)
 8001374:	2200      	movs	r2, #0
 8001376:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001378:	4b12      	ldr	r3, [pc, #72]	; (80013c4 <MX_ADC1_Init+0x74>)
 800137a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800137e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001380:	4b10      	ldr	r3, [pc, #64]	; (80013c4 <MX_ADC1_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_ADC1_Init+0x74>)
 8001388:	2201      	movs	r2, #1
 800138a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138c:	480d      	ldr	r0, [pc, #52]	; (80013c4 <MX_ADC1_Init+0x74>)
 800138e:	f000 ff9f 	bl	80022d0 <HAL_ADC_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001398:	f000 f942 	bl	8001620 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a8:	1d3b      	adds	r3, r7, #4
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_ADC1_Init+0x74>)
 80013ae:	f001 f867 	bl	8002480 <HAL_ADC_ConfigChannel>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80013b8:	f000 f932 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000700 	.word	0x20000700
 80013c8:	40012400 	.word	0x40012400

080013cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <MX_I2C1_Init+0x50>)
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <MX_I2C1_Init+0x54>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <MX_I2C1_Init+0x50>)
 80013d8:	4a12      	ldr	r2, [pc, #72]	; (8001424 <MX_I2C1_Init+0x58>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013dc:	4b0f      	ldr	r3, [pc, #60]	; (800141c <MX_I2C1_Init+0x50>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <MX_I2C1_Init+0x50>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e8:	4b0c      	ldr	r3, [pc, #48]	; (800141c <MX_I2C1_Init+0x50>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <MX_I2C1_Init+0x50>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <MX_I2C1_Init+0x50>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fc:	4b07      	ldr	r3, [pc, #28]	; (800141c <MX_I2C1_Init+0x50>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <MX_I2C1_Init+0x50>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001408:	4804      	ldr	r0, [pc, #16]	; (800141c <MX_I2C1_Init+0x50>)
 800140a:	f001 fc1b 	bl	8002c44 <HAL_I2C_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001414:	f000 f904 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	2000062c 	.word	0x2000062c
 8001420:	40005400 	.word	0x40005400
 8001424:	00061a80 	.word	0x00061a80

08001428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_TIM3_Init+0x94>)
 8001446:	4a1e      	ldr	r2, [pc, #120]	; (80014c0 <MX_TIM3_Init+0x98>)
 8001448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40000;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_TIM3_Init+0x94>)
 800144c:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001450:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM3_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_TIM3_Init+0x94>)
 800145a:	f64e 2260 	movw	r2, #60000	; 0xea60
 800145e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b16      	ldr	r3, [pc, #88]	; (80014bc <MX_TIM3_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b15      	ldr	r3, [pc, #84]	; (80014bc <MX_TIM3_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <MX_TIM3_Init+0x94>)
 800146e:	f003 fc3f 	bl	8004cf0 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001478:	f000 f8d2 	bl	8001620 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001480:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_TIM3_Init+0x94>)
 800148a:	f003 fd87 	bl	8004f9c <HAL_TIM_ConfigClockSource>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001494:	f000 f8c4 	bl	8001620 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a0:	463b      	mov	r3, r7
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM3_Init+0x94>)
 80014a6:	f003 ff4d 	bl	8005344 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014b0:	f000 f8b6 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200006c0 	.word	0x200006c0
 80014c0:	40000400 	.word	0x40000400

080014c4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014c8:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	; (8001514 <MX_USART1_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	; (8001510 <MX_USART1_UART_Init+0x4c>)
 80014fc:	f003 ff78 	bl	80053f0 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f88b 	bl	8001620 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000738 	.word	0x20000738
 8001514:	40013800 	.word	0x40013800

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800152c:	4b38      	ldr	r3, [pc, #224]	; (8001610 <MX_GPIO_Init+0xf8>)
 800152e:	699b      	ldr	r3, [r3, #24]
 8001530:	4a37      	ldr	r2, [pc, #220]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001532:	f043 0310 	orr.w	r3, r3, #16
 8001536:	6193      	str	r3, [r2, #24]
 8001538:	4b35      	ldr	r3, [pc, #212]	; (8001610 <MX_GPIO_Init+0xf8>)
 800153a:	699b      	ldr	r3, [r3, #24]
 800153c:	f003 0310 	and.w	r3, r3, #16
 8001540:	60fb      	str	r3, [r7, #12]
 8001542:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001544:	4b32      	ldr	r3, [pc, #200]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a31      	ldr	r2, [pc, #196]	; (8001610 <MX_GPIO_Init+0xf8>)
 800154a:	f043 0320 	orr.w	r3, r3, #32
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b2f      	ldr	r3, [pc, #188]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	60bb      	str	r3, [r7, #8]
 800155a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800155c:	4b2c      	ldr	r3, [pc, #176]	; (8001610 <MX_GPIO_Init+0xf8>)
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001562:	f043 0304 	orr.w	r3, r3, #4
 8001566:	6193      	str	r3, [r2, #24]
 8001568:	4b29      	ldr	r3, [pc, #164]	; (8001610 <MX_GPIO_Init+0xf8>)
 800156a:	699b      	ldr	r3, [r3, #24]
 800156c:	f003 0304 	and.w	r3, r3, #4
 8001570:	607b      	str	r3, [r7, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001574:	4b26      	ldr	r3, [pc, #152]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a25      	ldr	r2, [pc, #148]	; (8001610 <MX_GPIO_Init+0xf8>)
 800157a:	f043 0308 	orr.w	r3, r3, #8
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <MX_GPIO_Init+0xf8>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f003 0308 	and.w	r3, r3, #8
 8001588:	603b      	str	r3, [r7, #0]
 800158a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 800158c:	2200      	movs	r2, #0
 800158e:	f248 0102 	movw	r1, #32770	; 0x8002
 8001592:	4820      	ldr	r0, [pc, #128]	; (8001614 <MX_GPIO_Init+0xfc>)
 8001594:	f001 fb25 	bl	8002be2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001598:	2200      	movs	r2, #0
 800159a:	2118      	movs	r1, #24
 800159c:	481e      	ldr	r0, [pc, #120]	; (8001618 <MX_GPIO_Init+0x100>)
 800159e:	f001 fb20 	bl	8002be2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80015a2:	f248 0302 	movw	r3, #32770	; 0x8002
 80015a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2302      	movs	r3, #2
 80015b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b4:	f107 0310 	add.w	r3, r7, #16
 80015b8:	4619      	mov	r1, r3
 80015ba:	4816      	ldr	r0, [pc, #88]	; (8001614 <MX_GPIO_Init+0xfc>)
 80015bc:	f001 f9a0 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015c6:	4b15      	ldr	r3, [pc, #84]	; (800161c <MX_GPIO_Init+0x104>)
 80015c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f107 0310 	add.w	r3, r7, #16
 80015d2:	4619      	mov	r1, r3
 80015d4:	4810      	ldr	r0, [pc, #64]	; (8001618 <MX_GPIO_Init+0x100>)
 80015d6:	f001 f993 	bl	8002900 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80015da:	2318      	movs	r3, #24
 80015dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015de:	2301      	movs	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e6:	2302      	movs	r3, #2
 80015e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	4619      	mov	r1, r3
 80015f0:	4809      	ldr	r0, [pc, #36]	; (8001618 <MX_GPIO_Init+0x100>)
 80015f2:	f001 f985 	bl	8002900 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2100      	movs	r1, #0
 80015fa:	2028      	movs	r0, #40	; 0x28
 80015fc:	f001 f949 	bl	8002892 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001600:	2028      	movs	r0, #40	; 0x28
 8001602:	f001 f962 	bl	80028ca <HAL_NVIC_EnableIRQ>

}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000
 8001614:	40010800 	.word	0x40010800
 8001618:	40010c00 	.word	0x40010c00
 800161c:	10110000 	.word	0x10110000

08001620 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001624:	bf00      	nop
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr

0800162c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001632:	f000 fb67 	bl	8001d04 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001636:	f644 6320 	movw	r3, #20000	; 0x4e20
 800163a:	2201      	movs	r2, #1
 800163c:	2178      	movs	r1, #120	; 0x78
 800163e:	485b      	ldr	r0, [pc, #364]	; (80017ac <SSD1306_Init+0x180>)
 8001640:	f002 f98a 	bl	8003958 <HAL_I2C_IsDeviceReady>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800164a:	2300      	movs	r3, #0
 800164c:	e0a9      	b.n	80017a2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800164e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001652:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001654:	e002      	b.n	800165c <SSD1306_Init+0x30>
		p--;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3b01      	subs	r3, #1
 800165a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f9      	bne.n	8001656 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001662:	22ae      	movs	r2, #174	; 0xae
 8001664:	2100      	movs	r1, #0
 8001666:	2078      	movs	r0, #120	; 0x78
 8001668:	f000 fba8 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800166c:	2220      	movs	r2, #32
 800166e:	2100      	movs	r1, #0
 8001670:	2078      	movs	r0, #120	; 0x78
 8001672:	f000 fba3 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001676:	2210      	movs	r2, #16
 8001678:	2100      	movs	r1, #0
 800167a:	2078      	movs	r0, #120	; 0x78
 800167c:	f000 fb9e 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001680:	22b0      	movs	r2, #176	; 0xb0
 8001682:	2100      	movs	r1, #0
 8001684:	2078      	movs	r0, #120	; 0x78
 8001686:	f000 fb99 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800168a:	22c8      	movs	r2, #200	; 0xc8
 800168c:	2100      	movs	r1, #0
 800168e:	2078      	movs	r0, #120	; 0x78
 8001690:	f000 fb94 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001694:	2200      	movs	r2, #0
 8001696:	2100      	movs	r1, #0
 8001698:	2078      	movs	r0, #120	; 0x78
 800169a:	f000 fb8f 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800169e:	2210      	movs	r2, #16
 80016a0:	2100      	movs	r1, #0
 80016a2:	2078      	movs	r0, #120	; 0x78
 80016a4:	f000 fb8a 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80016a8:	2240      	movs	r2, #64	; 0x40
 80016aa:	2100      	movs	r1, #0
 80016ac:	2078      	movs	r0, #120	; 0x78
 80016ae:	f000 fb85 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80016b2:	2281      	movs	r2, #129	; 0x81
 80016b4:	2100      	movs	r1, #0
 80016b6:	2078      	movs	r0, #120	; 0x78
 80016b8:	f000 fb80 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80016bc:	22ff      	movs	r2, #255	; 0xff
 80016be:	2100      	movs	r1, #0
 80016c0:	2078      	movs	r0, #120	; 0x78
 80016c2:	f000 fb7b 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80016c6:	22a1      	movs	r2, #161	; 0xa1
 80016c8:	2100      	movs	r1, #0
 80016ca:	2078      	movs	r0, #120	; 0x78
 80016cc:	f000 fb76 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80016d0:	22a6      	movs	r2, #166	; 0xa6
 80016d2:	2100      	movs	r1, #0
 80016d4:	2078      	movs	r0, #120	; 0x78
 80016d6:	f000 fb71 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80016da:	22a8      	movs	r2, #168	; 0xa8
 80016dc:	2100      	movs	r1, #0
 80016de:	2078      	movs	r0, #120	; 0x78
 80016e0:	f000 fb6c 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80016e4:	223f      	movs	r2, #63	; 0x3f
 80016e6:	2100      	movs	r1, #0
 80016e8:	2078      	movs	r0, #120	; 0x78
 80016ea:	f000 fb67 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80016ee:	22a4      	movs	r2, #164	; 0xa4
 80016f0:	2100      	movs	r1, #0
 80016f2:	2078      	movs	r0, #120	; 0x78
 80016f4:	f000 fb62 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80016f8:	22d3      	movs	r2, #211	; 0xd3
 80016fa:	2100      	movs	r1, #0
 80016fc:	2078      	movs	r0, #120	; 0x78
 80016fe:	f000 fb5d 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001702:	2200      	movs	r2, #0
 8001704:	2100      	movs	r1, #0
 8001706:	2078      	movs	r0, #120	; 0x78
 8001708:	f000 fb58 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800170c:	22d5      	movs	r2, #213	; 0xd5
 800170e:	2100      	movs	r1, #0
 8001710:	2078      	movs	r0, #120	; 0x78
 8001712:	f000 fb53 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001716:	22f0      	movs	r2, #240	; 0xf0
 8001718:	2100      	movs	r1, #0
 800171a:	2078      	movs	r0, #120	; 0x78
 800171c:	f000 fb4e 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001720:	22d9      	movs	r2, #217	; 0xd9
 8001722:	2100      	movs	r1, #0
 8001724:	2078      	movs	r0, #120	; 0x78
 8001726:	f000 fb49 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800172a:	2222      	movs	r2, #34	; 0x22
 800172c:	2100      	movs	r1, #0
 800172e:	2078      	movs	r0, #120	; 0x78
 8001730:	f000 fb44 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001734:	22da      	movs	r2, #218	; 0xda
 8001736:	2100      	movs	r1, #0
 8001738:	2078      	movs	r0, #120	; 0x78
 800173a:	f000 fb3f 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800173e:	2212      	movs	r2, #18
 8001740:	2100      	movs	r1, #0
 8001742:	2078      	movs	r0, #120	; 0x78
 8001744:	f000 fb3a 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001748:	22db      	movs	r2, #219	; 0xdb
 800174a:	2100      	movs	r1, #0
 800174c:	2078      	movs	r0, #120	; 0x78
 800174e:	f000 fb35 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001752:	2220      	movs	r2, #32
 8001754:	2100      	movs	r1, #0
 8001756:	2078      	movs	r0, #120	; 0x78
 8001758:	f000 fb30 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800175c:	228d      	movs	r2, #141	; 0x8d
 800175e:	2100      	movs	r1, #0
 8001760:	2078      	movs	r0, #120	; 0x78
 8001762:	f000 fb2b 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001766:	2214      	movs	r2, #20
 8001768:	2100      	movs	r1, #0
 800176a:	2078      	movs	r0, #120	; 0x78
 800176c:	f000 fb26 	bl	8001dbc <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001770:	22af      	movs	r2, #175	; 0xaf
 8001772:	2100      	movs	r1, #0
 8001774:	2078      	movs	r0, #120	; 0x78
 8001776:	f000 fb21 	bl	8001dbc <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800177a:	222e      	movs	r2, #46	; 0x2e
 800177c:	2100      	movs	r1, #0
 800177e:	2078      	movs	r0, #120	; 0x78
 8001780:	f000 fb1c 	bl	8001dbc <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001784:	2000      	movs	r0, #0
 8001786:	f000 f843 	bl	8001810 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800178a:	f000 f813 	bl	80017b4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800178e:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <SSD1306_Init+0x184>)
 8001790:	2200      	movs	r2, #0
 8001792:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001794:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <SSD1306_Init+0x184>)
 8001796:	2200      	movs	r2, #0
 8001798:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SSD1306_Init+0x184>)
 800179c:	2201      	movs	r2, #1
 800179e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80017a0:	2301      	movs	r3, #1
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000062c 	.word	0x2000062c
 80017b0:	20000604 	.word	0x20000604

080017b4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	e01d      	b.n	80017fc <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	3b50      	subs	r3, #80	; 0x50
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	2100      	movs	r1, #0
 80017ca:	2078      	movs	r0, #120	; 0x78
 80017cc:	f000 faf6 	bl	8001dbc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80017d0:	2200      	movs	r2, #0
 80017d2:	2100      	movs	r1, #0
 80017d4:	2078      	movs	r0, #120	; 0x78
 80017d6:	f000 faf1 	bl	8001dbc <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80017da:	2210      	movs	r2, #16
 80017dc:	2100      	movs	r1, #0
 80017de:	2078      	movs	r0, #120	; 0x78
 80017e0:	f000 faec 	bl	8001dbc <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	01db      	lsls	r3, r3, #7
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <SSD1306_UpdateScreen+0x58>)
 80017ea:	441a      	add	r2, r3
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	2140      	movs	r1, #64	; 0x40
 80017f0:	2078      	movs	r0, #120	; 0x78
 80017f2:	f000 fa9b 	bl	8001d2c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80017f6:	79fb      	ldrb	r3, [r7, #7]
 80017f8:	3301      	adds	r3, #1
 80017fa:	71fb      	strb	r3, [r7, #7]
 80017fc:	79fb      	ldrb	r3, [r7, #7]
 80017fe:	2b07      	cmp	r3, #7
 8001800:	d9de      	bls.n	80017c0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000204 	.word	0x20000204

08001810 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <SSD1306_Fill+0x14>
 8001820:	2300      	movs	r3, #0
 8001822:	e000      	b.n	8001826 <SSD1306_Fill+0x16>
 8001824:	23ff      	movs	r3, #255	; 0xff
 8001826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182a:	4619      	mov	r1, r3
 800182c:	4803      	ldr	r0, [pc, #12]	; (800183c <SSD1306_Fill+0x2c>)
 800182e:	f003 ff31 	bl	8005694 <memset>
}
 8001832:	bf00      	nop
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000204 	.word	0x20000204

08001840 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	80fb      	strh	r3, [r7, #6]
 800184a:	460b      	mov	r3, r1
 800184c:	80bb      	strh	r3, [r7, #4]
 800184e:	4613      	mov	r3, r2
 8001850:	70fb      	strb	r3, [r7, #3]
	if (
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	2b7f      	cmp	r3, #127	; 0x7f
 8001856:	d848      	bhi.n	80018ea <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001858:	88bb      	ldrh	r3, [r7, #4]
 800185a:	2b3f      	cmp	r3, #63	; 0x3f
 800185c:	d845      	bhi.n	80018ea <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800185e:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <SSD1306_DrawPixel+0xb4>)
 8001860:	791b      	ldrb	r3, [r3, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d006      	beq.n	8001874 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001866:	78fb      	ldrb	r3, [r7, #3]
 8001868:	2b00      	cmp	r3, #0
 800186a:	bf0c      	ite	eq
 800186c:	2301      	moveq	r3, #1
 800186e:	2300      	movne	r3, #0
 8001870:	b2db      	uxtb	r3, r3
 8001872:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001874:	78fb      	ldrb	r3, [r7, #3]
 8001876:	2b01      	cmp	r3, #1
 8001878:	d11a      	bne.n	80018b0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800187a:	88fa      	ldrh	r2, [r7, #6]
 800187c:	88bb      	ldrh	r3, [r7, #4]
 800187e:	08db      	lsrs	r3, r3, #3
 8001880:	b298      	uxth	r0, r3
 8001882:	4603      	mov	r3, r0
 8001884:	01db      	lsls	r3, r3, #7
 8001886:	4413      	add	r3, r2
 8001888:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <SSD1306_DrawPixel+0xb8>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	b25a      	sxtb	r2, r3
 800188e:	88bb      	ldrh	r3, [r7, #4]
 8001890:	f003 0307 	and.w	r3, r3, #7
 8001894:	2101      	movs	r1, #1
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	b25b      	sxtb	r3, r3
 800189c:	4313      	orrs	r3, r2
 800189e:	b259      	sxtb	r1, r3
 80018a0:	88fa      	ldrh	r2, [r7, #6]
 80018a2:	4603      	mov	r3, r0
 80018a4:	01db      	lsls	r3, r3, #7
 80018a6:	4413      	add	r3, r2
 80018a8:	b2c9      	uxtb	r1, r1
 80018aa:	4a13      	ldr	r2, [pc, #76]	; (80018f8 <SSD1306_DrawPixel+0xb8>)
 80018ac:	54d1      	strb	r1, [r2, r3]
 80018ae:	e01d      	b.n	80018ec <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018b0:	88fa      	ldrh	r2, [r7, #6]
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	08db      	lsrs	r3, r3, #3
 80018b6:	b298      	uxth	r0, r3
 80018b8:	4603      	mov	r3, r0
 80018ba:	01db      	lsls	r3, r3, #7
 80018bc:	4413      	add	r3, r2
 80018be:	4a0e      	ldr	r2, [pc, #56]	; (80018f8 <SSD1306_DrawPixel+0xb8>)
 80018c0:	5cd3      	ldrb	r3, [r2, r3]
 80018c2:	b25a      	sxtb	r2, r3
 80018c4:	88bb      	ldrh	r3, [r7, #4]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	2101      	movs	r1, #1
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	b25b      	sxtb	r3, r3
 80018d2:	43db      	mvns	r3, r3
 80018d4:	b25b      	sxtb	r3, r3
 80018d6:	4013      	ands	r3, r2
 80018d8:	b259      	sxtb	r1, r3
 80018da:	88fa      	ldrh	r2, [r7, #6]
 80018dc:	4603      	mov	r3, r0
 80018de:	01db      	lsls	r3, r3, #7
 80018e0:	4413      	add	r3, r2
 80018e2:	b2c9      	uxtb	r1, r1
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <SSD1306_DrawPixel+0xb8>)
 80018e6:	54d1      	strb	r1, [r2, r3]
 80018e8:	e000      	b.n	80018ec <SSD1306_DrawPixel+0xac>
		return;
 80018ea:	bf00      	nop
	}
}
 80018ec:	370c      	adds	r7, #12
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	20000604 	.word	0x20000604
 80018f8:	20000204 	.word	0x20000204

080018fc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	460a      	mov	r2, r1
 8001906:	80fb      	strh	r3, [r7, #6]
 8001908:	4613      	mov	r3, r2
 800190a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800190c:	4a05      	ldr	r2, [pc, #20]	; (8001924 <SSD1306_GotoXY+0x28>)
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001912:	4a04      	ldr	r2, [pc, #16]	; (8001924 <SSD1306_GotoXY+0x28>)
 8001914:	88bb      	ldrh	r3, [r7, #4]
 8001916:	8053      	strh	r3, [r2, #2]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	bc80      	pop	{r7}
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000604 	.word	0x20000604

08001928 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	4603      	mov	r3, r0
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	4613      	mov	r3, r2
 8001936:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <SSD1306_Putc+0xfc>)
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	461a      	mov	r2, r3
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	4413      	add	r3, r2
	if (
 8001944:	2b7f      	cmp	r3, #127	; 0x7f
 8001946:	dc07      	bgt.n	8001958 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001948:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <SSD1306_Putc+0xfc>)
 800194a:	885b      	ldrh	r3, [r3, #2]
 800194c:	461a      	mov	r2, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	785b      	ldrb	r3, [r3, #1]
 8001952:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001954:	2b3f      	cmp	r3, #63	; 0x3f
 8001956:	dd01      	ble.n	800195c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001958:	2300      	movs	r3, #0
 800195a:	e05e      	b.n	8001a1a <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e04b      	b.n	80019fa <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	3b20      	subs	r3, #32
 800196a:	6839      	ldr	r1, [r7, #0]
 800196c:	7849      	ldrb	r1, [r1, #1]
 800196e:	fb01 f303 	mul.w	r3, r1, r3
 8001972:	4619      	mov	r1, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	440b      	add	r3, r1
 8001978:	005b      	lsls	r3, r3, #1
 800197a:	4413      	add	r3, r2
 800197c:	881b      	ldrh	r3, [r3, #0]
 800197e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	e030      	b.n	80019e8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d010      	beq.n	80019b8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001996:	4b23      	ldr	r3, [pc, #140]	; (8001a24 <SSD1306_Putc+0xfc>)
 8001998:	881a      	ldrh	r2, [r3, #0]
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	b29b      	uxth	r3, r3
 800199e:	4413      	add	r3, r2
 80019a0:	b298      	uxth	r0, r3
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <SSD1306_Putc+0xfc>)
 80019a4:	885a      	ldrh	r2, [r3, #2]
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	4413      	add	r3, r2
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	79ba      	ldrb	r2, [r7, #6]
 80019b0:	4619      	mov	r1, r3
 80019b2:	f7ff ff45 	bl	8001840 <SSD1306_DrawPixel>
 80019b6:	e014      	b.n	80019e2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80019b8:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <SSD1306_Putc+0xfc>)
 80019ba:	881a      	ldrh	r2, [r3, #0]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	4413      	add	r3, r2
 80019c2:	b298      	uxth	r0, r3
 80019c4:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <SSD1306_Putc+0xfc>)
 80019c6:	885a      	ldrh	r2, [r3, #2]
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	4413      	add	r3, r2
 80019ce:	b299      	uxth	r1, r3
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	bf0c      	ite	eq
 80019d6:	2301      	moveq	r3, #1
 80019d8:	2300      	movne	r3, #0
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	461a      	mov	r2, r3
 80019de:	f7ff ff2f 	bl	8001840 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	3301      	adds	r3, #1
 80019e6:	613b      	str	r3, [r7, #16]
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	461a      	mov	r2, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d3c8      	bcc.n	8001986 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	3301      	adds	r3, #1
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	785b      	ldrb	r3, [r3, #1]
 80019fe:	461a      	mov	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d3ad      	bcc.n	8001962 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <SSD1306_Putc+0xfc>)
 8001a08:	881a      	ldrh	r2, [r3, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	b29b      	uxth	r3, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b03      	ldr	r3, [pc, #12]	; (8001a24 <SSD1306_Putc+0xfc>)
 8001a16:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001a18:	79fb      	ldrb	r3, [r7, #7]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000604 	.word	0x20000604

08001a28 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	4613      	mov	r3, r2
 8001a34:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001a36:	e012      	b.n	8001a5e <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	79fa      	ldrb	r2, [r7, #7]
 8001a3e:	68b9      	ldr	r1, [r7, #8]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff71 	bl	8001928 <SSD1306_Putc>
 8001a46:	4603      	mov	r3, r0
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d002      	beq.n	8001a58 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	e008      	b.n	8001a6a <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1e8      	bne.n	8001a38 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	781b      	ldrb	r3, [r3, #0]
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3710      	adds	r7, #16
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001a72:	b590      	push	{r4, r7, lr}
 8001a74:	b087      	sub	sp, #28
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	4604      	mov	r4, r0
 8001a7a:	4608      	mov	r0, r1
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	461a      	mov	r2, r3
 8001a80:	4623      	mov	r3, r4
 8001a82:	80fb      	strh	r3, [r7, #6]
 8001a84:	4603      	mov	r3, r0
 8001a86:	80bb      	strh	r3, [r7, #4]
 8001a88:	460b      	mov	r3, r1
 8001a8a:	807b      	strh	r3, [r7, #2]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	2b7f      	cmp	r3, #127	; 0x7f
 8001a94:	d901      	bls.n	8001a9a <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001a96:	237f      	movs	r3, #127	; 0x7f
 8001a98:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001a9a:	887b      	ldrh	r3, [r7, #2]
 8001a9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a9e:	d901      	bls.n	8001aa4 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001aa0:	237f      	movs	r3, #127	; 0x7f
 8001aa2:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001aa4:	88bb      	ldrh	r3, [r7, #4]
 8001aa6:	2b3f      	cmp	r3, #63	; 0x3f
 8001aa8:	d901      	bls.n	8001aae <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001aaa:	233f      	movs	r3, #63	; 0x3f
 8001aac:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001aae:	883b      	ldrh	r3, [r7, #0]
 8001ab0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ab2:	d901      	bls.n	8001ab8 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001ab4:	233f      	movs	r3, #63	; 0x3f
 8001ab6:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001ab8:	88fa      	ldrh	r2, [r7, #6]
 8001aba:	887b      	ldrh	r3, [r7, #2]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d205      	bcs.n	8001acc <SSD1306_DrawLine+0x5a>
 8001ac0:	887a      	ldrh	r2, [r7, #2]
 8001ac2:	88fb      	ldrh	r3, [r7, #6]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	b21b      	sxth	r3, r3
 8001aca:	e004      	b.n	8001ad6 <SSD1306_DrawLine+0x64>
 8001acc:	88fa      	ldrh	r2, [r7, #6]
 8001ace:	887b      	ldrh	r3, [r7, #2]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	b21b      	sxth	r3, r3
 8001ad6:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001ad8:	88ba      	ldrh	r2, [r7, #4]
 8001ada:	883b      	ldrh	r3, [r7, #0]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d205      	bcs.n	8001aec <SSD1306_DrawLine+0x7a>
 8001ae0:	883a      	ldrh	r2, [r7, #0]
 8001ae2:	88bb      	ldrh	r3, [r7, #4]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	b21b      	sxth	r3, r3
 8001aea:	e004      	b.n	8001af6 <SSD1306_DrawLine+0x84>
 8001aec:	88ba      	ldrh	r2, [r7, #4]
 8001aee:	883b      	ldrh	r3, [r7, #0]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	b21b      	sxth	r3, r3
 8001af6:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001af8:	88fa      	ldrh	r2, [r7, #6]
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d201      	bcs.n	8001b04 <SSD1306_DrawLine+0x92>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e001      	b.n	8001b08 <SSD1306_DrawLine+0x96>
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295
 8001b08:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001b0a:	88ba      	ldrh	r2, [r7, #4]
 8001b0c:	883b      	ldrh	r3, [r7, #0]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d201      	bcs.n	8001b16 <SSD1306_DrawLine+0xa4>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e001      	b.n	8001b1a <SSD1306_DrawLine+0xa8>
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001b1c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b20:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dd06      	ble.n	8001b36 <SSD1306_DrawLine+0xc4>
 8001b28:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b2c:	0fda      	lsrs	r2, r3, #31
 8001b2e:	4413      	add	r3, r2
 8001b30:	105b      	asrs	r3, r3, #1
 8001b32:	b21b      	sxth	r3, r3
 8001b34:	e006      	b.n	8001b44 <SSD1306_DrawLine+0xd2>
 8001b36:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b3a:	425b      	negs	r3, r3
 8001b3c:	0fda      	lsrs	r2, r3, #31
 8001b3e:	4413      	add	r3, r2
 8001b40:	105b      	asrs	r3, r3, #1
 8001b42:	b21b      	sxth	r3, r3
 8001b44:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001b46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d129      	bne.n	8001ba2 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001b4e:	883a      	ldrh	r2, [r7, #0]
 8001b50:	88bb      	ldrh	r3, [r7, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d205      	bcs.n	8001b62 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001b56:	883b      	ldrh	r3, [r7, #0]
 8001b58:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001b5e:	893b      	ldrh	r3, [r7, #8]
 8001b60:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001b62:	887a      	ldrh	r2, [r7, #2]
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d205      	bcs.n	8001b76 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001b6a:	887b      	ldrh	r3, [r7, #2]
 8001b6c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001b72:	893b      	ldrh	r3, [r7, #8]
 8001b74:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	82bb      	strh	r3, [r7, #20]
 8001b7a:	e00c      	b.n	8001b96 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001b7c:	8ab9      	ldrh	r1, [r7, #20]
 8001b7e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001b82:	88fb      	ldrh	r3, [r7, #6]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fe5b 	bl	8001840 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001b8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3301      	adds	r3, #1
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	82bb      	strh	r3, [r7, #20]
 8001b96:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001b9a:	883b      	ldrh	r3, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	dded      	ble.n	8001b7c <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001ba0:	e05f      	b.n	8001c62 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001ba2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d129      	bne.n	8001bfe <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001baa:	883a      	ldrh	r2, [r7, #0]
 8001bac:	88bb      	ldrh	r3, [r7, #4]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d205      	bcs.n	8001bbe <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001bb2:	883b      	ldrh	r3, [r7, #0]
 8001bb4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001bb6:	88bb      	ldrh	r3, [r7, #4]
 8001bb8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001bba:	893b      	ldrh	r3, [r7, #8]
 8001bbc:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d205      	bcs.n	8001bd2 <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001bc6:	887b      	ldrh	r3, [r7, #2]
 8001bc8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001bce:	893b      	ldrh	r3, [r7, #8]
 8001bd0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 8001bd2:	88fb      	ldrh	r3, [r7, #6]
 8001bd4:	82bb      	strh	r3, [r7, #20]
 8001bd6:	e00c      	b.n	8001bf2 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001bd8:	8abb      	ldrh	r3, [r7, #20]
 8001bda:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001bde:	88b9      	ldrh	r1, [r7, #4]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7ff fe2d 	bl	8001840 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001be6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001bea:	b29b      	uxth	r3, r3
 8001bec:	3301      	adds	r3, #1
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	82bb      	strh	r3, [r7, #20]
 8001bf2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001bf6:	887b      	ldrh	r3, [r7, #2]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	dded      	ble.n	8001bd8 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001bfc:	e031      	b.n	8001c62 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8001bfe:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c02:	88b9      	ldrh	r1, [r7, #4]
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff fe1a 	bl	8001840 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001c0c:	88fa      	ldrh	r2, [r7, #6]
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d103      	bne.n	8001c1c <SSD1306_DrawLine+0x1aa>
 8001c14:	88ba      	ldrh	r2, [r7, #4]
 8001c16:	883b      	ldrh	r3, [r7, #0]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d021      	beq.n	8001c60 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001c1c:	8afb      	ldrh	r3, [r7, #22]
 8001c1e:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001c20:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c28:	425b      	negs	r3, r3
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dd08      	ble.n	8001c40 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001c2e:	8afa      	ldrh	r2, [r7, #22]
 8001c30:	8a3b      	ldrh	r3, [r7, #16]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001c38:	89fa      	ldrh	r2, [r7, #14]
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001c40:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c44:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dad8      	bge.n	8001bfe <SSD1306_DrawLine+0x18c>
			err += dx;
 8001c4c:	8afa      	ldrh	r2, [r7, #22]
 8001c4e:	8a7b      	ldrh	r3, [r7, #18]
 8001c50:	4413      	add	r3, r2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001c56:	89ba      	ldrh	r2, [r7, #12]
 8001c58:	88bb      	ldrh	r3, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001c5e:	e7ce      	b.n	8001bfe <SSD1306_DrawLine+0x18c>
			break;
 8001c60:	bf00      	nop
		} 
	}
}
 8001c62:	371c      	adds	r7, #28
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd90      	pop	{r4, r7, pc}

08001c68 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	4604      	mov	r4, r0
 8001c70:	4608      	mov	r0, r1
 8001c72:	4611      	mov	r1, r2
 8001c74:	461a      	mov	r2, r3
 8001c76:	4623      	mov	r3, r4
 8001c78:	80fb      	strh	r3, [r7, #6]
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	80bb      	strh	r3, [r7, #4]
 8001c7e:	460b      	mov	r3, r1
 8001c80:	807b      	strh	r3, [r7, #2]
 8001c82:	4613      	mov	r3, r2
 8001c84:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	2b7f      	cmp	r3, #127	; 0x7f
 8001c8a:	d836      	bhi.n	8001cfa <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 8001c8c:	88bb      	ldrh	r3, [r7, #4]
 8001c8e:	2b3f      	cmp	r3, #63	; 0x3f
 8001c90:	d833      	bhi.n	8001cfa <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 8001c92:	88fa      	ldrh	r2, [r7, #6]
 8001c94:	887b      	ldrh	r3, [r7, #2]
 8001c96:	4413      	add	r3, r2
 8001c98:	2b7f      	cmp	r3, #127	; 0x7f
 8001c9a:	dd03      	ble.n	8001ca4 <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 8001c9c:	88fb      	ldrh	r3, [r7, #6]
 8001c9e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8001ca2:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 8001ca4:	88ba      	ldrh	r2, [r7, #4]
 8001ca6:	883b      	ldrh	r3, [r7, #0]
 8001ca8:	4413      	add	r3, r2
 8001caa:	2b3f      	cmp	r3, #63	; 0x3f
 8001cac:	dd03      	ble.n	8001cb6 <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8001cae:	88bb      	ldrh	r3, [r7, #4]
 8001cb0:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8001cb4:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
 8001cba:	e018      	b.n	8001cee <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	88bb      	ldrh	r3, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	b299      	uxth	r1, r3
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	887b      	ldrh	r3, [r7, #2]
 8001cca:	4413      	add	r3, r2
 8001ccc:	b29c      	uxth	r4, r3
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	88bb      	ldrh	r3, [r7, #4]
 8001cd4:	4413      	add	r3, r2
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	88f8      	ldrh	r0, [r7, #6]
 8001cda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	4622      	mov	r2, r4
 8001ce4:	f7ff fec5 	bl	8001a72 <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	3301      	adds	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	883a      	ldrh	r2, [r7, #0]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d2e1      	bcs.n	8001cbc <SSD1306_DrawFilledRectangle+0x54>
 8001cf8:	e000      	b.n	8001cfc <SSD1306_DrawFilledRectangle+0x94>
		return;
 8001cfa:	bf00      	nop
	}
}
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd90      	pop	{r4, r7, pc}
	...

08001d04 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001d0a:	4b07      	ldr	r3, [pc, #28]	; (8001d28 <ssd1306_I2C_Init+0x24>)
 8001d0c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d0e:	e002      	b.n	8001d16 <ssd1306_I2C_Init+0x12>
		p--;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3b01      	subs	r3, #1
 8001d14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f9      	bne.n	8001d10 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	0003d090 	.word	0x0003d090

08001d2c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001d2c:	b590      	push	{r4, r7, lr}
 8001d2e:	b0c7      	sub	sp, #284	; 0x11c
 8001d30:	af02      	add	r7, sp, #8
 8001d32:	4604      	mov	r4, r0
 8001d34:	4608      	mov	r0, r1
 8001d36:	4639      	mov	r1, r7
 8001d38:	600a      	str	r2, [r1, #0]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	1dfb      	adds	r3, r7, #7
 8001d3e:	4622      	mov	r2, r4
 8001d40:	701a      	strb	r2, [r3, #0]
 8001d42:	1dbb      	adds	r3, r7, #6
 8001d44:	4602      	mov	r2, r0
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	460a      	mov	r2, r1
 8001d4c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	1dba      	adds	r2, r7, #6
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001d58:	2300      	movs	r3, #0
 8001d5a:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d5e:	e010      	b.n	8001d82 <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 8001d60:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d64:	463a      	mov	r2, r7
 8001d66:	6812      	ldr	r2, [r2, #0]
 8001d68:	441a      	add	r2, r3
 8001d6a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d6e:	3301      	adds	r3, #1
 8001d70:	7811      	ldrb	r1, [r2, #0]
 8001d72:	f107 020c 	add.w	r2, r7, #12
 8001d76:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001d78:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001d82:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	1d3a      	adds	r2, r7, #4
 8001d8a:	8812      	ldrh	r2, [r2, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8e7      	bhi.n	8001d60 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	b299      	uxth	r1, r3
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	b298      	uxth	r0, r3
 8001d9e:	f107 020c 	add.w	r2, r7, #12
 8001da2:	230a      	movs	r3, #10
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	4603      	mov	r3, r0
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <ssd1306_I2C_WriteMulti+0x8c>)
 8001daa:	f001 f873 	bl	8002e94 <HAL_I2C_Master_Transmit>
}
 8001dae:	bf00      	nop
 8001db0:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd90      	pop	{r4, r7, pc}
 8001db8:	2000062c 	.word	0x2000062c

08001dbc <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	71bb      	strb	r3, [r7, #6]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001dce:	79bb      	ldrb	r3, [r7, #6]
 8001dd0:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001dd2:	797b      	ldrb	r3, [r7, #5]
 8001dd4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	b299      	uxth	r1, r3
 8001dda:	f107 020c 	add.w	r2, r7, #12
 8001dde:	230a      	movs	r3, #10
 8001de0:	9300      	str	r3, [sp, #0]
 8001de2:	2302      	movs	r3, #2
 8001de4:	4803      	ldr	r0, [pc, #12]	; (8001df4 <ssd1306_I2C_Write+0x38>)
 8001de6:	f001 f855 	bl	8002e94 <HAL_I2C_Master_Transmit>
}
 8001dea:	bf00      	nop
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	2000062c 	.word	0x2000062c

08001df8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b085      	sub	sp, #20
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e00:	699b      	ldr	r3, [r3, #24]
 8001e02:	4a14      	ldr	r2, [pc, #80]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e04:	f043 0301 	orr.w	r3, r3, #1
 8001e08:	6193      	str	r3, [r2, #24]
 8001e0a:	4b12      	ldr	r3, [pc, #72]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e0c:	699b      	ldr	r3, [r3, #24]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e16:	4b0f      	ldr	r3, [pc, #60]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a0e      	ldr	r2, [pc, #56]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
 8001e22:	4b0c      	ldr	r3, [pc, #48]	; (8001e54 <HAL_MspInit+0x5c>)
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <HAL_MspInit+0x60>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	4a04      	ldr	r2, [pc, #16]	; (8001e58 <HAL_MspInit+0x60>)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40010000 	.word	0x40010000

08001e5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b088      	sub	sp, #32
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0310 	add.w	r3, r7, #16
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_ADC_MspInit+0x6c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d121      	bne.n	8001ec0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_ADC_MspInit+0x70>)
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <HAL_ADC_MspInit+0x70>)
 8001e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e86:	6193      	str	r3, [r2, #24]
 8001e88:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_ADC_MspInit+0x70>)
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_ADC_MspInit+0x70>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a0c      	ldr	r2, [pc, #48]	; (8001ecc <HAL_ADC_MspInit+0x70>)
 8001e9a:	f043 0304 	orr.w	r3, r3, #4
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_ADC_MspInit+0x70>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eac:	2301      	movs	r3, #1
 8001eae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb4:	f107 0310 	add.w	r3, r7, #16
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <HAL_ADC_MspInit+0x74>)
 8001ebc:	f000 fd20 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40012400 	.word	0x40012400
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010800 	.word	0x40010800

08001ed4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b088      	sub	sp, #32
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001edc:	f107 0310 	add.w	r3, r7, #16
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a15      	ldr	r2, [pc, #84]	; (8001f44 <HAL_I2C_MspInit+0x70>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d123      	bne.n	8001f3c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef4:	4b14      	ldr	r3, [pc, #80]	; (8001f48 <HAL_I2C_MspInit+0x74>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <HAL_I2C_MspInit+0x74>)
 8001efa:	f043 0308 	orr.w	r3, r3, #8
 8001efe:	6193      	str	r3, [r2, #24]
 8001f00:	4b11      	ldr	r3, [pc, #68]	; (8001f48 <HAL_I2C_MspInit+0x74>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	60fb      	str	r3, [r7, #12]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f0c:	23c0      	movs	r3, #192	; 0xc0
 8001f0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f10:	2312      	movs	r3, #18
 8001f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f14:	2303      	movs	r3, #3
 8001f16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f18:	f107 0310 	add.w	r3, r7, #16
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	480b      	ldr	r0, [pc, #44]	; (8001f4c <HAL_I2C_MspInit+0x78>)
 8001f20:	f000 fcee 	bl	8002900 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f24:	4b08      	ldr	r3, [pc, #32]	; (8001f48 <HAL_I2C_MspInit+0x74>)
 8001f26:	69db      	ldr	r3, [r3, #28]
 8001f28:	4a07      	ldr	r2, [pc, #28]	; (8001f48 <HAL_I2C_MspInit+0x74>)
 8001f2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f2e:	61d3      	str	r3, [r2, #28]
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_I2C_MspInit+0x74>)
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f38:	60bb      	str	r3, [r7, #8]
 8001f3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f3c:	bf00      	nop
 8001f3e:	3720      	adds	r7, #32
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40005400 	.word	0x40005400
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010c00 	.word	0x40010c00

08001f50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a0d      	ldr	r2, [pc, #52]	; (8001f94 <HAL_TIM_Base_MspInit+0x44>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d113      	bne.n	8001f8a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f62:	4b0d      	ldr	r3, [pc, #52]	; (8001f98 <HAL_TIM_Base_MspInit+0x48>)
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	4a0c      	ldr	r2, [pc, #48]	; (8001f98 <HAL_TIM_Base_MspInit+0x48>)
 8001f68:	f043 0302 	orr.w	r3, r3, #2
 8001f6c:	61d3      	str	r3, [r2, #28]
 8001f6e:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <HAL_TIM_Base_MspInit+0x48>)
 8001f70:	69db      	ldr	r3, [r3, #28]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	201d      	movs	r0, #29
 8001f80:	f000 fc87 	bl	8002892 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f84:	201d      	movs	r0, #29
 8001f86:	f000 fca0 	bl	80028ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40021000 	.word	0x40021000

08001f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b088      	sub	sp, #32
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0310 	add.w	r3, r7, #16
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1c      	ldr	r2, [pc, #112]	; (8002028 <HAL_UART_MspInit+0x8c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d131      	bne.n	8002020 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001fbc:	4b1b      	ldr	r3, [pc, #108]	; (800202c <HAL_UART_MspInit+0x90>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	4a1a      	ldr	r2, [pc, #104]	; (800202c <HAL_UART_MspInit+0x90>)
 8001fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fc6:	6193      	str	r3, [r2, #24]
 8001fc8:	4b18      	ldr	r3, [pc, #96]	; (800202c <HAL_UART_MspInit+0x90>)
 8001fca:	699b      	ldr	r3, [r3, #24]
 8001fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fd0:	60fb      	str	r3, [r7, #12]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd4:	4b15      	ldr	r3, [pc, #84]	; (800202c <HAL_UART_MspInit+0x90>)
 8001fd6:	699b      	ldr	r3, [r3, #24]
 8001fd8:	4a14      	ldr	r2, [pc, #80]	; (800202c <HAL_UART_MspInit+0x90>)
 8001fda:	f043 0304 	orr.w	r3, r3, #4
 8001fde:	6193      	str	r3, [r2, #24]
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_UART_MspInit+0x90>)
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffa:	f107 0310 	add.w	r3, r7, #16
 8001ffe:	4619      	mov	r1, r3
 8002000:	480b      	ldr	r0, [pc, #44]	; (8002030 <HAL_UART_MspInit+0x94>)
 8002002:	f000 fc7d 	bl	8002900 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800200c:	2300      	movs	r3, #0
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002010:	2300      	movs	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002014:	f107 0310 	add.w	r3, r7, #16
 8002018:	4619      	mov	r1, r3
 800201a:	4805      	ldr	r0, [pc, #20]	; (8002030 <HAL_UART_MspInit+0x94>)
 800201c:	f000 fc70 	bl	8002900 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002020:	bf00      	nop
 8002022:	3720      	adds	r7, #32
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40013800 	.word	0x40013800
 800202c:	40021000 	.word	0x40021000
 8002030:	40010800 	.word	0x40010800

08002034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <HardFault_Handler+0x4>

08002046 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <MemManage_Handler+0x4>

0800204c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002050:	e7fe      	b.n	8002050 <BusFault_Handler+0x4>

08002052 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002056:	e7fe      	b.n	8002056 <UsageFault_Handler+0x4>

08002058 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002080:	f000 f8e8 	bl	8002254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002084:	bf00      	nop
 8002086:	bd80      	pop	{r7, pc}

08002088 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800208c:	4802      	ldr	r0, [pc, #8]	; (8002098 <TIM3_IRQHandler+0x10>)
 800208e:	f002 fe7d 	bl	8004d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200006c0 	.word	0x200006c0

0800209c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//	for(int i=0;i<65535;i++);
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13)==1);
 80020a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020a4:	4804      	ldr	r0, [pc, #16]	; (80020b8 <EXTI15_10_IRQHandler+0x1c>)
 80020a6:	f000 fd85 	bl	8002bb4 <HAL_GPIO_ReadPin>
//			    SSD1306_Puts("Light:", &Font_7x10, SSD1306_COLOR_WHITE);
//			    SSD1306_UpdateScreen();
//		}
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80020aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80020ae:	f000 fdb1 	bl	8002c14 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40010c00 	.word	0x40010c00

080020bc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80020c4:	4b11      	ldr	r3, [pc, #68]	; (800210c <_sbrk+0x50>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <_sbrk+0x16>
		heap_end = &end;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <_sbrk+0x50>)
 80020ce:	4a10      	ldr	r2, [pc, #64]	; (8002110 <_sbrk+0x54>)
 80020d0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <_sbrk+0x50>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <_sbrk+0x50>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	466a      	mov	r2, sp
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d907      	bls.n	80020f6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80020e6:	f003 faab 	bl	8005640 <__errno>
 80020ea:	4602      	mov	r2, r0
 80020ec:	230c      	movs	r3, #12
 80020ee:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80020f0:	f04f 33ff 	mov.w	r3, #4294967295
 80020f4:	e006      	b.n	8002104 <_sbrk+0x48>
	}

	heap_end += incr;
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <_sbrk+0x50>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	4a03      	ldr	r2, [pc, #12]	; (800210c <_sbrk+0x50>)
 8002100:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	2000060c 	.word	0x2000060c
 8002110:	20000810 	.word	0x20000810

08002114 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002118:	4b15      	ldr	r3, [pc, #84]	; (8002170 <SystemInit+0x5c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <SystemInit+0x5c>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <SystemInit+0x5c>)
 8002126:	685a      	ldr	r2, [r3, #4]
 8002128:	4911      	ldr	r1, [pc, #68]	; (8002170 <SystemInit+0x5c>)
 800212a:	4b12      	ldr	r3, [pc, #72]	; (8002174 <SystemInit+0x60>)
 800212c:	4013      	ands	r3, r2
 800212e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002130:	4b0f      	ldr	r3, [pc, #60]	; (8002170 <SystemInit+0x5c>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a0e      	ldr	r2, [pc, #56]	; (8002170 <SystemInit+0x5c>)
 8002136:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800213a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800213e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002140:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <SystemInit+0x5c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0a      	ldr	r2, [pc, #40]	; (8002170 <SystemInit+0x5c>)
 8002146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800214c:	4b08      	ldr	r3, [pc, #32]	; (8002170 <SystemInit+0x5c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	4a07      	ldr	r2, [pc, #28]	; (8002170 <SystemInit+0x5c>)
 8002152:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002156:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8002158:	4b05      	ldr	r3, [pc, #20]	; (8002170 <SystemInit+0x5c>)
 800215a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800215e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SystemInit+0x64>)
 8002162:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002166:	609a      	str	r2, [r3, #8]
#endif 
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	40021000 	.word	0x40021000
 8002174:	f8ff0000 	.word	0xf8ff0000
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800217c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800217e:	e003      	b.n	8002188 <LoopCopyDataInit>

08002180 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002182:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002184:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002186:	3104      	adds	r1, #4

08002188 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002188:	480a      	ldr	r0, [pc, #40]	; (80021b4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800218c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800218e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002190:	d3f6      	bcc.n	8002180 <CopyDataInit>
  ldr r2, =_sbss
 8002192:	4a0a      	ldr	r2, [pc, #40]	; (80021bc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002194:	e002      	b.n	800219c <LoopFillZerobss>

08002196 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002196:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002198:	f842 3b04 	str.w	r3, [r2], #4

0800219c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800219c:	4b08      	ldr	r3, [pc, #32]	; (80021c0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800219e:	429a      	cmp	r2, r3
  bcc FillZerobss
 80021a0:	d3f9      	bcc.n	8002196 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80021a2:	f7ff ffb7 	bl	8002114 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80021a6:	f003 fa51 	bl	800564c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021aa:	f7fe fe69 	bl	8000e80 <main>
  bx lr
 80021ae:	4770      	bx	lr
  ldr r3, =_sidata
 80021b0:	08008178 	.word	0x08008178
  ldr r0, =_sdata
 80021b4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80021b8:	200001e4 	.word	0x200001e4
  ldr r2, =_sbss
 80021bc:	200001e4 	.word	0x200001e4
  ldr r3, = _ebss
 80021c0:	2000080c 	.word	0x2000080c

080021c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021c4:	e7fe      	b.n	80021c4 <ADC1_2_IRQHandler>
	...

080021c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_Init+0x28>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <HAL_Init+0x28>)
 80021d2:	f043 0310 	orr.w	r3, r3, #16
 80021d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d8:	2003      	movs	r0, #3
 80021da:	f000 fb4f 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021de:	2000      	movs	r0, #0
 80021e0:	f000 f808 	bl	80021f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e4:	f7ff fe08 	bl	8001df8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40022000 	.word	0x40022000

080021f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_InitTick+0x54>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_InitTick+0x58>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	fbb3 f3f1 	udiv	r3, r3, r1
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fb67 	bl	80028e6 <HAL_SYSTICK_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e00e      	b.n	8002240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b0f      	cmp	r3, #15
 8002226:	d80a      	bhi.n	800223e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002228:	2200      	movs	r2, #0
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	f04f 30ff 	mov.w	r0, #4294967295
 8002230:	f000 fb2f 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <HAL_InitTick+0x5c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	20000008 	.word	0x20000008
 800224c:	20000010 	.word	0x20000010
 8002250:	2000000c 	.word	0x2000000c

08002254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002258:	4b05      	ldr	r3, [pc, #20]	; (8002270 <HAL_IncTick+0x1c>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_IncTick+0x20>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a03      	ldr	r2, [pc, #12]	; (8002274 <HAL_IncTick+0x20>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	bc80      	pop	{r7}
 800226e:	4770      	bx	lr
 8002270:	20000010 	.word	0x20000010
 8002274:	20000804 	.word	0x20000804

08002278 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
  return uwTick;
 800227c:	4b02      	ldr	r3, [pc, #8]	; (8002288 <HAL_GetTick+0x10>)
 800227e:	681b      	ldr	r3, [r3, #0]
}
 8002280:	4618      	mov	r0, r3
 8002282:	46bd      	mov	sp, r7
 8002284:	bc80      	pop	{r7}
 8002286:	4770      	bx	lr
 8002288:	20000804 	.word	0x20000804

0800228c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002294:	f7ff fff0 	bl	8002278 <HAL_GetTick>
 8002298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d005      	beq.n	80022b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022a6:	4b09      	ldr	r3, [pc, #36]	; (80022cc <HAL_Delay+0x40>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	461a      	mov	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022b2:	bf00      	nop
 80022b4:	f7ff ffe0 	bl	8002278 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	68fa      	ldr	r2, [r7, #12]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d8f7      	bhi.n	80022b4 <HAL_Delay+0x28>
  {
  }
}
 80022c4:	bf00      	nop
 80022c6:	3710      	adds	r7, #16
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000010 	.word	0x20000010

080022d0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022d8:	2300      	movs	r3, #0
 80022da:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e0be      	b.n	8002470 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d109      	bne.n	8002314 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fda4 	bl	8001e5c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f000 f9ab 	bl	8002670 <ADC_ConversionStop_Disable>
 800231a:	4603      	mov	r3, r0
 800231c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002322:	f003 0310 	and.w	r3, r3, #16
 8002326:	2b00      	cmp	r3, #0
 8002328:	f040 8099 	bne.w	800245e <HAL_ADC_Init+0x18e>
 800232c:	7dfb      	ldrb	r3, [r7, #23]
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 8095 	bne.w	800245e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800233c:	f023 0302 	bic.w	r3, r3, #2
 8002340:	f043 0202 	orr.w	r2, r3, #2
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002350:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7b1b      	ldrb	r3, [r3, #12]
 8002356:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002358:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800235a:	68ba      	ldr	r2, [r7, #8]
 800235c:	4313      	orrs	r3, r2
 800235e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002368:	d003      	beq.n	8002372 <HAL_ADC_Init+0xa2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d102      	bne.n	8002378 <HAL_ADC_Init+0xa8>
 8002372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002376:	e000      	b.n	800237a <HAL_ADC_Init+0xaa>
 8002378:	2300      	movs	r3, #0
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	4313      	orrs	r3, r2
 800237e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7d1b      	ldrb	r3, [r3, #20]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d119      	bne.n	80023bc <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	7b1b      	ldrb	r3, [r3, #12]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d109      	bne.n	80023a4 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	3b01      	subs	r3, #1
 8002396:	035a      	lsls	r2, r3, #13
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	e00b      	b.n	80023bc <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023a8:	f043 0220 	orr.w	r2, r3, #32
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	430a      	orrs	r2, r1
 80023ce:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	4b28      	ldr	r3, [pc, #160]	; (8002478 <HAL_ADC_Init+0x1a8>)
 80023d8:	4013      	ands	r3, r2
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	6812      	ldr	r2, [r2, #0]
 80023de:	68b9      	ldr	r1, [r7, #8]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023ec:	d003      	beq.n	80023f6 <HAL_ADC_Init+0x126>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d104      	bne.n	8002400 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	3b01      	subs	r3, #1
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002406:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	430a      	orrs	r2, r1
 8002412:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	4b18      	ldr	r3, [pc, #96]	; (800247c <HAL_ADC_Init+0x1ac>)
 800241c:	4013      	ands	r3, r2
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	d10b      	bne.n	800243c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f023 0303 	bic.w	r3, r3, #3
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800243a:	e018      	b.n	800246e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002440:	f023 0312 	bic.w	r3, r3, #18
 8002444:	f043 0210 	orr.w	r2, r3, #16
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f043 0201 	orr.w	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800245c:	e007      	b.n	800246e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002462:	f043 0210 	orr.w	r2, r3, #16
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800246e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	ffe1f7fd 	.word	0xffe1f7fd
 800247c:	ff1f0efe 	.word	0xff1f0efe

08002480 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002498:	2b01      	cmp	r3, #1
 800249a:	d101      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x20>
 800249c:	2302      	movs	r3, #2
 800249e:	e0dc      	b.n	800265a <HAL_ADC_ConfigChannel+0x1da>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b06      	cmp	r3, #6
 80024ae:	d81c      	bhi.n	80024ea <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685a      	ldr	r2, [r3, #4]
 80024ba:	4613      	mov	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	4413      	add	r3, r2
 80024c0:	3b05      	subs	r3, #5
 80024c2:	221f      	movs	r2, #31
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	4019      	ands	r1, r3
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	6818      	ldr	r0, [r3, #0]
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4413      	add	r3, r2
 80024da:	3b05      	subs	r3, #5
 80024dc:	fa00 f203 	lsl.w	r2, r0, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	635a      	str	r2, [r3, #52]	; 0x34
 80024e8:	e03c      	b.n	8002564 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d81c      	bhi.n	800252c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	4613      	mov	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4413      	add	r3, r2
 8002502:	3b23      	subs	r3, #35	; 0x23
 8002504:	221f      	movs	r2, #31
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	43db      	mvns	r3, r3
 800250c:	4019      	ands	r1, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685a      	ldr	r2, [r3, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	4413      	add	r3, r2
 800251c:	3b23      	subs	r3, #35	; 0x23
 800251e:	fa00 f203 	lsl.w	r2, r0, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	631a      	str	r2, [r3, #48]	; 0x30
 800252a:	e01b      	b.n	8002564 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	4413      	add	r3, r2
 800253c:	3b41      	subs	r3, #65	; 0x41
 800253e:	221f      	movs	r2, #31
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	4019      	ands	r1, r3
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	6818      	ldr	r0, [r3, #0]
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	4613      	mov	r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	4413      	add	r3, r2
 8002556:	3b41      	subs	r3, #65	; 0x41
 8002558:	fa00 f203 	lsl.w	r2, r0, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b09      	cmp	r3, #9
 800256a:	d91c      	bls.n	80025a6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68d9      	ldr	r1, [r3, #12]
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	4613      	mov	r3, r2
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	4413      	add	r3, r2
 800257c:	3b1e      	subs	r3, #30
 800257e:	2207      	movs	r2, #7
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	4019      	ands	r1, r3
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	6898      	ldr	r0, [r3, #8]
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	3b1e      	subs	r3, #30
 8002598:	fa00 f203 	lsl.w	r2, r0, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	e019      	b.n	80025da <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6919      	ldr	r1, [r3, #16]
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	2207      	movs	r2, #7
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	43db      	mvns	r3, r3
 80025be:	4019      	ands	r1, r3
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	6898      	ldr	r0, [r3, #8]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	fa00 f203 	lsl.w	r2, r0, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2b10      	cmp	r3, #16
 80025e0:	d003      	beq.n	80025ea <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80025e6:	2b11      	cmp	r3, #17
 80025e8:	d132      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_ADC_ConfigChannel+0x1e4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d125      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d126      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002610:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b10      	cmp	r3, #16
 8002618:	d11a      	bne.n	8002650 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800261a:	4b13      	ldr	r3, [pc, #76]	; (8002668 <HAL_ADC_ConfigChannel+0x1e8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a13      	ldr	r2, [pc, #76]	; (800266c <HAL_ADC_ConfigChannel+0x1ec>)
 8002620:	fba2 2303 	umull	r2, r3, r2, r3
 8002624:	0c9a      	lsrs	r2, r3, #18
 8002626:	4613      	mov	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4413      	add	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002630:	e002      	b.n	8002638 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	3b01      	subs	r3, #1
 8002636:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f9      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x1b2>
 800263e:	e007      	b.n	8002650 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	f043 0220 	orr.w	r2, r3, #32
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
}
 800265a:	4618      	mov	r0, r3
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	40012400 	.word	0x40012400
 8002668:	20000008 	.word	0x20000008
 800266c:	431bde83 	.word	0x431bde83

08002670 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b01      	cmp	r3, #1
 8002688:	d127      	bne.n	80026da <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800269a:	f7ff fded 	bl	8002278 <HAL_GetTick>
 800269e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026a0:	e014      	b.n	80026cc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80026a2:	f7ff fde9 	bl	8002278 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d90d      	bls.n	80026cc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b4:	f043 0210 	orr.w	r2, r3, #16
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	f043 0201 	orr.w	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e007      	b.n	80026dc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d0e3      	beq.n	80026a2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80026da:	2300      	movs	r3, #0
}
 80026dc:	4618      	mov	r0, r3
 80026de:	3710      	adds	r7, #16
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b085      	sub	sp, #20
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026f4:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002700:	4013      	ands	r3, r2
 8002702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800270c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002716:	4a04      	ldr	r2, [pc, #16]	; (8002728 <__NVIC_SetPriorityGrouping+0x44>)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	60d3      	str	r3, [r2, #12]
}
 800271c:	bf00      	nop
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002730:	4b04      	ldr	r3, [pc, #16]	; (8002744 <__NVIC_GetPriorityGrouping+0x18>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	0a1b      	lsrs	r3, r3, #8
 8002736:	f003 0307 	and.w	r3, r3, #7
}
 800273a:	4618      	mov	r0, r3
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	e000ed00 	.word	0xe000ed00

08002748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002756:	2b00      	cmp	r3, #0
 8002758:	db0b      	blt.n	8002772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	f003 021f 	and.w	r2, r3, #31
 8002760:	4906      	ldr	r1, [pc, #24]	; (800277c <__NVIC_EnableIRQ+0x34>)
 8002762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002766:	095b      	lsrs	r3, r3, #5
 8002768:	2001      	movs	r0, #1
 800276a:	fa00 f202 	lsl.w	r2, r0, r2
 800276e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bc80      	pop	{r7}
 800277a:	4770      	bx	lr
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	4603      	mov	r3, r0
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800278c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002790:	2b00      	cmp	r3, #0
 8002792:	db0a      	blt.n	80027aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	b2da      	uxtb	r2, r3
 8002798:	490c      	ldr	r1, [pc, #48]	; (80027cc <__NVIC_SetPriority+0x4c>)
 800279a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279e:	0112      	lsls	r2, r2, #4
 80027a0:	b2d2      	uxtb	r2, r2
 80027a2:	440b      	add	r3, r1
 80027a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a8:	e00a      	b.n	80027c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	b2da      	uxtb	r2, r3
 80027ae:	4908      	ldr	r1, [pc, #32]	; (80027d0 <__NVIC_SetPriority+0x50>)
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	f003 030f 	and.w	r3, r3, #15
 80027b6:	3b04      	subs	r3, #4
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	440b      	add	r3, r1
 80027be:	761a      	strb	r2, [r3, #24]
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	e000e100 	.word	0xe000e100
 80027d0:	e000ed00 	.word	0xe000ed00

080027d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b089      	sub	sp, #36	; 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	f1c3 0307 	rsb	r3, r3, #7
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	bf28      	it	cs
 80027f2:	2304      	movcs	r3, #4
 80027f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	3304      	adds	r3, #4
 80027fa:	2b06      	cmp	r3, #6
 80027fc:	d902      	bls.n	8002804 <NVIC_EncodePriority+0x30>
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	3b03      	subs	r3, #3
 8002802:	e000      	b.n	8002806 <NVIC_EncodePriority+0x32>
 8002804:	2300      	movs	r3, #0
 8002806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	f04f 32ff 	mov.w	r2, #4294967295
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43da      	mvns	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	401a      	ands	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800281c:	f04f 31ff 	mov.w	r1, #4294967295
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	43d9      	mvns	r1, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800282c:	4313      	orrs	r3, r2
         );
}
 800282e:	4618      	mov	r0, r3
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295
 800285c:	f7ff ff90 	bl	8002780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff2d 	bl	80026e4 <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff42 	bl	800272c <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff90 	bl	80027d4 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff5f 	bl	8002780 <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff35 	bl	8002748 <__NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffa2 	bl	8002838 <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002900:	b480      	push	{r7}
 8002902:	b08b      	sub	sp, #44	; 0x2c
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800290a:	2300      	movs	r3, #0
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800290e:	2300      	movs	r3, #0
 8002910:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002912:	e127      	b.n	8002b64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002914:	2201      	movs	r2, #1
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	69fa      	ldr	r2, [r7, #28]
 8002924:	4013      	ands	r3, r2
 8002926:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	429a      	cmp	r2, r3
 800292e:	f040 8116 	bne.w	8002b5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	2b12      	cmp	r3, #18
 8002938:	d034      	beq.n	80029a4 <HAL_GPIO_Init+0xa4>
 800293a:	2b12      	cmp	r3, #18
 800293c:	d80d      	bhi.n	800295a <HAL_GPIO_Init+0x5a>
 800293e:	2b02      	cmp	r3, #2
 8002940:	d02b      	beq.n	800299a <HAL_GPIO_Init+0x9a>
 8002942:	2b02      	cmp	r3, #2
 8002944:	d804      	bhi.n	8002950 <HAL_GPIO_Init+0x50>
 8002946:	2b00      	cmp	r3, #0
 8002948:	d031      	beq.n	80029ae <HAL_GPIO_Init+0xae>
 800294a:	2b01      	cmp	r3, #1
 800294c:	d01c      	beq.n	8002988 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800294e:	e048      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002950:	2b03      	cmp	r3, #3
 8002952:	d043      	beq.n	80029dc <HAL_GPIO_Init+0xdc>
 8002954:	2b11      	cmp	r3, #17
 8002956:	d01b      	beq.n	8002990 <HAL_GPIO_Init+0x90>
          break;
 8002958:	e043      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800295a:	4a89      	ldr	r2, [pc, #548]	; (8002b80 <HAL_GPIO_Init+0x280>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d026      	beq.n	80029ae <HAL_GPIO_Init+0xae>
 8002960:	4a87      	ldr	r2, [pc, #540]	; (8002b80 <HAL_GPIO_Init+0x280>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d806      	bhi.n	8002974 <HAL_GPIO_Init+0x74>
 8002966:	4a87      	ldr	r2, [pc, #540]	; (8002b84 <HAL_GPIO_Init+0x284>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d020      	beq.n	80029ae <HAL_GPIO_Init+0xae>
 800296c:	4a86      	ldr	r2, [pc, #536]	; (8002b88 <HAL_GPIO_Init+0x288>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01d      	beq.n	80029ae <HAL_GPIO_Init+0xae>
          break;
 8002972:	e036      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002974:	4a85      	ldr	r2, [pc, #532]	; (8002b8c <HAL_GPIO_Init+0x28c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d019      	beq.n	80029ae <HAL_GPIO_Init+0xae>
 800297a:	4a85      	ldr	r2, [pc, #532]	; (8002b90 <HAL_GPIO_Init+0x290>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d016      	beq.n	80029ae <HAL_GPIO_Init+0xae>
 8002980:	4a84      	ldr	r2, [pc, #528]	; (8002b94 <HAL_GPIO_Init+0x294>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d013      	beq.n	80029ae <HAL_GPIO_Init+0xae>
          break;
 8002986:	e02c      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	623b      	str	r3, [r7, #32]
          break;
 800298e:	e028      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	3304      	adds	r3, #4
 8002996:	623b      	str	r3, [r7, #32]
          break;
 8002998:	e023      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	3308      	adds	r3, #8
 80029a0:	623b      	str	r3, [r7, #32]
          break;
 80029a2:	e01e      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	330c      	adds	r3, #12
 80029aa:	623b      	str	r3, [r7, #32]
          break;
 80029ac:	e019      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d102      	bne.n	80029bc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80029b6:	2304      	movs	r3, #4
 80029b8:	623b      	str	r3, [r7, #32]
          break;
 80029ba:	e012      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d105      	bne.n	80029d0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029c4:	2308      	movs	r3, #8
 80029c6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	611a      	str	r2, [r3, #16]
          break;
 80029ce:	e008      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029d0:	2308      	movs	r3, #8
 80029d2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	615a      	str	r2, [r3, #20]
          break;
 80029da:	e002      	b.n	80029e2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029dc:	2300      	movs	r3, #0
 80029de:	623b      	str	r3, [r7, #32]
          break;
 80029e0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2bff      	cmp	r3, #255	; 0xff
 80029e6:	d801      	bhi.n	80029ec <HAL_GPIO_Init+0xec>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	e001      	b.n	80029f0 <HAL_GPIO_Init+0xf0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	3304      	adds	r3, #4
 80029f0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	2bff      	cmp	r3, #255	; 0xff
 80029f6:	d802      	bhi.n	80029fe <HAL_GPIO_Init+0xfe>
 80029f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	e002      	b.n	8002a04 <HAL_GPIO_Init+0x104>
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	3b08      	subs	r3, #8
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	210f      	movs	r1, #15
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	401a      	ands	r2, r3
 8002a16:	6a39      	ldr	r1, [r7, #32]
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8096 	beq.w	8002b5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a32:	4b59      	ldr	r3, [pc, #356]	; (8002b98 <HAL_GPIO_Init+0x298>)
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_GPIO_Init+0x298>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6193      	str	r3, [r2, #24]
 8002a3e:	4b56      	ldr	r3, [pc, #344]	; (8002b98 <HAL_GPIO_Init+0x298>)
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a4a:	4a54      	ldr	r2, [pc, #336]	; (8002b9c <HAL_GPIO_Init+0x29c>)
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	220f      	movs	r2, #15
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4b      	ldr	r2, [pc, #300]	; (8002ba0 <HAL_GPIO_Init+0x2a0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <HAL_GPIO_Init+0x19e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4a      	ldr	r2, [pc, #296]	; (8002ba4 <HAL_GPIO_Init+0x2a4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d00d      	beq.n	8002a9a <HAL_GPIO_Init+0x19a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a49      	ldr	r2, [pc, #292]	; (8002ba8 <HAL_GPIO_Init+0x2a8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d007      	beq.n	8002a96 <HAL_GPIO_Init+0x196>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a48      	ldr	r2, [pc, #288]	; (8002bac <HAL_GPIO_Init+0x2ac>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d101      	bne.n	8002a92 <HAL_GPIO_Init+0x192>
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x1a0>
 8002a92:	2304      	movs	r3, #4
 8002a94:	e004      	b.n	8002aa0 <HAL_GPIO_Init+0x1a0>
 8002a96:	2302      	movs	r3, #2
 8002a98:	e002      	b.n	8002aa0 <HAL_GPIO_Init+0x1a0>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e000      	b.n	8002aa0 <HAL_GPIO_Init+0x1a0>
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aa2:	f002 0203 	and.w	r2, r2, #3
 8002aa6:	0092      	lsls	r2, r2, #2
 8002aa8:	4093      	lsls	r3, r2
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002ab0:	493a      	ldr	r1, [pc, #232]	; (8002b9c <HAL_GPIO_Init+0x29c>)
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	089b      	lsrs	r3, r3, #2
 8002ab6:	3302      	adds	r3, #2
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d006      	beq.n	8002ad8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002aca:	4b39      	ldr	r3, [pc, #228]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4938      	ldr	r1, [pc, #224]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	600b      	str	r3, [r1, #0]
 8002ad6:	e006      	b.n	8002ae6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002ad8:	4b35      	ldr	r3, [pc, #212]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	4933      	ldr	r1, [pc, #204]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002af2:	4b2f      	ldr	r3, [pc, #188]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	492e      	ldr	r1, [pc, #184]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	604b      	str	r3, [r1, #4]
 8002afe:	e006      	b.n	8002b0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b00:	4b2b      	ldr	r3, [pc, #172]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	4929      	ldr	r1, [pc, #164]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d006      	beq.n	8002b28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002b1a:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	4924      	ldr	r1, [pc, #144]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	608b      	str	r3, [r1, #8]
 8002b26:	e006      	b.n	8002b36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002b28:	4b21      	ldr	r3, [pc, #132]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	491f      	ldr	r1, [pc, #124]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d006      	beq.n	8002b50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002b42:	4b1b      	ldr	r3, [pc, #108]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	491a      	ldr	r1, [pc, #104]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60cb      	str	r3, [r1, #12]
 8002b4e:	e006      	b.n	8002b5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002b50:	4b17      	ldr	r3, [pc, #92]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002b52:	68da      	ldr	r2, [r3, #12]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	43db      	mvns	r3, r3
 8002b58:	4915      	ldr	r1, [pc, #84]	; (8002bb0 <HAL_GPIO_Init+0x2b0>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b60:	3301      	adds	r3, #1
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f47f aed0 	bne.w	8002914 <HAL_GPIO_Init+0x14>
  }
}
 8002b74:	bf00      	nop
 8002b76:	372c      	adds	r7, #44	; 0x2c
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bc80      	pop	{r7}
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	10210000 	.word	0x10210000
 8002b84:	10110000 	.word	0x10110000
 8002b88:	10120000 	.word	0x10120000
 8002b8c:	10310000 	.word	0x10310000
 8002b90:	10320000 	.word	0x10320000
 8002b94:	10220000 	.word	0x10220000
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40010800 	.word	0x40010800
 8002ba4:	40010c00 	.word	0x40010c00
 8002ba8:	40011000 	.word	0x40011000
 8002bac:	40011400 	.word	0x40011400
 8002bb0:	40010400 	.word	0x40010400

08002bb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	887b      	ldrh	r3, [r7, #2]
 8002bc6:	4013      	ands	r3, r2
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	73fb      	strb	r3, [r7, #15]
 8002bd0:	e001      	b.n	8002bd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3714      	adds	r7, #20
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bc80      	pop	{r7}
 8002be0:	4770      	bx	lr

08002be2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	460b      	mov	r3, r1
 8002bec:	807b      	strh	r3, [r7, #2]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bf2:	787b      	ldrb	r3, [r7, #1]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bf8:	887a      	ldrh	r2, [r7, #2]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bfe:	e003      	b.n	8002c08 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002c00:	887b      	ldrh	r3, [r7, #2]
 8002c02:	041a      	lsls	r2, r3, #16
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	611a      	str	r2, [r3, #16]
}
 8002c08:	bf00      	nop
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bc80      	pop	{r7}
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002c1e:	4b08      	ldr	r3, [pc, #32]	; (8002c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	88fb      	ldrh	r3, [r7, #6]
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d006      	beq.n	8002c38 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c2a:	4a05      	ldr	r2, [pc, #20]	; (8002c40 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c2c:	88fb      	ldrh	r3, [r7, #6]
 8002c2e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c30:	88fb      	ldrh	r3, [r7, #6]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7fe fb06 	bl	8001244 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c38:	bf00      	nop
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40010400 	.word	0x40010400

08002c44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e10f      	b.n	8002e76 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d106      	bne.n	8002c70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff f932 	bl	8001ed4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2224      	movs	r2, #36	; 0x24
 8002c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0201 	bic.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c88:	f001 ff36 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8002c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	4a7b      	ldr	r2, [pc, #492]	; (8002e80 <HAL_I2C_Init+0x23c>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d807      	bhi.n	8002ca8 <HAL_I2C_Init+0x64>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a7a      	ldr	r2, [pc, #488]	; (8002e84 <HAL_I2C_Init+0x240>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	bf94      	ite	ls
 8002ca0:	2301      	movls	r3, #1
 8002ca2:	2300      	movhi	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	e006      	b.n	8002cb6 <HAL_I2C_Init+0x72>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4a77      	ldr	r2, [pc, #476]	; (8002e88 <HAL_I2C_Init+0x244>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	bf94      	ite	ls
 8002cb0:	2301      	movls	r3, #1
 8002cb2:	2300      	movhi	r3, #0
 8002cb4:	b2db      	uxtb	r3, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0db      	b.n	8002e76 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4a72      	ldr	r2, [pc, #456]	; (8002e8c <HAL_I2C_Init+0x248>)
 8002cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc6:	0c9b      	lsrs	r3, r3, #18
 8002cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	430a      	orrs	r2, r1
 8002cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4a64      	ldr	r2, [pc, #400]	; (8002e80 <HAL_I2C_Init+0x23c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d802      	bhi.n	8002cf8 <HAL_I2C_Init+0xb4>
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	e009      	b.n	8002d0c <HAL_I2C_Init+0xc8>
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cfe:	fb02 f303 	mul.w	r3, r2, r3
 8002d02:	4a63      	ldr	r2, [pc, #396]	; (8002e90 <HAL_I2C_Init+0x24c>)
 8002d04:	fba2 2303 	umull	r2, r3, r2, r3
 8002d08:	099b      	lsrs	r3, r3, #6
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	687a      	ldr	r2, [r7, #4]
 8002d0e:	6812      	ldr	r2, [r2, #0]
 8002d10:	430b      	orrs	r3, r1
 8002d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	4956      	ldr	r1, [pc, #344]	; (8002e80 <HAL_I2C_Init+0x23c>)
 8002d28:	428b      	cmp	r3, r1
 8002d2a:	d80d      	bhi.n	8002d48 <HAL_I2C_Init+0x104>
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	1e59      	subs	r1, r3, #1
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	bf38      	it	cc
 8002d44:	2304      	movcc	r3, #4
 8002d46:	e04f      	b.n	8002de8 <HAL_I2C_Init+0x1a4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d111      	bne.n	8002d74 <HAL_I2C_Init+0x130>
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	1e58      	subs	r0, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6859      	ldr	r1, [r3, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	440b      	add	r3, r1
 8002d5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d62:	3301      	adds	r3, #1
 8002d64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf0c      	ite	eq
 8002d6c:	2301      	moveq	r3, #1
 8002d6e:	2300      	movne	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e012      	b.n	8002d9a <HAL_I2C_Init+0x156>
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	1e58      	subs	r0, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6859      	ldr	r1, [r3, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	0099      	lsls	r1, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <HAL_I2C_Init+0x15e>
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e022      	b.n	8002de8 <HAL_I2C_Init+0x1a4>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10e      	bne.n	8002dc8 <HAL_I2C_Init+0x184>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	1e58      	subs	r0, r3, #1
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6859      	ldr	r1, [r3, #4]
 8002db2:	460b      	mov	r3, r1
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	440b      	add	r3, r1
 8002db8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Init+0x1a4>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	1e58      	subs	r0, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6859      	ldr	r1, [r3, #4]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	0099      	lsls	r1, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dde:	3301      	adds	r3, #1
 8002de0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	6809      	ldr	r1, [r1, #0]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	69da      	ldr	r2, [r3, #28]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a1b      	ldr	r3, [r3, #32]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6911      	ldr	r1, [r2, #16]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68d2      	ldr	r2, [r2, #12]
 8002e22:	4311      	orrs	r1, r2
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6812      	ldr	r2, [r2, #0]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	695a      	ldr	r2, [r3, #20]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2220      	movs	r2, #32
 8002e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	000186a0 	.word	0x000186a0
 8002e84:	001e847f 	.word	0x001e847f
 8002e88:	003d08ff 	.word	0x003d08ff
 8002e8c:	431bde83 	.word	0x431bde83
 8002e90:	10624dd3 	.word	0x10624dd3

08002e94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b088      	sub	sp, #32
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	460b      	mov	r3, r1
 8002ea2:	817b      	strh	r3, [r7, #10]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002ea8:	f7ff f9e6 	bl	8002278 <HAL_GetTick>
 8002eac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	2b20      	cmp	r3, #32
 8002eb8:	f040 80e0 	bne.w	800307c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	9300      	str	r3, [sp, #0]
 8002ec0:	2319      	movs	r3, #25
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4970      	ldr	r1, [pc, #448]	; (8003088 <HAL_I2C_Master_Transmit+0x1f4>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f001 f864 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e0d3      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d101      	bne.n	8002ee4 <HAL_I2C_Master_Transmit+0x50>
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	e0cc      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d007      	beq.n	8002f0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f042 0201 	orr.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2221      	movs	r2, #33	; 0x21
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2210      	movs	r2, #16
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	893a      	ldrh	r2, [r7, #8]
 8002f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	4a50      	ldr	r2, [pc, #320]	; (800308c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f4a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f4c:	8979      	ldrh	r1, [r7, #10]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	6a3a      	ldr	r2, [r7, #32]
 8002f52:	68f8      	ldr	r0, [r7, #12]
 8002f54:	f000 fe22 	bl	8003b9c <I2C_MasterRequestWrite>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d001      	beq.n	8002f62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e08d      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f62:	2300      	movs	r3, #0
 8002f64:	613b      	str	r3, [r7, #16]
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	613b      	str	r3, [r7, #16]
 8002f76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f78:	e066      	b.n	8003048 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	6a39      	ldr	r1, [r7, #32]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f001 f8de 	bl	8004140 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d107      	bne.n	8002fa2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fa0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e06b      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002faa:	781a      	ldrb	r2, [r3, #0]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	3b01      	subs	r3, #1
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fce:	3b01      	subs	r3, #1
 8002fd0:	b29a      	uxth	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	695b      	ldr	r3, [r3, #20]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d11b      	bne.n	800301c <HAL_I2C_Master_Transmit+0x188>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d017      	beq.n	800301c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	1c5a      	adds	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29b      	uxth	r3, r3
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003014:	3b01      	subs	r3, #1
 8003016:	b29a      	uxth	r2, r3
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800301c:	697a      	ldr	r2, [r7, #20]
 800301e:	6a39      	ldr	r1, [r7, #32]
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f001 f8ce 	bl	80041c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00d      	beq.n	8003048 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	2b04      	cmp	r3, #4
 8003032:	d107      	bne.n	8003044 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003042:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e01a      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800304c:	2b00      	cmp	r3, #0
 800304e:	d194      	bne.n	8002f7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2220      	movs	r2, #32
 8003064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	e000      	b.n	800307e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800307c:	2302      	movs	r3, #2
  }
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	00100002 	.word	0x00100002
 800308c:	ffff0000 	.word	0xffff0000

08003090 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af02      	add	r7, sp, #8
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607a      	str	r2, [r7, #4]
 800309a:	461a      	mov	r2, r3
 800309c:	460b      	mov	r3, r1
 800309e:	817b      	strh	r3, [r7, #10]
 80030a0:	4613      	mov	r3, r2
 80030a2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030a4:	f7ff f8e8 	bl	8002278 <HAL_GetTick>
 80030a8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b20      	cmp	r3, #32
 80030b4:	f040 8213 	bne.w	80034de <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2319      	movs	r3, #25
 80030be:	2201      	movs	r2, #1
 80030c0:	497e      	ldr	r1, [pc, #504]	; (80032bc <HAL_I2C_Master_Receive+0x22c>)
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 ff66 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80030ce:	2302      	movs	r3, #2
 80030d0:	e206      	b.n	80034e0 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d101      	bne.n	80030e0 <HAL_I2C_Master_Receive+0x50>
 80030dc:	2302      	movs	r3, #2
 80030de:	e1ff      	b.n	80034e0 <HAL_I2C_Master_Receive+0x450>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2201      	movs	r2, #1
 80030e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d007      	beq.n	8003106 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0201 	orr.w	r2, r2, #1
 8003104:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003114:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2222      	movs	r2, #34	; 0x22
 800311a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2210      	movs	r2, #16
 8003122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	893a      	ldrh	r2, [r7, #8]
 8003136:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a5e      	ldr	r2, [pc, #376]	; (80032c0 <HAL_I2C_Master_Receive+0x230>)
 8003146:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003148:	8979      	ldrh	r1, [r7, #10]
 800314a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fd9a 	bl	8003c88 <I2C_MasterRequestRead>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e1c0      	b.n	80034e0 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003162:	2b00      	cmp	r3, #0
 8003164:	d113      	bne.n	800318e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003166:	2300      	movs	r3, #0
 8003168:	623b      	str	r3, [r7, #32]
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	623b      	str	r3, [r7, #32]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	623b      	str	r3, [r7, #32]
 800317a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	e194      	b.n	80034b8 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003192:	2b01      	cmp	r3, #1
 8003194:	d11d      	bne.n	80031d2 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031a4:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80031a6:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	61fb      	str	r3, [r7, #28]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	61fb      	str	r3, [r7, #28]
 80031bc:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80031ce:	b662      	cpsie	i
 80031d0:	e172      	b.n	80034b8 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d11d      	bne.n	8003216 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80031ea:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	61bb      	str	r3, [r7, #24]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003210:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003212:	b662      	cpsie	i
 8003214:	e150      	b.n	80034b8 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003224:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003226:	2300      	movs	r3, #0
 8003228:	617b      	str	r3, [r7, #20]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	695b      	ldr	r3, [r3, #20]
 8003230:	617b      	str	r3, [r7, #20]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	617b      	str	r3, [r7, #20]
 800323a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800323c:	e13c      	b.n	80034b8 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	2b03      	cmp	r3, #3
 8003244:	f200 80f5 	bhi.w	8003432 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	2b01      	cmp	r3, #1
 800324e:	d123      	bne.n	8003298 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003250:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003252:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fff5 	bl	8004244 <I2C_WaitOnRXNEFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e13d      	b.n	80034e0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	691a      	ldr	r2, [r3, #16]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800328c:	b29b      	uxth	r3, r3
 800328e:	3b01      	subs	r3, #1
 8003290:	b29a      	uxth	r2, r3
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003296:	e10f      	b.n	80034b8 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	2b02      	cmp	r3, #2
 800329e:	d150      	bne.n	8003342 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a6:	2200      	movs	r2, #0
 80032a8:	4906      	ldr	r1, [pc, #24]	; (80032c4 <HAL_I2C_Master_Receive+0x234>)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fe72 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d008      	beq.n	80032c8 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e112      	b.n	80034e0 <HAL_I2C_Master_Receive+0x450>
 80032ba:	bf00      	nop
 80032bc:	00100002 	.word	0x00100002
 80032c0:	ffff0000 	.word	0xffff0000
 80032c4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80032c8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e4:	b2d2      	uxtb	r2, r2
 80032e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003302:	b29b      	uxth	r3, r3
 8003304:	3b01      	subs	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800330c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	691a      	ldr	r2, [r3, #16]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003318:	b2d2      	uxtb	r2, r2
 800331a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	1c5a      	adds	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003336:	b29b      	uxth	r3, r3
 8003338:	3b01      	subs	r3, #1
 800333a:	b29a      	uxth	r2, r3
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003340:	e0ba      	b.n	80034b8 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003348:	2200      	movs	r2, #0
 800334a:	4967      	ldr	r1, [pc, #412]	; (80034e8 <HAL_I2C_Master_Receive+0x458>)
 800334c:	68f8      	ldr	r0, [r7, #12]
 800334e:	f000 fe21 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0c1      	b.n	80034e0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800336a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800336c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800338a:	3b01      	subs	r3, #1
 800338c:	b29a      	uxth	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	2200      	movs	r2, #0
 80033a8:	494f      	ldr	r1, [pc, #316]	; (80034e8 <HAL_I2C_Master_Receive+0x458>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fdf2 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e092      	b.n	80034e0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	691a      	ldr	r2, [r3, #16]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	b2d2      	uxtb	r2, r2
 80033d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80033fc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	b2d2      	uxtb	r2, r2
 800340a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003426:	b29b      	uxth	r3, r3
 8003428:	3b01      	subs	r3, #1
 800342a:	b29a      	uxth	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003430:	e042      	b.n	80034b8 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003432:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003434:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f000 ff04 	bl	8004244 <I2C_WaitOnRXNEFlagUntilTimeout>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e04c      	b.n	80034e0 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691a      	ldr	r2, [r3, #16]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f003 0304 	and.w	r3, r3, #4
 8003482:	2b04      	cmp	r3, #4
 8003484:	d118      	bne.n	80034b8 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	b2d2      	uxtb	r2, r2
 8003492:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f47f aebe 	bne.w	800323e <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034da:	2300      	movs	r3, #0
 80034dc:	e000      	b.n	80034e0 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80034de:	2302      	movs	r3, #2
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3728      	adds	r7, #40	; 0x28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	00010004 	.word	0x00010004

080034ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08c      	sub	sp, #48	; 0x30
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	817b      	strh	r3, [r7, #10]
 80034fe:	460b      	mov	r3, r1
 8003500:	813b      	strh	r3, [r7, #8]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003506:	f7fe feb7 	bl	8002278 <HAL_GetTick>
 800350a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b20      	cmp	r3, #32
 8003516:	f040 8218 	bne.w	800394a <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2319      	movs	r3, #25
 8003520:	2201      	movs	r2, #1
 8003522:	4981      	ldr	r1, [pc, #516]	; (8003728 <HAL_I2C_Mem_Read+0x23c>)
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fd35 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003530:	2302      	movs	r3, #2
 8003532:	e20b      	b.n	800394c <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_I2C_Mem_Read+0x56>
 800353e:	2302      	movs	r3, #2
 8003540:	e204      	b.n	800394c <HAL_I2C_Mem_Read+0x460>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d007      	beq.n	8003568 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003576:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2222      	movs	r2, #34	; 0x22
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2240      	movs	r2, #64	; 0x40
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003592:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003598:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a61      	ldr	r2, [pc, #388]	; (800372c <HAL_I2C_Mem_Read+0x240>)
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035aa:	88f8      	ldrh	r0, [r7, #6]
 80035ac:	893a      	ldrh	r2, [r7, #8]
 80035ae:	8979      	ldrh	r1, [r7, #10]
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	4603      	mov	r3, r0
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fc1a 	bl	8003df4 <I2C_RequestMemoryRead>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e1c0      	b.n	800394c <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d113      	bne.n	80035fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	623b      	str	r3, [r7, #32]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	623b      	str	r3, [r7, #32]
 80035e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e194      	b.n	8003924 <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d11d      	bne.n	800363e <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003610:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003612:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003614:	2300      	movs	r3, #0
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	61fb      	str	r3, [r7, #28]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	699b      	ldr	r3, [r3, #24]
 8003626:	61fb      	str	r3, [r7, #28]
 8003628:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003638:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800363a:	b662      	cpsie	i
 800363c:	e172      	b.n	8003924 <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	2b02      	cmp	r3, #2
 8003644:	d11d      	bne.n	8003682 <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003654:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003656:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003658:	2300      	movs	r3, #0
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	61bb      	str	r3, [r7, #24]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800367c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800367e:	b662      	cpsie	i
 8003680:	e150      	b.n	8003924 <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003690:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	617b      	str	r3, [r7, #20]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	699b      	ldr	r3, [r3, #24]
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80036a8:	e13c      	b.n	8003924 <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	2b03      	cmp	r3, #3
 80036b0:	f200 80f5 	bhi.w	800389e <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d123      	bne.n	8003704 <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80036c0:	68f8      	ldr	r0, [r7, #12]
 80036c2:	f000 fdbf 	bl	8004244 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e13d      	b.n	800394c <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	691a      	ldr	r2, [r3, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	b2d2      	uxtb	r2, r2
 80036dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ec:	3b01      	subs	r3, #1
 80036ee:	b29a      	uxth	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003702:	e10f      	b.n	8003924 <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003708:	2b02      	cmp	r3, #2
 800370a:	d150      	bne.n	80037ae <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003712:	2200      	movs	r2, #0
 8003714:	4906      	ldr	r1, [pc, #24]	; (8003730 <HAL_I2C_Mem_Read+0x244>)
 8003716:	68f8      	ldr	r0, [r7, #12]
 8003718:	f000 fc3c 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 800371c:	4603      	mov	r3, r0
 800371e:	2b00      	cmp	r3, #0
 8003720:	d008      	beq.n	8003734 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e112      	b.n	800394c <HAL_I2C_Mem_Read+0x460>
 8003726:	bf00      	nop
 8003728:	00100002 	.word	0x00100002
 800372c:	ffff0000 	.word	0xffff0000
 8003730:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003734:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003744:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	691a      	ldr	r2, [r3, #16]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003778:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	b2d2      	uxtb	r2, r2
 8003786:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	1c5a      	adds	r2, r3, #1
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003796:	3b01      	subs	r3, #1
 8003798:	b29a      	uxth	r2, r3
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ac:	e0ba      	b.n	8003924 <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b4:	2200      	movs	r2, #0
 80037b6:	4967      	ldr	r1, [pc, #412]	; (8003954 <HAL_I2C_Mem_Read+0x468>)
 80037b8:	68f8      	ldr	r0, [r7, #12]
 80037ba:	f000 fbeb 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0c1      	b.n	800394c <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037d6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037d8:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f6:	3b01      	subs	r3, #1
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003802:	b29b      	uxth	r3, r3
 8003804:	3b01      	subs	r3, #1
 8003806:	b29a      	uxth	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003812:	2200      	movs	r2, #0
 8003814:	494f      	ldr	r1, [pc, #316]	; (8003954 <HAL_I2C_Mem_Read+0x468>)
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 fbbc 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e092      	b.n	800394c <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003834:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	b2d2      	uxtb	r2, r2
 8003842:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	1c5a      	adds	r2, r3, #1
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385e:	b29b      	uxth	r3, r3
 8003860:	3b01      	subs	r3, #1
 8003862:	b29a      	uxth	r2, r3
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003868:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	b2d2      	uxtb	r2, r2
 8003876:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003886:	3b01      	subs	r3, #1
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003892:	b29b      	uxth	r3, r3
 8003894:	3b01      	subs	r3, #1
 8003896:	b29a      	uxth	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800389c:	e042      	b.n	8003924 <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fcce 	bl	8004244 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e04c      	b.n	800394c <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c4:	1c5a      	adds	r2, r3, #1
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f003 0304 	and.w	r3, r3, #4
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d118      	bne.n	8003924 <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fc:	b2d2      	uxtb	r2, r2
 80038fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	1c5a      	adds	r2, r3, #1
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003928:	2b00      	cmp	r3, #0
 800392a:	f47f aebe 	bne.w	80036aa <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2220      	movs	r2, #32
 8003932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003946:	2300      	movs	r3, #0
 8003948:	e000      	b.n	800394c <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 800394a:	2302      	movs	r3, #2
  }
}
 800394c:	4618      	mov	r0, r3
 800394e:	3728      	adds	r7, #40	; 0x28
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	00010004 	.word	0x00010004

08003958 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08a      	sub	sp, #40	; 0x28
 800395c:	af02      	add	r7, sp, #8
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	607a      	str	r2, [r7, #4]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	460b      	mov	r3, r1
 8003966:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003968:	f7fe fc86 	bl	8002278 <HAL_GetTick>
 800396c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800396e:	2301      	movs	r3, #1
 8003970:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003978:	b2db      	uxtb	r3, r3
 800397a:	2b20      	cmp	r3, #32
 800397c:	f040 8105 	bne.w	8003b8a <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	9300      	str	r3, [sp, #0]
 8003984:	2319      	movs	r3, #25
 8003986:	2201      	movs	r2, #1
 8003988:	4982      	ldr	r1, [pc, #520]	; (8003b94 <HAL_I2C_IsDeviceReady+0x23c>)
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f000 fb02 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8003990:	4603      	mov	r3, r0
 8003992:	2b00      	cmp	r3, #0
 8003994:	d001      	beq.n	800399a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003996:	2302      	movs	r3, #2
 8003998:	e0f8      	b.n	8003b8c <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d101      	bne.n	80039a8 <HAL_I2C_IsDeviceReady+0x50>
 80039a4:	2302      	movs	r3, #2
 80039a6:	e0f1      	b.n	8003b8c <HAL_I2C_IsDeviceReady+0x234>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d007      	beq.n	80039ce <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f042 0201 	orr.w	r2, r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2224      	movs	r2, #36	; 0x24
 80039e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	4a6a      	ldr	r2, [pc, #424]	; (8003b98 <HAL_I2C_IsDeviceReady+0x240>)
 80039f0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a00:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003a0e:	68f8      	ldr	r0, [r7, #12]
 8003a10:	f000 fac0 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e0b6      	b.n	8003b8c <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003a1e:	897b      	ldrh	r3, [r7, #10]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	461a      	mov	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003a2c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003a2e:	f7fe fc23 	bl	8002278 <HAL_GetTick>
 8003a32:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	695b      	ldr	r3, [r3, #20]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	bf0c      	ite	eq
 8003a42:	2301      	moveq	r3, #1
 8003a44:	2300      	movne	r3, #0
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a58:	bf0c      	ite	eq
 8003a5a:	2301      	moveq	r3, #1
 8003a5c:	2300      	movne	r3, #0
 8003a5e:	b2db      	uxtb	r3, r3
 8003a60:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003a62:	e025      	b.n	8003ab0 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a64:	f7fe fc08 	bl	8002278 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	69fb      	ldr	r3, [r7, #28]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d302      	bcc.n	8003a7a <HAL_I2C_IsDeviceReady+0x122>
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d103      	bne.n	8003a82 <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	22a0      	movs	r2, #160	; 0xa0
 8003a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	bf0c      	ite	eq
 8003a90:	2301      	moveq	r3, #1
 8003a92:	2300      	movne	r3, #0
 8003a94:	b2db      	uxtb	r3, r3
 8003a96:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003aa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa6:	bf0c      	ite	eq
 8003aa8:	2301      	moveq	r3, #1
 8003aaa:	2300      	movne	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2ba0      	cmp	r3, #160	; 0xa0
 8003aba:	d005      	beq.n	8003ac8 <HAL_I2C_IsDeviceReady+0x170>
 8003abc:	7dfb      	ldrb	r3, [r7, #23]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d102      	bne.n	8003ac8 <HAL_I2C_IsDeviceReady+0x170>
 8003ac2:	7dbb      	ldrb	r3, [r7, #22]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0cd      	beq.n	8003a64 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2220      	movs	r2, #32
 8003acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b02      	cmp	r3, #2
 8003adc:	d129      	bne.n	8003b32 <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003aec:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aee:	2300      	movs	r3, #0
 8003af0:	613b      	str	r3, [r7, #16]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	613b      	str	r3, [r7, #16]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	613b      	str	r3, [r7, #16]
 8003b02:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	2319      	movs	r3, #25
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	4921      	ldr	r1, [pc, #132]	; (8003b94 <HAL_I2C_IsDeviceReady+0x23c>)
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f000 fa40 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e036      	b.n	8003b8c <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2200      	movs	r2, #0
 8003b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	e02c      	b.n	8003b8c <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b40:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b4a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	9300      	str	r3, [sp, #0]
 8003b50:	2319      	movs	r3, #25
 8003b52:	2201      	movs	r2, #1
 8003b54:	490f      	ldr	r1, [pc, #60]	; (8003b94 <HAL_I2C_IsDeviceReady+0x23c>)
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f000 fa1c 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e012      	b.n	8003b8c <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	429a      	cmp	r2, r3
 8003b72:	f4ff af3e 	bcc.w	80039f2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e000      	b.n	8003b8c <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
  }
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3720      	adds	r7, #32
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	00100002 	.word	0x00100002
 8003b98:	ffff0000 	.word	0xffff0000

08003b9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	607a      	str	r2, [r7, #4]
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	2b08      	cmp	r3, #8
 8003bb6:	d006      	beq.n	8003bc6 <I2C_MasterRequestWrite+0x2a>
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d003      	beq.n	8003bc6 <I2C_MasterRequestWrite+0x2a>
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bc4:	d108      	bne.n	8003bd8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	e00b      	b.n	8003bf0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	2b12      	cmp	r3, #18
 8003bde:	d107      	bne.n	8003bf0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681a      	ldr	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bfc:	68f8      	ldr	r0, [r7, #12]
 8003bfe:	f000 f9c9 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e035      	b.n	8003c78 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c14:	d108      	bne.n	8003c28 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c16:	897b      	ldrh	r3, [r7, #10]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c24:	611a      	str	r2, [r3, #16]
 8003c26:	e01b      	b.n	8003c60 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c28:	897b      	ldrh	r3, [r7, #10]
 8003c2a:	11db      	asrs	r3, r3, #7
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	f003 0306 	and.w	r3, r3, #6
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f063 030f 	orn	r3, r3, #15
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	490e      	ldr	r1, [pc, #56]	; (8003c80 <I2C_MasterRequestWrite+0xe4>)
 8003c46:	68f8      	ldr	r0, [r7, #12]
 8003c48:	f000 f9fb 	bl	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e010      	b.n	8003c78 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c56:	897b      	ldrh	r3, [r7, #10]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	4907      	ldr	r1, [pc, #28]	; (8003c84 <I2C_MasterRequestWrite+0xe8>)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 f9eb 	bl	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d001      	beq.n	8003c76 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e000      	b.n	8003c78 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	00010008 	.word	0x00010008
 8003c84:	00010002 	.word	0x00010002

08003c88 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b088      	sub	sp, #32
 8003c8c:	af02      	add	r7, sp, #8
 8003c8e:	60f8      	str	r0, [r7, #12]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]
 8003c94:	460b      	mov	r3, r1
 8003c96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cac:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	d006      	beq.n	8003cc2 <I2C_MasterRequestRead+0x3a>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d003      	beq.n	8003cc2 <I2C_MasterRequestRead+0x3a>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003cc0:	d108      	bne.n	8003cd4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e00b      	b.n	8003cec <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd8:	2b11      	cmp	r3, #17
 8003cda:	d107      	bne.n	8003cec <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 f94b 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e06d      	b.n	8003de4 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d10:	d108      	bne.n	8003d24 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003d12:	897b      	ldrh	r3, [r7, #10]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f043 0301 	orr.w	r3, r3, #1
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	611a      	str	r2, [r3, #16]
 8003d22:	e053      	b.n	8003dcc <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003d24:	897b      	ldrh	r3, [r7, #10]
 8003d26:	11db      	asrs	r3, r3, #7
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	f003 0306 	and.w	r3, r3, #6
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f063 030f 	orn	r3, r3, #15
 8003d34:	b2da      	uxtb	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	492a      	ldr	r1, [pc, #168]	; (8003dec <I2C_MasterRequestRead+0x164>)
 8003d42:	68f8      	ldr	r0, [r7, #12]
 8003d44:	f000 f97d 	bl	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e048      	b.n	8003de4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003d52:	897b      	ldrh	r3, [r7, #10]
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	4923      	ldr	r1, [pc, #140]	; (8003df0 <I2C_MasterRequestRead+0x168>)
 8003d62:	68f8      	ldr	r0, [r7, #12]
 8003d64:	f000 f96d 	bl	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e038      	b.n	8003de4 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d72:	2300      	movs	r3, #0
 8003d74:	613b      	str	r3, [r7, #16]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	613b      	str	r3, [r7, #16]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d96:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f8f5 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e017      	b.n	8003de4 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003db4:	897b      	ldrh	r3, [r7, #10]
 8003db6:	11db      	asrs	r3, r3, #7
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0306 	and.w	r3, r3, #6
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	f063 030e 	orn	r3, r3, #14
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	4907      	ldr	r1, [pc, #28]	; (8003df0 <I2C_MasterRequestRead+0x168>)
 8003dd2:	68f8      	ldr	r0, [r7, #12]
 8003dd4:	f000 f935 	bl	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3718      	adds	r7, #24
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	00010008 	.word	0x00010008
 8003df0:	00010002 	.word	0x00010002

08003df4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af02      	add	r7, sp, #8
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	461a      	mov	r2, r3
 8003e02:	4603      	mov	r3, r0
 8003e04:	817b      	strh	r3, [r7, #10]
 8003e06:	460b      	mov	r3, r1
 8003e08:	813b      	strh	r3, [r7, #8]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e1c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	2200      	movs	r2, #0
 8003e36:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f8aa 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d001      	beq.n	8003e4a <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e09e      	b.n	8003f88 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e4a:	897b      	ldrh	r3, [r7, #10]
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	6a3a      	ldr	r2, [r7, #32]
 8003e5e:	494c      	ldr	r1, [pc, #304]	; (8003f90 <I2C_RequestMemoryRead+0x19c>)
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 f8ee 	bl	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e08b      	b.n	8003f88 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e70:	2300      	movs	r3, #0
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	617b      	str	r3, [r7, #20]
 8003e84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e88:	6a39      	ldr	r1, [r7, #32]
 8003e8a:	68f8      	ldr	r0, [r7, #12]
 8003e8c:	f000 f958 	bl	8004140 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e90:	4603      	mov	r3, r0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d107      	bne.n	8003eae <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e06a      	b.n	8003f88 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eb2:	88fb      	ldrh	r3, [r7, #6]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d105      	bne.n	8003ec4 <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb8:	893b      	ldrh	r3, [r7, #8]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	611a      	str	r2, [r3, #16]
 8003ec2:	e021      	b.n	8003f08 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ec4:	893b      	ldrh	r3, [r7, #8]
 8003ec6:	0a1b      	lsrs	r3, r3, #8
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed4:	6a39      	ldr	r1, [r7, #32]
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 f932 	bl	8004140 <I2C_WaitOnTXEFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00d      	beq.n	8003efe <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	d107      	bne.n	8003efa <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e044      	b.n	8003f88 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003efe:	893b      	ldrh	r3, [r7, #8]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f0a:	6a39      	ldr	r1, [r7, #32]
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f917 	bl	8004140 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d00d      	beq.n	8003f34 <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	2b04      	cmp	r3, #4
 8003f1e:	d107      	bne.n	8003f30 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e029      	b.n	8003f88 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f42:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f50:	68f8      	ldr	r0, [r7, #12]
 8003f52:	f000 f81f 	bl	8003f94 <I2C_WaitOnFlagUntilTimeout>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e013      	b.n	8003f88 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003f60:	897b      	ldrh	r3, [r7, #10]
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	f043 0301 	orr.w	r3, r3, #1
 8003f68:	b2da      	uxtb	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f72:	6a3a      	ldr	r2, [r7, #32]
 8003f74:	4906      	ldr	r1, [pc, #24]	; (8003f90 <I2C_RequestMemoryRead+0x19c>)
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f000 f863 	bl	8004042 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d001      	beq.n	8003f86 <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	00010002 	.word	0x00010002

08003f94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	603b      	str	r3, [r7, #0]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fa4:	e025      	b.n	8003ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fac:	d021      	beq.n	8003ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fae:	f7fe f963 	bl	8002278 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d302      	bcc.n	8003fc4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d116      	bne.n	8003ff2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	f043 0220 	orr.w	r2, r3, #32
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e023      	b.n	800403a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	0c1b      	lsrs	r3, r3, #16
 8003ff6:	b2db      	uxtb	r3, r3
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d10d      	bne.n	8004018 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	695b      	ldr	r3, [r3, #20]
 8004002:	43da      	mvns	r2, r3
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	4013      	ands	r3, r2
 8004008:	b29b      	uxth	r3, r3
 800400a:	2b00      	cmp	r3, #0
 800400c:	bf0c      	ite	eq
 800400e:	2301      	moveq	r3, #1
 8004010:	2300      	movne	r3, #0
 8004012:	b2db      	uxtb	r3, r3
 8004014:	461a      	mov	r2, r3
 8004016:	e00c      	b.n	8004032 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	43da      	mvns	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	4013      	ands	r3, r2
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	bf0c      	ite	eq
 800402a:	2301      	moveq	r3, #1
 800402c:	2300      	movne	r3, #0
 800402e:	b2db      	uxtb	r3, r3
 8004030:	461a      	mov	r2, r3
 8004032:	79fb      	ldrb	r3, [r7, #7]
 8004034:	429a      	cmp	r2, r3
 8004036:	d0b6      	beq.n	8003fa6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3710      	adds	r7, #16
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}

08004042 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b084      	sub	sp, #16
 8004046:	af00      	add	r7, sp, #0
 8004048:	60f8      	str	r0, [r7, #12]
 800404a:	60b9      	str	r1, [r7, #8]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004050:	e051      	b.n	80040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800405c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004060:	d123      	bne.n	80040aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004070:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800407a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f043 0204 	orr.w	r2, r3, #4
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e046      	b.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040b0:	d021      	beq.n	80040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040b2:	f7fe f8e1 	bl	8002278 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d302      	bcc.n	80040c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d116      	bne.n	80040f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f043 0220 	orr.w	r2, r3, #32
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e020      	b.n	8004138 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	0c1b      	lsrs	r3, r3, #16
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d10c      	bne.n	800411a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	43da      	mvns	r2, r3
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	bf14      	ite	ne
 8004112:	2301      	movne	r3, #1
 8004114:	2300      	moveq	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	e00b      	b.n	8004132 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	43da      	mvns	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d18d      	bne.n	8004052 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800414c:	e02d      	b.n	80041aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f8ce 	bl	80042f0 <I2C_IsAcknowledgeFailed>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e02d      	b.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d021      	beq.n	80041aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004166:	f7fe f887 	bl	8002278 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	429a      	cmp	r2, r3
 8004174:	d302      	bcc.n	800417c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d116      	bne.n	80041aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2220      	movs	r2, #32
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f043 0220 	orr.w	r2, r3, #32
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e007      	b.n	80041ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	695b      	ldr	r3, [r3, #20]
 80041b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041b4:	2b80      	cmp	r3, #128	; 0x80
 80041b6:	d1ca      	bne.n	800414e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b084      	sub	sp, #16
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80041ce:	e02d      	b.n	800422c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f000 f88d 	bl	80042f0 <I2C_IsAcknowledgeFailed>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e02d      	b.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d021      	beq.n	800422c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041e8:	f7fe f846 	bl	8002278 <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d302      	bcc.n	80041fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d116      	bne.n	800422c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004218:	f043 0220 	orr.w	r2, r3, #32
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e007      	b.n	800423c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b04      	cmp	r3, #4
 8004238:	d1ca      	bne.n	80041d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800423a:	2300      	movs	r3, #0
}
 800423c:	4618      	mov	r0, r3
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004250:	e042      	b.n	80042d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	695b      	ldr	r3, [r3, #20]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b10      	cmp	r3, #16
 800425e:	d119      	bne.n	8004294 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0210 	mvn.w	r2, #16
 8004268:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e029      	b.n	80042e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004294:	f7fd fff0 	bl	8002278 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	68ba      	ldr	r2, [r7, #8]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d302      	bcc.n	80042aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d116      	bne.n	80042d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c4:	f043 0220 	orr.w	r2, r3, #32
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e007      	b.n	80042e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d1b5      	bne.n	8004252 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004306:	d11b      	bne.n	8004340 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004310:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	f043 0204 	orr.w	r2, r3, #4
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	bc80      	pop	{r7}
 800434a:	4770      	bx	lr

0800434c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e26c      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	f000 8087 	beq.w	800447a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800436c:	4b92      	ldr	r3, [pc, #584]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f003 030c 	and.w	r3, r3, #12
 8004374:	2b04      	cmp	r3, #4
 8004376:	d00c      	beq.n	8004392 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004378:	4b8f      	ldr	r3, [pc, #572]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 030c 	and.w	r3, r3, #12
 8004380:	2b08      	cmp	r3, #8
 8004382:	d112      	bne.n	80043aa <HAL_RCC_OscConfig+0x5e>
 8004384:	4b8c      	ldr	r3, [pc, #560]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004390:	d10b      	bne.n	80043aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004392:	4b89      	ldr	r3, [pc, #548]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d06c      	beq.n	8004478 <HAL_RCC_OscConfig+0x12c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d168      	bne.n	8004478 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e246      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b2:	d106      	bne.n	80043c2 <HAL_RCC_OscConfig+0x76>
 80043b4:	4b80      	ldr	r3, [pc, #512]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a7f      	ldr	r2, [pc, #508]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043be:	6013      	str	r3, [r2, #0]
 80043c0:	e02e      	b.n	8004420 <HAL_RCC_OscConfig+0xd4>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d10c      	bne.n	80043e4 <HAL_RCC_OscConfig+0x98>
 80043ca:	4b7b      	ldr	r3, [pc, #492]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a7a      	ldr	r2, [pc, #488]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	4b78      	ldr	r3, [pc, #480]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a77      	ldr	r2, [pc, #476]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043e0:	6013      	str	r3, [r2, #0]
 80043e2:	e01d      	b.n	8004420 <HAL_RCC_OscConfig+0xd4>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCC_OscConfig+0xbc>
 80043ee:	4b72      	ldr	r3, [pc, #456]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a71      	ldr	r2, [pc, #452]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f8:	6013      	str	r3, [r2, #0]
 80043fa:	4b6f      	ldr	r3, [pc, #444]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a6e      	ldr	r2, [pc, #440]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004400:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004404:	6013      	str	r3, [r2, #0]
 8004406:	e00b      	b.n	8004420 <HAL_RCC_OscConfig+0xd4>
 8004408:	4b6b      	ldr	r3, [pc, #428]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a6a      	ldr	r2, [pc, #424]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800440e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004412:	6013      	str	r3, [r2, #0]
 8004414:	4b68      	ldr	r3, [pc, #416]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a67      	ldr	r2, [pc, #412]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800441a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800441e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d013      	beq.n	8004450 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fd ff26 	bl	8002278 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004430:	f7fd ff22 	bl	8002278 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b64      	cmp	r3, #100	; 0x64
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e1fa      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004442:	4b5d      	ldr	r3, [pc, #372]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0xe4>
 800444e:	e014      	b.n	800447a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fd ff12 	bl	8002278 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004458:	f7fd ff0e 	bl	8002278 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1e6      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800446a:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x10c>
 8004476:	e000      	b.n	800447a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004478:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d063      	beq.n	800454e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004486:	4b4c      	ldr	r3, [pc, #304]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 030c 	and.w	r3, r3, #12
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00b      	beq.n	80044aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004492:	4b49      	ldr	r3, [pc, #292]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b08      	cmp	r3, #8
 800449c:	d11c      	bne.n	80044d8 <HAL_RCC_OscConfig+0x18c>
 800449e:	4b46      	ldr	r3, [pc, #280]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d116      	bne.n	80044d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044aa:	4b43      	ldr	r3, [pc, #268]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f003 0302 	and.w	r3, r3, #2
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d005      	beq.n	80044c2 <HAL_RCC_OscConfig+0x176>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d001      	beq.n	80044c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e1ba      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c2:	4b3d      	ldr	r3, [pc, #244]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	00db      	lsls	r3, r3, #3
 80044d0:	4939      	ldr	r1, [pc, #228]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d6:	e03a      	b.n	800454e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d020      	beq.n	8004522 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044e0:	4b36      	ldr	r3, [pc, #216]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 80044e2:	2201      	movs	r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e6:	f7fd fec7 	bl	8002278 <HAL_GetTick>
 80044ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044ec:	e008      	b.n	8004500 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044ee:	f7fd fec3 	bl	8002278 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e19b      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004500:	4b2d      	ldr	r3, [pc, #180]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d0f0      	beq.n	80044ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450c:	4b2a      	ldr	r3, [pc, #168]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4927      	ldr	r1, [pc, #156]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 800451c:	4313      	orrs	r3, r2
 800451e:	600b      	str	r3, [r1, #0]
 8004520:	e015      	b.n	800454e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004522:	4b26      	ldr	r3, [pc, #152]	; (80045bc <HAL_RCC_OscConfig+0x270>)
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004528:	f7fd fea6 	bl	8002278 <HAL_GetTick>
 800452c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800452e:	e008      	b.n	8004542 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004530:	f7fd fea2 	bl	8002278 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b02      	cmp	r3, #2
 800453c:	d901      	bls.n	8004542 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e17a      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004542:	4b1d      	ldr	r3, [pc, #116]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0308 	and.w	r3, r3, #8
 8004556:	2b00      	cmp	r3, #0
 8004558:	d03a      	beq.n	80045d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	699b      	ldr	r3, [r3, #24]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d019      	beq.n	8004596 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004562:	4b17      	ldr	r3, [pc, #92]	; (80045c0 <HAL_RCC_OscConfig+0x274>)
 8004564:	2201      	movs	r2, #1
 8004566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004568:	f7fd fe86 	bl	8002278 <HAL_GetTick>
 800456c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800456e:	e008      	b.n	8004582 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004570:	f7fd fe82 	bl	8002278 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	2b02      	cmp	r3, #2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e15a      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <HAL_RCC_OscConfig+0x26c>)
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	f003 0302 	and.w	r3, r3, #2
 800458a:	2b00      	cmp	r3, #0
 800458c:	d0f0      	beq.n	8004570 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800458e:	2001      	movs	r0, #1
 8004590:	f000 fada 	bl	8004b48 <RCC_Delay>
 8004594:	e01c      	b.n	80045d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004596:	4b0a      	ldr	r3, [pc, #40]	; (80045c0 <HAL_RCC_OscConfig+0x274>)
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459c:	f7fd fe6c 	bl	8002278 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045a2:	e00f      	b.n	80045c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045a4:	f7fd fe68 	bl	8002278 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d908      	bls.n	80045c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e140      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
 80045b6:	bf00      	nop
 80045b8:	40021000 	.word	0x40021000
 80045bc:	42420000 	.word	0x42420000
 80045c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	4b9e      	ldr	r3, [pc, #632]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80045c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d1e9      	bne.n	80045a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	f000 80a6 	beq.w	800472a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045de:	2300      	movs	r3, #0
 80045e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045e2:	4b97      	ldr	r3, [pc, #604]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10d      	bne.n	800460a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ee:	4b94      	ldr	r3, [pc, #592]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80045f0:	69db      	ldr	r3, [r3, #28]
 80045f2:	4a93      	ldr	r2, [pc, #588]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80045f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045f8:	61d3      	str	r3, [r2, #28]
 80045fa:	4b91      	ldr	r3, [pc, #580]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004602:	60bb      	str	r3, [r7, #8]
 8004604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004606:	2301      	movs	r3, #1
 8004608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800460a:	4b8e      	ldr	r3, [pc, #568]	; (8004844 <HAL_RCC_OscConfig+0x4f8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	2b00      	cmp	r3, #0
 8004614:	d118      	bne.n	8004648 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004616:	4b8b      	ldr	r3, [pc, #556]	; (8004844 <HAL_RCC_OscConfig+0x4f8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4a8a      	ldr	r2, [pc, #552]	; (8004844 <HAL_RCC_OscConfig+0x4f8>)
 800461c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004622:	f7fd fe29 	bl	8002278 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462a:	f7fd fe25 	bl	8002278 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b64      	cmp	r3, #100	; 0x64
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e0fd      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463c:	4b81      	ldr	r3, [pc, #516]	; (8004844 <HAL_RCC_OscConfig+0x4f8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0f0      	beq.n	800462a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d106      	bne.n	800465e <HAL_RCC_OscConfig+0x312>
 8004650:	4b7b      	ldr	r3, [pc, #492]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	4a7a      	ldr	r2, [pc, #488]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004656:	f043 0301 	orr.w	r3, r3, #1
 800465a:	6213      	str	r3, [r2, #32]
 800465c:	e02d      	b.n	80046ba <HAL_RCC_OscConfig+0x36e>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10c      	bne.n	8004680 <HAL_RCC_OscConfig+0x334>
 8004666:	4b76      	ldr	r3, [pc, #472]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	4a75      	ldr	r2, [pc, #468]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 800466c:	f023 0301 	bic.w	r3, r3, #1
 8004670:	6213      	str	r3, [r2, #32]
 8004672:	4b73      	ldr	r3, [pc, #460]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	4a72      	ldr	r2, [pc, #456]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004678:	f023 0304 	bic.w	r3, r3, #4
 800467c:	6213      	str	r3, [r2, #32]
 800467e:	e01c      	b.n	80046ba <HAL_RCC_OscConfig+0x36e>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	2b05      	cmp	r3, #5
 8004686:	d10c      	bne.n	80046a2 <HAL_RCC_OscConfig+0x356>
 8004688:	4b6d      	ldr	r3, [pc, #436]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 800468a:	6a1b      	ldr	r3, [r3, #32]
 800468c:	4a6c      	ldr	r2, [pc, #432]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 800468e:	f043 0304 	orr.w	r3, r3, #4
 8004692:	6213      	str	r3, [r2, #32]
 8004694:	4b6a      	ldr	r3, [pc, #424]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	4a69      	ldr	r2, [pc, #420]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 800469a:	f043 0301 	orr.w	r3, r3, #1
 800469e:	6213      	str	r3, [r2, #32]
 80046a0:	e00b      	b.n	80046ba <HAL_RCC_OscConfig+0x36e>
 80046a2:	4b67      	ldr	r3, [pc, #412]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	4a66      	ldr	r2, [pc, #408]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	6213      	str	r3, [r2, #32]
 80046ae:	4b64      	ldr	r3, [pc, #400]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	4a63      	ldr	r2, [pc, #396]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80046b4:	f023 0304 	bic.w	r3, r3, #4
 80046b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d015      	beq.n	80046ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046c2:	f7fd fdd9 	bl	8002278 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fd fdd5 	bl	8002278 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e0ab      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e0:	4b57      	ldr	r3, [pc, #348]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0ee      	beq.n	80046ca <HAL_RCC_OscConfig+0x37e>
 80046ec:	e014      	b.n	8004718 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046ee:	f7fd fdc3 	bl	8002278 <HAL_GetTick>
 80046f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f6:	f7fd fdbf 	bl	8002278 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	f241 3288 	movw	r2, #5000	; 0x1388
 8004704:	4293      	cmp	r3, r2
 8004706:	d901      	bls.n	800470c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e095      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800470c:	4b4c      	ldr	r3, [pc, #304]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1ee      	bne.n	80046f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004718:	7dfb      	ldrb	r3, [r7, #23]
 800471a:	2b01      	cmp	r3, #1
 800471c:	d105      	bne.n	800472a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471e:	4b48      	ldr	r3, [pc, #288]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	4a47      	ldr	r2, [pc, #284]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004728:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	69db      	ldr	r3, [r3, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8081 	beq.w	8004836 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004734:	4b42      	ldr	r3, [pc, #264]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	f003 030c 	and.w	r3, r3, #12
 800473c:	2b08      	cmp	r3, #8
 800473e:	d061      	beq.n	8004804 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	2b02      	cmp	r3, #2
 8004746:	d146      	bne.n	80047d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004748:	4b3f      	ldr	r3, [pc, #252]	; (8004848 <HAL_RCC_OscConfig+0x4fc>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474e:	f7fd fd93 	bl	8002278 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004754:	e008      	b.n	8004768 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004756:	f7fd fd8f 	bl	8002278 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e067      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004768:	4b35      	ldr	r3, [pc, #212]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d1f0      	bne.n	8004756 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a1b      	ldr	r3, [r3, #32]
 8004778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477c:	d108      	bne.n	8004790 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800477e:	4b30      	ldr	r3, [pc, #192]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	492d      	ldr	r1, [pc, #180]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004790:	4b2b      	ldr	r3, [pc, #172]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a19      	ldr	r1, [r3, #32]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	430b      	orrs	r3, r1
 80047a2:	4927      	ldr	r1, [pc, #156]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a8:	4b27      	ldr	r3, [pc, #156]	; (8004848 <HAL_RCC_OscConfig+0x4fc>)
 80047aa:	2201      	movs	r2, #1
 80047ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ae:	f7fd fd63 	bl	8002278 <HAL_GetTick>
 80047b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047b4:	e008      	b.n	80047c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047b6:	f7fd fd5f 	bl	8002278 <HAL_GetTick>
 80047ba:	4602      	mov	r2, r0
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	1ad3      	subs	r3, r2, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d901      	bls.n	80047c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80047c4:	2303      	movs	r3, #3
 80047c6:	e037      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047c8:	4b1d      	ldr	r3, [pc, #116]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0f0      	beq.n	80047b6 <HAL_RCC_OscConfig+0x46a>
 80047d4:	e02f      	b.n	8004836 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d6:	4b1c      	ldr	r3, [pc, #112]	; (8004848 <HAL_RCC_OscConfig+0x4fc>)
 80047d8:	2200      	movs	r2, #0
 80047da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047dc:	f7fd fd4c 	bl	8002278 <HAL_GetTick>
 80047e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047e4:	f7fd fd48 	bl	8002278 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e020      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047f6:	4b12      	ldr	r3, [pc, #72]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x498>
 8004802:	e018      	b.n	8004836 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d101      	bne.n	8004810 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e013      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004810:	4b0b      	ldr	r3, [pc, #44]	; (8004840 <HAL_RCC_OscConfig+0x4f4>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a1b      	ldr	r3, [r3, #32]
 8004820:	429a      	cmp	r2, r3
 8004822:	d106      	bne.n	8004832 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482e:	429a      	cmp	r2, r3
 8004830:	d001      	beq.n	8004836 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e000      	b.n	8004838 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	40021000 	.word	0x40021000
 8004844:	40007000 	.word	0x40007000
 8004848:	42420060 	.word	0x42420060

0800484c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b084      	sub	sp, #16
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e0d0      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004860:	4b6a      	ldr	r3, [pc, #424]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	683a      	ldr	r2, [r7, #0]
 800486a:	429a      	cmp	r2, r3
 800486c:	d910      	bls.n	8004890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800486e:	4b67      	ldr	r3, [pc, #412]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 0207 	bic.w	r2, r3, #7
 8004876:	4965      	ldr	r1, [pc, #404]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	4313      	orrs	r3, r2
 800487c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800487e:	4b63      	ldr	r3, [pc, #396]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	683a      	ldr	r2, [r7, #0]
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e0b8      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d020      	beq.n	80048de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048a8:	4b59      	ldr	r3, [pc, #356]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	4a58      	ldr	r2, [pc, #352]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80048b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d005      	beq.n	80048cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048c0:	4b53      	ldr	r3, [pc, #332]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	4a52      	ldr	r2, [pc, #328]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80048c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80048ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048cc:	4b50      	ldr	r3, [pc, #320]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	494d      	ldr	r1, [pc, #308]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d040      	beq.n	800496c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d107      	bne.n	8004902 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f2:	4b47      	ldr	r3, [pc, #284]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d115      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e07f      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2b02      	cmp	r3, #2
 8004908:	d107      	bne.n	800491a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e073      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800491a:	4b3d      	ldr	r3, [pc, #244]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e06b      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800492a:	4b39      	ldr	r3, [pc, #228]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f023 0203 	bic.w	r2, r3, #3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	4936      	ldr	r1, [pc, #216]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 8004938:	4313      	orrs	r3, r2
 800493a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800493c:	f7fd fc9c 	bl	8002278 <HAL_GetTick>
 8004940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004942:	e00a      	b.n	800495a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004944:	f7fd fc98 	bl	8002278 <HAL_GetTick>
 8004948:	4602      	mov	r2, r0
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e053      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800495a:	4b2d      	ldr	r3, [pc, #180]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f003 020c 	and.w	r2, r3, #12
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	429a      	cmp	r2, r3
 800496a:	d1eb      	bne.n	8004944 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800496c:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d210      	bcs.n	800499c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800497a:	4b24      	ldr	r3, [pc, #144]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 0207 	bic.w	r2, r3, #7
 8004982:	4922      	ldr	r1, [pc, #136]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498a:	4b20      	ldr	r3, [pc, #128]	; (8004a0c <HAL_RCC_ClockConfig+0x1c0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e032      	b.n	8004a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0304 	and.w	r3, r3, #4
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d008      	beq.n	80049ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049a8:	4b19      	ldr	r3, [pc, #100]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	4916      	ldr	r1, [pc, #88]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80049b6:	4313      	orrs	r3, r2
 80049b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049c6:	4b12      	ldr	r3, [pc, #72]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	490e      	ldr	r1, [pc, #56]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80049da:	f000 f821 	bl	8004a20 <HAL_RCC_GetSysClockFreq>
 80049de:	4601      	mov	r1, r0
 80049e0:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <HAL_RCC_ClockConfig+0x1c4>)
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	091b      	lsrs	r3, r3, #4
 80049e6:	f003 030f 	and.w	r3, r3, #15
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <HAL_RCC_ClockConfig+0x1c8>)
 80049ec:	5cd3      	ldrb	r3, [r2, r3]
 80049ee:	fa21 f303 	lsr.w	r3, r1, r3
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <HAL_RCC_ClockConfig+0x1cc>)
 80049f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80049f6:	4b09      	ldr	r3, [pc, #36]	; (8004a1c <HAL_RCC_ClockConfig+0x1d0>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7fd fbfa 	bl	80021f4 <HAL_InitTick>

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	40022000 	.word	0x40022000
 8004a10:	40021000 	.word	0x40021000
 8004a14:	08007ef8 	.word	0x08007ef8
 8004a18:	20000008 	.word	0x20000008
 8004a1c:	2000000c 	.word	0x2000000c

08004a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a20:	b490      	push	{r4, r7}
 8004a22:	b08a      	sub	sp, #40	; 0x28
 8004a24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004a26:	4b2a      	ldr	r3, [pc, #168]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004a28:	1d3c      	adds	r4, r7, #4
 8004a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004a30:	4b28      	ldr	r3, [pc, #160]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a32:	881b      	ldrh	r3, [r3, #0]
 8004a34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a36:	2300      	movs	r3, #0
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	61bb      	str	r3, [r7, #24]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	627b      	str	r3, [r7, #36]	; 0x24
 8004a42:	2300      	movs	r3, #0
 8004a44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004a4a:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d002      	beq.n	8004a60 <HAL_RCC_GetSysClockFreq+0x40>
 8004a5a:	2b08      	cmp	r3, #8
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0x46>
 8004a5e:	e02d      	b.n	8004abc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a60:	4b1e      	ldr	r3, [pc, #120]	; (8004adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a62:	623b      	str	r3, [r7, #32]
      break;
 8004a64:	e02d      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	0c9b      	lsrs	r3, r3, #18
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a72:	4413      	add	r3, r2
 8004a74:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004a78:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d013      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	0c5b      	lsrs	r3, r3, #17
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004a92:	4413      	add	r3, r2
 8004a94:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a98:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	4a0f      	ldr	r2, [pc, #60]	; (8004adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a9e:	fb02 f203 	mul.w	r2, r2, r3
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa8:	627b      	str	r3, [r7, #36]	; 0x24
 8004aaa:	e004      	b.n	8004ab6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	4a0c      	ldr	r2, [pc, #48]	; (8004ae0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	623b      	str	r3, [r7, #32]
      break;
 8004aba:	e002      	b.n	8004ac2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004abc:	4b07      	ldr	r3, [pc, #28]	; (8004adc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004abe:	623b      	str	r3, [r7, #32]
      break;
 8004ac0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3728      	adds	r7, #40	; 0x28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bc90      	pop	{r4, r7}
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	08007778 	.word	0x08007778
 8004ad4:	08007788 	.word	0x08007788
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	007a1200 	.word	0x007a1200
 8004ae0:	003d0900 	.word	0x003d0900

08004ae4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ae8:	4b02      	ldr	r3, [pc, #8]	; (8004af4 <HAL_RCC_GetHCLKFreq+0x10>)
 8004aea:	681b      	ldr	r3, [r3, #0]
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bc80      	pop	{r7}
 8004af2:	4770      	bx	lr
 8004af4:	20000008 	.word	0x20000008

08004af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004afc:	f7ff fff2 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b00:	4601      	mov	r1, r0
 8004b02:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	4a03      	ldr	r2, [pc, #12]	; (8004b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b0e:	5cd3      	ldrb	r3, [r2, r3]
 8004b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	08007f08 	.word	0x08007f08

08004b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004b24:	f7ff ffde 	bl	8004ae4 <HAL_RCC_GetHCLKFreq>
 8004b28:	4601      	mov	r1, r0
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	0adb      	lsrs	r3, r3, #11
 8004b30:	f003 0307 	and.w	r3, r3, #7
 8004b34:	4a03      	ldr	r2, [pc, #12]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b36:	5cd3      	ldrb	r3, [r2, r3]
 8004b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40021000 	.word	0x40021000
 8004b44:	08007f08 	.word	0x08007f08

08004b48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <RCC_Delay+0x34>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a0a      	ldr	r2, [pc, #40]	; (8004b80 <RCC_Delay+0x38>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	0a5b      	lsrs	r3, r3, #9
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	fb02 f303 	mul.w	r3, r2, r3
 8004b62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004b64:	bf00      	nop
  }
  while (Delay --);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1e5a      	subs	r2, r3, #1
 8004b6a:	60fa      	str	r2, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f9      	bne.n	8004b64 <RCC_Delay+0x1c>
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bc80      	pop	{r7}
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	20000008 	.word	0x20000008
 8004b80:	10624dd3 	.word	0x10624dd3

08004b84 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0301 	and.w	r3, r3, #1
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d07d      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba4:	4b4f      	ldr	r3, [pc, #316]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10d      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bb0:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb2:	69db      	ldr	r3, [r3, #28]
 8004bb4:	4a4b      	ldr	r2, [pc, #300]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bba:	61d3      	str	r3, [r2, #28]
 8004bbc:	4b49      	ldr	r3, [pc, #292]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bcc:	4b46      	ldr	r3, [pc, #280]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d118      	bne.n	8004c0a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd8:	4b43      	ldr	r3, [pc, #268]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a42      	ldr	r2, [pc, #264]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be4:	f7fd fb48 	bl	8002278 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bea:	e008      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bec:	f7fd fb44 	bl	8002278 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	; 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e06d      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bfe:	4b3a      	ldr	r3, [pc, #232]	; (8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d0f0      	beq.n	8004bec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c0a:	4b36      	ldr	r3, [pc, #216]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c12:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d02e      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d027      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c28:	4b2e      	ldr	r3, [pc, #184]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c30:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c32:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c34:	2201      	movs	r2, #1
 8004c36:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c38:	4b2c      	ldr	r3, [pc, #176]	; (8004cec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c3e:	4a29      	ldr	r2, [pc, #164]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d014      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c4e:	f7fd fb13 	bl	8002278 <HAL_GetTick>
 8004c52:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c54:	e00a      	b.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c56:	f7fd fb0f 	bl	8002278 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e036      	b.n	8004cda <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c6c:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	f003 0302 	and.w	r3, r3, #2
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0ee      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c78:	4b1a      	ldr	r3, [pc, #104]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	4917      	ldr	r1, [pc, #92]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d105      	bne.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c90:	4b14      	ldr	r3, [pc, #80]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c92:	69db      	ldr	r3, [r3, #28]
 8004c94:	4a13      	ldr	r2, [pc, #76]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ca8:	4b0e      	ldr	r3, [pc, #56]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	490b      	ldr	r1, [pc, #44]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0310 	and.w	r3, r3, #16
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d008      	beq.n	8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cc6:	4b07      	ldr	r3, [pc, #28]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	4904      	ldr	r1, [pc, #16]	; (8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3718      	adds	r7, #24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	40007000 	.word	0x40007000
 8004cec:	42420440 	.word	0x42420440

08004cf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e01d      	b.n	8004d3e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2200      	movs	r2, #0
 8004d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f7fd f91a 	bl	8001f50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2202      	movs	r2, #2
 8004d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	3304      	adds	r3, #4
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	4610      	mov	r0, r2
 8004d30:	f000 fa10 	bl	8005154 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3708      	adds	r7, #8
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d46:	b480      	push	{r7}
 8004d48:	b085      	sub	sp, #20
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68da      	ldr	r2, [r3, #12]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f042 0201 	orr.w	r2, r2, #1
 8004d5c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b06      	cmp	r3, #6
 8004d6e:	d007      	beq.n	8004d80 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bc80      	pop	{r7}
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b082      	sub	sp, #8
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	f003 0302 	and.w	r3, r3, #2
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d122      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	d11b      	bne.n	8004de8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f06f 0202 	mvn.w	r2, #2
 8004db8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 f9a4 	bl	800511c <HAL_TIM_IC_CaptureCallback>
 8004dd4:	e005      	b.n	8004de2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f000 f997 	bl	800510a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f000 f9a6 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2200      	movs	r2, #0
 8004de6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d122      	bne.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d11b      	bne.n	8004e3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f06f 0204 	mvn.w	r2, #4
 8004e0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2202      	movs	r2, #2
 8004e12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d003      	beq.n	8004e2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f97a 	bl	800511c <HAL_TIM_IC_CaptureCallback>
 8004e28:	e005      	b.n	8004e36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f96d 	bl	800510a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f97c 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0308 	and.w	r3, r3, #8
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d122      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d11b      	bne.n	8004e90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f06f 0208 	mvn.w	r2, #8
 8004e60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2204      	movs	r2, #4
 8004e66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 f950 	bl	800511c <HAL_TIM_IC_CaptureCallback>
 8004e7c:	e005      	b.n	8004e8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f943 	bl	800510a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f952 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	691b      	ldr	r3, [r3, #16]
 8004e96:	f003 0310 	and.w	r3, r3, #16
 8004e9a:	2b10      	cmp	r3, #16
 8004e9c:	d122      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	f003 0310 	and.w	r3, r3, #16
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d11b      	bne.n	8004ee4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0210 	mvn.w	r2, #16
 8004eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2208      	movs	r2, #8
 8004eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f926 	bl	800511c <HAL_TIM_IC_CaptureCallback>
 8004ed0:	e005      	b.n	8004ede <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f919 	bl	800510a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f928 	bl	800512e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0301 	and.w	r3, r3, #1
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10e      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	68db      	ldr	r3, [r3, #12]
 8004ef8:	f003 0301 	and.w	r3, r3, #1
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d107      	bne.n	8004f10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f06f 0201 	mvn.w	r2, #1
 8004f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f7fc f9b0 	bl	8001270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	691b      	ldr	r3, [r3, #16]
 8004f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f1a:	2b80      	cmp	r3, #128	; 0x80
 8004f1c:	d10e      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d107      	bne.n	8004f3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f000 fa51 	bl	80053de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f46:	2b40      	cmp	r3, #64	; 0x40
 8004f48:	d10e      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d107      	bne.n	8004f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f8ec 	bl	8005140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	d10e      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f003 0320 	and.w	r3, r3, #32
 8004f80:	2b20      	cmp	r3, #32
 8004f82:	d107      	bne.n	8004f94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f06f 0220 	mvn.w	r2, #32
 8004f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fa1c 	bl	80053cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_TIM_ConfigClockSource+0x18>
 8004fb0:	2302      	movs	r3, #2
 8004fb2:	e0a6      	b.n	8005102 <HAL_TIM_ConfigClockSource+0x166>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2202      	movs	r2, #2
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d067      	beq.n	80050bc <HAL_TIM_ConfigClockSource+0x120>
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d80b      	bhi.n	8005008 <HAL_TIM_ConfigClockSource+0x6c>
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d073      	beq.n	80050dc <HAL_TIM_ConfigClockSource+0x140>
 8004ff4:	2b10      	cmp	r3, #16
 8004ff6:	d802      	bhi.n	8004ffe <HAL_TIM_ConfigClockSource+0x62>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d06f      	beq.n	80050dc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004ffc:	e078      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ffe:	2b20      	cmp	r3, #32
 8005000:	d06c      	beq.n	80050dc <HAL_TIM_ConfigClockSource+0x140>
 8005002:	2b30      	cmp	r3, #48	; 0x30
 8005004:	d06a      	beq.n	80050dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005006:	e073      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005008:	2b70      	cmp	r3, #112	; 0x70
 800500a:	d00d      	beq.n	8005028 <HAL_TIM_ConfigClockSource+0x8c>
 800500c:	2b70      	cmp	r3, #112	; 0x70
 800500e:	d804      	bhi.n	800501a <HAL_TIM_ConfigClockSource+0x7e>
 8005010:	2b50      	cmp	r3, #80	; 0x50
 8005012:	d033      	beq.n	800507c <HAL_TIM_ConfigClockSource+0xe0>
 8005014:	2b60      	cmp	r3, #96	; 0x60
 8005016:	d041      	beq.n	800509c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005018:	e06a      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	d066      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x152>
 8005020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005024:	d017      	beq.n	8005056 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005026:	e063      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6818      	ldr	r0, [r3, #0]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	6899      	ldr	r1, [r3, #8]
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f000 f965 	bl	8005306 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800504a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	609a      	str	r2, [r3, #8]
      break;
 8005054:	e04c      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6818      	ldr	r0, [r3, #0]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	6899      	ldr	r1, [r3, #8]
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	f000 f94e 	bl	8005306 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	689a      	ldr	r2, [r3, #8]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005078:	609a      	str	r2, [r3, #8]
      break;
 800507a:	e039      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6818      	ldr	r0, [r3, #0]
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	6859      	ldr	r1, [r3, #4]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	461a      	mov	r2, r3
 800508a:	f000 f8c5 	bl	8005218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2150      	movs	r1, #80	; 0x50
 8005094:	4618      	mov	r0, r3
 8005096:	f000 f91c 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 800509a:	e029      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6818      	ldr	r0, [r3, #0]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	6859      	ldr	r1, [r3, #4]
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	461a      	mov	r2, r3
 80050aa:	f000 f8e3 	bl	8005274 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2160      	movs	r1, #96	; 0x60
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 f90c 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 80050ba:	e019      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	6859      	ldr	r1, [r3, #4]
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	461a      	mov	r2, r3
 80050ca:	f000 f8a5 	bl	8005218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2140      	movs	r1, #64	; 0x40
 80050d4:	4618      	mov	r0, r3
 80050d6:	f000 f8fc 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 80050da:	e009      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4619      	mov	r1, r3
 80050e6:	4610      	mov	r0, r2
 80050e8:	f000 f8f3 	bl	80052d2 <TIM_ITRx_SetConfig>
      break;
 80050ec:	e000      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80050ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3710      	adds	r7, #16
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800510a:	b480      	push	{r7}
 800510c:	b083      	sub	sp, #12
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005112:	bf00      	nop
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	bc80      	pop	{r7}
 800511a:	4770      	bx	lr

0800511c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005124:	bf00      	nop
 8005126:	370c      	adds	r7, #12
 8005128:	46bd      	mov	sp, r7
 800512a:	bc80      	pop	{r7}
 800512c:	4770      	bx	lr

0800512e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005136:	bf00      	nop
 8005138:	370c      	adds	r7, #12
 800513a:	46bd      	mov	sp, r7
 800513c:	bc80      	pop	{r7}
 800513e:	4770      	bx	lr

08005140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005148:	bf00      	nop
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
	...

08005154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a29      	ldr	r2, [pc, #164]	; (800520c <TIM_Base_SetConfig+0xb8>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d00b      	beq.n	8005184 <TIM_Base_SetConfig+0x30>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005172:	d007      	beq.n	8005184 <TIM_Base_SetConfig+0x30>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a26      	ldr	r2, [pc, #152]	; (8005210 <TIM_Base_SetConfig+0xbc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d003      	beq.n	8005184 <TIM_Base_SetConfig+0x30>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a25      	ldr	r2, [pc, #148]	; (8005214 <TIM_Base_SetConfig+0xc0>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d108      	bne.n	8005196 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800518a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a1c      	ldr	r2, [pc, #112]	; (800520c <TIM_Base_SetConfig+0xb8>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_Base_SetConfig+0x62>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051a4:	d007      	beq.n	80051b6 <TIM_Base_SetConfig+0x62>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a19      	ldr	r2, [pc, #100]	; (8005210 <TIM_Base_SetConfig+0xbc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_Base_SetConfig+0x62>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a18      	ldr	r2, [pc, #96]	; (8005214 <TIM_Base_SetConfig+0xc0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a07      	ldr	r2, [pc, #28]	; (800520c <TIM_Base_SetConfig+0xb8>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d103      	bne.n	80051fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	615a      	str	r2, [r3, #20]
}
 8005202:	bf00      	nop
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr
 800520c:	40012c00 	.word	0x40012c00
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800

08005218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	f023 0201 	bic.w	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	f023 030a 	bic.w	r3, r3, #10
 8005254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	4313      	orrs	r3, r2
 800525c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	697a      	ldr	r2, [r7, #20]
 8005268:	621a      	str	r2, [r3, #32]
}
 800526a:	bf00      	nop
 800526c:	371c      	adds	r7, #28
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr

08005274 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	f023 0210 	bic.w	r2, r3, #16
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800529e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	031b      	lsls	r3, r3, #12
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052b0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	011b      	lsls	r3, r3, #4
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	4313      	orrs	r3, r2
 80052ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	621a      	str	r2, [r3, #32]
}
 80052c8:	bf00      	nop
 80052ca:	371c      	adds	r7, #28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bc80      	pop	{r7}
 80052d0:	4770      	bx	lr

080052d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	f043 0307 	orr.w	r3, r3, #7
 80052f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	609a      	str	r2, [r3, #8]
}
 80052fc:	bf00      	nop
 80052fe:	3714      	adds	r7, #20
 8005300:	46bd      	mov	sp, r7
 8005302:	bc80      	pop	{r7}
 8005304:	4770      	bx	lr

08005306 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005306:	b480      	push	{r7}
 8005308:	b087      	sub	sp, #28
 800530a:	af00      	add	r7, sp, #0
 800530c:	60f8      	str	r0, [r7, #12]
 800530e:	60b9      	str	r1, [r7, #8]
 8005310:	607a      	str	r2, [r7, #4]
 8005312:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005320:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	021a      	lsls	r2, r3, #8
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	431a      	orrs	r2, r3
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	4313      	orrs	r3, r2
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	4313      	orrs	r3, r2
 8005332:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	609a      	str	r2, [r3, #8]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	bc80      	pop	{r7}
 8005342:	4770      	bx	lr

08005344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005344:	b480      	push	{r7}
 8005346:	b085      	sub	sp, #20
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005354:	2b01      	cmp	r3, #1
 8005356:	d101      	bne.n	800535c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005358:	2302      	movs	r3, #2
 800535a:	e032      	b.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2202      	movs	r2, #2
 8005368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005394:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	68ba      	ldr	r2, [r7, #8]
 800539c:	4313      	orrs	r3, r2
 800539e:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr

080053cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr

080053de <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bc80      	pop	{r7}
 80053ee:	4770      	bx	lr

080053f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e03f      	b.n	8005482 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f7fc fdc0 	bl	8001f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2224      	movs	r2, #36	; 0x24
 8005420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005432:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f000 f829 	bl	800548c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	691a      	ldr	r2, [r3, #16]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005448:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	695a      	ldr	r2, [r3, #20]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005458:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	68da      	ldr	r2, [r3, #12]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005468:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2220      	movs	r2, #32
 8005474:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005480:	2300      	movs	r3, #0
}
 8005482:	4618      	mov	r0, r3
 8005484:	3708      	adds	r7, #8
 8005486:	46bd      	mov	sp, r7
 8005488:	bd80      	pop	{r7, pc}
	...

0800548c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	68da      	ldr	r2, [r3, #12]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	689a      	ldr	r2, [r3, #8]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	695b      	ldr	r3, [r3, #20]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80054c6:	f023 030c 	bic.w	r3, r3, #12
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	68f9      	ldr	r1, [r7, #12]
 80054d0:	430b      	orrs	r3, r1
 80054d2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a52      	ldr	r2, [pc, #328]	; (8005638 <UART_SetConfig+0x1ac>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d14e      	bne.n	8005592 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054f4:	f7ff fb14 	bl	8004b20 <HAL_RCC_GetPCLK2Freq>
 80054f8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054fa:	68ba      	ldr	r2, [r7, #8]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	009a      	lsls	r2, r3, #2
 8005504:	441a      	add	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005510:	4a4a      	ldr	r2, [pc, #296]	; (800563c <UART_SetConfig+0x1b0>)
 8005512:	fba2 2303 	umull	r2, r3, r2, r3
 8005516:	095b      	lsrs	r3, r3, #5
 8005518:	0119      	lsls	r1, r3, #4
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4613      	mov	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4413      	add	r3, r2
 8005522:	009a      	lsls	r2, r3, #2
 8005524:	441a      	add	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	009b      	lsls	r3, r3, #2
 800552c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005530:	4b42      	ldr	r3, [pc, #264]	; (800563c <UART_SetConfig+0x1b0>)
 8005532:	fba3 0302 	umull	r0, r3, r3, r2
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	2064      	movs	r0, #100	; 0x64
 800553a:	fb00 f303 	mul.w	r3, r0, r3
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	3332      	adds	r3, #50	; 0x32
 8005544:	4a3d      	ldr	r2, [pc, #244]	; (800563c <UART_SetConfig+0x1b0>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005550:	4419      	add	r1, r3
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009a      	lsls	r2, r3, #2
 800555c:	441a      	add	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	fbb2 f2f3 	udiv	r2, r2, r3
 8005568:	4b34      	ldr	r3, [pc, #208]	; (800563c <UART_SetConfig+0x1b0>)
 800556a:	fba3 0302 	umull	r0, r3, r3, r2
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2064      	movs	r0, #100	; 0x64
 8005572:	fb00 f303 	mul.w	r3, r0, r3
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	3332      	adds	r3, #50	; 0x32
 800557c:	4a2f      	ldr	r2, [pc, #188]	; (800563c <UART_SetConfig+0x1b0>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	f003 020f 	and.w	r2, r3, #15
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	440a      	add	r2, r1
 800558e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005590:	e04d      	b.n	800562e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005592:	f7ff fab1 	bl	8004af8 <HAL_RCC_GetPCLK1Freq>
 8005596:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005598:	68ba      	ldr	r2, [r7, #8]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009a      	lsls	r2, r3, #2
 80055a2:	441a      	add	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	4a23      	ldr	r2, [pc, #140]	; (800563c <UART_SetConfig+0x1b0>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	0119      	lsls	r1, r3, #4
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009a      	lsls	r2, r3, #2
 80055c2:	441a      	add	r2, r3
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80055ce:	4b1b      	ldr	r3, [pc, #108]	; (800563c <UART_SetConfig+0x1b0>)
 80055d0:	fba3 0302 	umull	r0, r3, r3, r2
 80055d4:	095b      	lsrs	r3, r3, #5
 80055d6:	2064      	movs	r0, #100	; 0x64
 80055d8:	fb00 f303 	mul.w	r3, r0, r3
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	3332      	adds	r3, #50	; 0x32
 80055e2:	4a16      	ldr	r2, [pc, #88]	; (800563c <UART_SetConfig+0x1b0>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	095b      	lsrs	r3, r3, #5
 80055ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ee:	4419      	add	r1, r3
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	4613      	mov	r3, r2
 80055f4:	009b      	lsls	r3, r3, #2
 80055f6:	4413      	add	r3, r2
 80055f8:	009a      	lsls	r2, r3, #2
 80055fa:	441a      	add	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	fbb2 f2f3 	udiv	r2, r2, r3
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <UART_SetConfig+0x1b0>)
 8005608:	fba3 0302 	umull	r0, r3, r3, r2
 800560c:	095b      	lsrs	r3, r3, #5
 800560e:	2064      	movs	r0, #100	; 0x64
 8005610:	fb00 f303 	mul.w	r3, r0, r3
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	011b      	lsls	r3, r3, #4
 8005618:	3332      	adds	r3, #50	; 0x32
 800561a:	4a08      	ldr	r2, [pc, #32]	; (800563c <UART_SetConfig+0x1b0>)
 800561c:	fba2 2303 	umull	r2, r3, r2, r3
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	f003 020f 	and.w	r2, r3, #15
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	440a      	add	r2, r1
 800562c:	609a      	str	r2, [r3, #8]
}
 800562e:	bf00      	nop
 8005630:	3710      	adds	r7, #16
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}
 8005636:	bf00      	nop
 8005638:	40013800 	.word	0x40013800
 800563c:	51eb851f 	.word	0x51eb851f

08005640 <__errno>:
 8005640:	4b01      	ldr	r3, [pc, #4]	; (8005648 <__errno+0x8>)
 8005642:	6818      	ldr	r0, [r3, #0]
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	20000014 	.word	0x20000014

0800564c <__libc_init_array>:
 800564c:	b570      	push	{r4, r5, r6, lr}
 800564e:	2500      	movs	r5, #0
 8005650:	4e0c      	ldr	r6, [pc, #48]	; (8005684 <__libc_init_array+0x38>)
 8005652:	4c0d      	ldr	r4, [pc, #52]	; (8005688 <__libc_init_array+0x3c>)
 8005654:	1ba4      	subs	r4, r4, r6
 8005656:	10a4      	asrs	r4, r4, #2
 8005658:	42a5      	cmp	r5, r4
 800565a:	d109      	bne.n	8005670 <__libc_init_array+0x24>
 800565c:	f002 f85e 	bl	800771c <_init>
 8005660:	2500      	movs	r5, #0
 8005662:	4e0a      	ldr	r6, [pc, #40]	; (800568c <__libc_init_array+0x40>)
 8005664:	4c0a      	ldr	r4, [pc, #40]	; (8005690 <__libc_init_array+0x44>)
 8005666:	1ba4      	subs	r4, r4, r6
 8005668:	10a4      	asrs	r4, r4, #2
 800566a:	42a5      	cmp	r5, r4
 800566c:	d105      	bne.n	800567a <__libc_init_array+0x2e>
 800566e:	bd70      	pop	{r4, r5, r6, pc}
 8005670:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005674:	4798      	blx	r3
 8005676:	3501      	adds	r5, #1
 8005678:	e7ee      	b.n	8005658 <__libc_init_array+0xc>
 800567a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800567e:	4798      	blx	r3
 8005680:	3501      	adds	r5, #1
 8005682:	e7f2      	b.n	800566a <__libc_init_array+0x1e>
 8005684:	08008170 	.word	0x08008170
 8005688:	08008170 	.word	0x08008170
 800568c:	08008170 	.word	0x08008170
 8005690:	08008174 	.word	0x08008174

08005694 <memset>:
 8005694:	4603      	mov	r3, r0
 8005696:	4402      	add	r2, r0
 8005698:	4293      	cmp	r3, r2
 800569a:	d100      	bne.n	800569e <memset+0xa>
 800569c:	4770      	bx	lr
 800569e:	f803 1b01 	strb.w	r1, [r3], #1
 80056a2:	e7f9      	b.n	8005698 <memset+0x4>

080056a4 <__cvt>:
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056aa:	461e      	mov	r6, r3
 80056ac:	bfbb      	ittet	lt
 80056ae:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80056b2:	461e      	movlt	r6, r3
 80056b4:	2300      	movge	r3, #0
 80056b6:	232d      	movlt	r3, #45	; 0x2d
 80056b8:	b088      	sub	sp, #32
 80056ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80056bc:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 80056c0:	f027 0720 	bic.w	r7, r7, #32
 80056c4:	2f46      	cmp	r7, #70	; 0x46
 80056c6:	4614      	mov	r4, r2
 80056c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80056ca:	700b      	strb	r3, [r1, #0]
 80056cc:	d004      	beq.n	80056d8 <__cvt+0x34>
 80056ce:	2f45      	cmp	r7, #69	; 0x45
 80056d0:	d100      	bne.n	80056d4 <__cvt+0x30>
 80056d2:	3501      	adds	r5, #1
 80056d4:	2302      	movs	r3, #2
 80056d6:	e000      	b.n	80056da <__cvt+0x36>
 80056d8:	2303      	movs	r3, #3
 80056da:	aa07      	add	r2, sp, #28
 80056dc:	9204      	str	r2, [sp, #16]
 80056de:	aa06      	add	r2, sp, #24
 80056e0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80056e4:	e9cd 3500 	strd	r3, r5, [sp]
 80056e8:	4622      	mov	r2, r4
 80056ea:	4633      	mov	r3, r6
 80056ec:	f000 fcd8 	bl	80060a0 <_dtoa_r>
 80056f0:	2f47      	cmp	r7, #71	; 0x47
 80056f2:	4680      	mov	r8, r0
 80056f4:	d102      	bne.n	80056fc <__cvt+0x58>
 80056f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80056f8:	07db      	lsls	r3, r3, #31
 80056fa:	d526      	bpl.n	800574a <__cvt+0xa6>
 80056fc:	2f46      	cmp	r7, #70	; 0x46
 80056fe:	eb08 0905 	add.w	r9, r8, r5
 8005702:	d111      	bne.n	8005728 <__cvt+0x84>
 8005704:	f898 3000 	ldrb.w	r3, [r8]
 8005708:	2b30      	cmp	r3, #48	; 0x30
 800570a:	d10a      	bne.n	8005722 <__cvt+0x7e>
 800570c:	2200      	movs	r2, #0
 800570e:	2300      	movs	r3, #0
 8005710:	4620      	mov	r0, r4
 8005712:	4631      	mov	r1, r6
 8005714:	f7fb f948 	bl	80009a8 <__aeabi_dcmpeq>
 8005718:	b918      	cbnz	r0, 8005722 <__cvt+0x7e>
 800571a:	f1c5 0501 	rsb	r5, r5, #1
 800571e:	f8ca 5000 	str.w	r5, [sl]
 8005722:	f8da 3000 	ldr.w	r3, [sl]
 8005726:	4499      	add	r9, r3
 8005728:	2200      	movs	r2, #0
 800572a:	2300      	movs	r3, #0
 800572c:	4620      	mov	r0, r4
 800572e:	4631      	mov	r1, r6
 8005730:	f7fb f93a 	bl	80009a8 <__aeabi_dcmpeq>
 8005734:	b938      	cbnz	r0, 8005746 <__cvt+0xa2>
 8005736:	2230      	movs	r2, #48	; 0x30
 8005738:	9b07      	ldr	r3, [sp, #28]
 800573a:	454b      	cmp	r3, r9
 800573c:	d205      	bcs.n	800574a <__cvt+0xa6>
 800573e:	1c59      	adds	r1, r3, #1
 8005740:	9107      	str	r1, [sp, #28]
 8005742:	701a      	strb	r2, [r3, #0]
 8005744:	e7f8      	b.n	8005738 <__cvt+0x94>
 8005746:	f8cd 901c 	str.w	r9, [sp, #28]
 800574a:	4640      	mov	r0, r8
 800574c:	9b07      	ldr	r3, [sp, #28]
 800574e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005750:	eba3 0308 	sub.w	r3, r3, r8
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	b008      	add	sp, #32
 8005758:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800575c <__exponent>:
 800575c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800575e:	2900      	cmp	r1, #0
 8005760:	bfb4      	ite	lt
 8005762:	232d      	movlt	r3, #45	; 0x2d
 8005764:	232b      	movge	r3, #43	; 0x2b
 8005766:	4604      	mov	r4, r0
 8005768:	bfb8      	it	lt
 800576a:	4249      	neglt	r1, r1
 800576c:	2909      	cmp	r1, #9
 800576e:	f804 2b02 	strb.w	r2, [r4], #2
 8005772:	7043      	strb	r3, [r0, #1]
 8005774:	dd21      	ble.n	80057ba <__exponent+0x5e>
 8005776:	f10d 0307 	add.w	r3, sp, #7
 800577a:	461f      	mov	r7, r3
 800577c:	260a      	movs	r6, #10
 800577e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005782:	fb06 1115 	mls	r1, r6, r5, r1
 8005786:	2d09      	cmp	r5, #9
 8005788:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800578c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005790:	f103 32ff 	add.w	r2, r3, #4294967295
 8005794:	4629      	mov	r1, r5
 8005796:	dc09      	bgt.n	80057ac <__exponent+0x50>
 8005798:	3130      	adds	r1, #48	; 0x30
 800579a:	3b02      	subs	r3, #2
 800579c:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057a0:	42bb      	cmp	r3, r7
 80057a2:	4622      	mov	r2, r4
 80057a4:	d304      	bcc.n	80057b0 <__exponent+0x54>
 80057a6:	1a10      	subs	r0, r2, r0
 80057a8:	b003      	add	sp, #12
 80057aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ac:	4613      	mov	r3, r2
 80057ae:	e7e6      	b.n	800577e <__exponent+0x22>
 80057b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057b4:	f804 2b01 	strb.w	r2, [r4], #1
 80057b8:	e7f2      	b.n	80057a0 <__exponent+0x44>
 80057ba:	2330      	movs	r3, #48	; 0x30
 80057bc:	4419      	add	r1, r3
 80057be:	7083      	strb	r3, [r0, #2]
 80057c0:	1d02      	adds	r2, r0, #4
 80057c2:	70c1      	strb	r1, [r0, #3]
 80057c4:	e7ef      	b.n	80057a6 <__exponent+0x4a>
	...

080057c8 <_printf_float>:
 80057c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057cc:	b091      	sub	sp, #68	; 0x44
 80057ce:	460c      	mov	r4, r1
 80057d0:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 80057d2:	4693      	mov	fp, r2
 80057d4:	461e      	mov	r6, r3
 80057d6:	4605      	mov	r5, r0
 80057d8:	f001 fa16 	bl	8006c08 <_localeconv_r>
 80057dc:	6803      	ldr	r3, [r0, #0]
 80057de:	4618      	mov	r0, r3
 80057e0:	9309      	str	r3, [sp, #36]	; 0x24
 80057e2:	f7fa fcb5 	bl	8000150 <strlen>
 80057e6:	2300      	movs	r3, #0
 80057e8:	930e      	str	r3, [sp, #56]	; 0x38
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	900a      	str	r0, [sp, #40]	; 0x28
 80057ee:	3307      	adds	r3, #7
 80057f0:	f023 0307 	bic.w	r3, r3, #7
 80057f4:	f103 0208 	add.w	r2, r3, #8
 80057f8:	f894 8018 	ldrb.w	r8, [r4, #24]
 80057fc:	f8d4 a000 	ldr.w	sl, [r4]
 8005800:	603a      	str	r2, [r7, #0]
 8005802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005806:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800580a:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 800580e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005812:	930b      	str	r3, [sp, #44]	; 0x2c
 8005814:	f04f 32ff 	mov.w	r2, #4294967295
 8005818:	4ba6      	ldr	r3, [pc, #664]	; (8005ab4 <_printf_float+0x2ec>)
 800581a:	4638      	mov	r0, r7
 800581c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800581e:	f7fb f8f5 	bl	8000a0c <__aeabi_dcmpun>
 8005822:	bb68      	cbnz	r0, 8005880 <_printf_float+0xb8>
 8005824:	f04f 32ff 	mov.w	r2, #4294967295
 8005828:	4ba2      	ldr	r3, [pc, #648]	; (8005ab4 <_printf_float+0x2ec>)
 800582a:	4638      	mov	r0, r7
 800582c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800582e:	f7fb f8cf 	bl	80009d0 <__aeabi_dcmple>
 8005832:	bb28      	cbnz	r0, 8005880 <_printf_float+0xb8>
 8005834:	2200      	movs	r2, #0
 8005836:	2300      	movs	r3, #0
 8005838:	4638      	mov	r0, r7
 800583a:	4649      	mov	r1, r9
 800583c:	f7fb f8be 	bl	80009bc <__aeabi_dcmplt>
 8005840:	b110      	cbz	r0, 8005848 <_printf_float+0x80>
 8005842:	232d      	movs	r3, #45	; 0x2d
 8005844:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005848:	4f9b      	ldr	r7, [pc, #620]	; (8005ab8 <_printf_float+0x2f0>)
 800584a:	4b9c      	ldr	r3, [pc, #624]	; (8005abc <_printf_float+0x2f4>)
 800584c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005850:	bf98      	it	ls
 8005852:	461f      	movls	r7, r3
 8005854:	2303      	movs	r3, #3
 8005856:	f04f 0900 	mov.w	r9, #0
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	f02a 0304 	bic.w	r3, sl, #4
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	9600      	str	r6, [sp, #0]
 8005864:	465b      	mov	r3, fp
 8005866:	aa0f      	add	r2, sp, #60	; 0x3c
 8005868:	4621      	mov	r1, r4
 800586a:	4628      	mov	r0, r5
 800586c:	f000 f9e2 	bl	8005c34 <_printf_common>
 8005870:	3001      	adds	r0, #1
 8005872:	f040 8090 	bne.w	8005996 <_printf_float+0x1ce>
 8005876:	f04f 30ff 	mov.w	r0, #4294967295
 800587a:	b011      	add	sp, #68	; 0x44
 800587c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005880:	463a      	mov	r2, r7
 8005882:	464b      	mov	r3, r9
 8005884:	4638      	mov	r0, r7
 8005886:	4649      	mov	r1, r9
 8005888:	f7fb f8c0 	bl	8000a0c <__aeabi_dcmpun>
 800588c:	b110      	cbz	r0, 8005894 <_printf_float+0xcc>
 800588e:	4f8c      	ldr	r7, [pc, #560]	; (8005ac0 <_printf_float+0x2f8>)
 8005890:	4b8c      	ldr	r3, [pc, #560]	; (8005ac4 <_printf_float+0x2fc>)
 8005892:	e7db      	b.n	800584c <_printf_float+0x84>
 8005894:	6863      	ldr	r3, [r4, #4]
 8005896:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 800589a:	1c59      	adds	r1, r3, #1
 800589c:	a80d      	add	r0, sp, #52	; 0x34
 800589e:	a90e      	add	r1, sp, #56	; 0x38
 80058a0:	d140      	bne.n	8005924 <_printf_float+0x15c>
 80058a2:	2306      	movs	r3, #6
 80058a4:	6063      	str	r3, [r4, #4]
 80058a6:	f04f 0c00 	mov.w	ip, #0
 80058aa:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 80058ae:	e9cd 2301 	strd	r2, r3, [sp, #4]
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	6022      	str	r2, [r4, #0]
 80058b6:	e9cd 0803 	strd	r0, r8, [sp, #12]
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	463a      	mov	r2, r7
 80058be:	464b      	mov	r3, r9
 80058c0:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 80058c4:	4628      	mov	r0, r5
 80058c6:	f7ff feed 	bl	80056a4 <__cvt>
 80058ca:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 80058ce:	2b47      	cmp	r3, #71	; 0x47
 80058d0:	4607      	mov	r7, r0
 80058d2:	d109      	bne.n	80058e8 <_printf_float+0x120>
 80058d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058d6:	1cd8      	adds	r0, r3, #3
 80058d8:	db02      	blt.n	80058e0 <_printf_float+0x118>
 80058da:	6862      	ldr	r2, [r4, #4]
 80058dc:	4293      	cmp	r3, r2
 80058de:	dd47      	ble.n	8005970 <_printf_float+0x1a8>
 80058e0:	f1a8 0802 	sub.w	r8, r8, #2
 80058e4:	fa5f f888 	uxtb.w	r8, r8
 80058e8:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80058ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80058ee:	d824      	bhi.n	800593a <_printf_float+0x172>
 80058f0:	3901      	subs	r1, #1
 80058f2:	4642      	mov	r2, r8
 80058f4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80058f8:	910d      	str	r1, [sp, #52]	; 0x34
 80058fa:	f7ff ff2f 	bl	800575c <__exponent>
 80058fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005900:	4681      	mov	r9, r0
 8005902:	1813      	adds	r3, r2, r0
 8005904:	2a01      	cmp	r2, #1
 8005906:	6123      	str	r3, [r4, #16]
 8005908:	dc02      	bgt.n	8005910 <_printf_float+0x148>
 800590a:	6822      	ldr	r2, [r4, #0]
 800590c:	07d1      	lsls	r1, r2, #31
 800590e:	d501      	bpl.n	8005914 <_printf_float+0x14c>
 8005910:	3301      	adds	r3, #1
 8005912:	6123      	str	r3, [r4, #16]
 8005914:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0a2      	beq.n	8005862 <_printf_float+0x9a>
 800591c:	232d      	movs	r3, #45	; 0x2d
 800591e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005922:	e79e      	b.n	8005862 <_printf_float+0x9a>
 8005924:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005928:	f000 816e 	beq.w	8005c08 <_printf_float+0x440>
 800592c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005930:	d1b9      	bne.n	80058a6 <_printf_float+0xde>
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1b7      	bne.n	80058a6 <_printf_float+0xde>
 8005936:	2301      	movs	r3, #1
 8005938:	e7b4      	b.n	80058a4 <_printf_float+0xdc>
 800593a:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 800593e:	d119      	bne.n	8005974 <_printf_float+0x1ac>
 8005940:	2900      	cmp	r1, #0
 8005942:	6863      	ldr	r3, [r4, #4]
 8005944:	dd0c      	ble.n	8005960 <_printf_float+0x198>
 8005946:	6121      	str	r1, [r4, #16]
 8005948:	b913      	cbnz	r3, 8005950 <_printf_float+0x188>
 800594a:	6822      	ldr	r2, [r4, #0]
 800594c:	07d2      	lsls	r2, r2, #31
 800594e:	d502      	bpl.n	8005956 <_printf_float+0x18e>
 8005950:	3301      	adds	r3, #1
 8005952:	440b      	add	r3, r1
 8005954:	6123      	str	r3, [r4, #16]
 8005956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005958:	f04f 0900 	mov.w	r9, #0
 800595c:	65a3      	str	r3, [r4, #88]	; 0x58
 800595e:	e7d9      	b.n	8005914 <_printf_float+0x14c>
 8005960:	b913      	cbnz	r3, 8005968 <_printf_float+0x1a0>
 8005962:	6822      	ldr	r2, [r4, #0]
 8005964:	07d0      	lsls	r0, r2, #31
 8005966:	d501      	bpl.n	800596c <_printf_float+0x1a4>
 8005968:	3302      	adds	r3, #2
 800596a:	e7f3      	b.n	8005954 <_printf_float+0x18c>
 800596c:	2301      	movs	r3, #1
 800596e:	e7f1      	b.n	8005954 <_printf_float+0x18c>
 8005970:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005974:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005978:	4293      	cmp	r3, r2
 800597a:	db05      	blt.n	8005988 <_printf_float+0x1c0>
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	6123      	str	r3, [r4, #16]
 8005980:	07d1      	lsls	r1, r2, #31
 8005982:	d5e8      	bpl.n	8005956 <_printf_float+0x18e>
 8005984:	3301      	adds	r3, #1
 8005986:	e7e5      	b.n	8005954 <_printf_float+0x18c>
 8005988:	2b00      	cmp	r3, #0
 800598a:	bfcc      	ite	gt
 800598c:	2301      	movgt	r3, #1
 800598e:	f1c3 0302 	rsble	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	e7de      	b.n	8005954 <_printf_float+0x18c>
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	055a      	lsls	r2, r3, #21
 800599a:	d407      	bmi.n	80059ac <_printf_float+0x1e4>
 800599c:	6923      	ldr	r3, [r4, #16]
 800599e:	463a      	mov	r2, r7
 80059a0:	4659      	mov	r1, fp
 80059a2:	4628      	mov	r0, r5
 80059a4:	47b0      	blx	r6
 80059a6:	3001      	adds	r0, #1
 80059a8:	d129      	bne.n	80059fe <_printf_float+0x236>
 80059aa:	e764      	b.n	8005876 <_printf_float+0xae>
 80059ac:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 80059b0:	f240 80d7 	bls.w	8005b62 <_printf_float+0x39a>
 80059b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059b8:	2200      	movs	r2, #0
 80059ba:	2300      	movs	r3, #0
 80059bc:	f7fa fff4 	bl	80009a8 <__aeabi_dcmpeq>
 80059c0:	b388      	cbz	r0, 8005a26 <_printf_float+0x25e>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4a40      	ldr	r2, [pc, #256]	; (8005ac8 <_printf_float+0x300>)
 80059c6:	4659      	mov	r1, fp
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b0      	blx	r6
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f af52 	beq.w	8005876 <_printf_float+0xae>
 80059d2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80059d6:	429a      	cmp	r2, r3
 80059d8:	db02      	blt.n	80059e0 <_printf_float+0x218>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	07d8      	lsls	r0, r3, #31
 80059de:	d50e      	bpl.n	80059fe <_printf_float+0x236>
 80059e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80059e4:	4659      	mov	r1, fp
 80059e6:	4628      	mov	r0, r5
 80059e8:	47b0      	blx	r6
 80059ea:	3001      	adds	r0, #1
 80059ec:	f43f af43 	beq.w	8005876 <_printf_float+0xae>
 80059f0:	2700      	movs	r7, #0
 80059f2:	f104 081a 	add.w	r8, r4, #26
 80059f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059f8:	3b01      	subs	r3, #1
 80059fa:	42bb      	cmp	r3, r7
 80059fc:	dc09      	bgt.n	8005a12 <_printf_float+0x24a>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	079f      	lsls	r7, r3, #30
 8005a02:	f100 80fd 	bmi.w	8005c00 <_printf_float+0x438>
 8005a06:	68e0      	ldr	r0, [r4, #12]
 8005a08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	bfb8      	it	lt
 8005a0e:	4618      	movlt	r0, r3
 8005a10:	e733      	b.n	800587a <_printf_float+0xb2>
 8005a12:	2301      	movs	r3, #1
 8005a14:	4642      	mov	r2, r8
 8005a16:	4659      	mov	r1, fp
 8005a18:	4628      	mov	r0, r5
 8005a1a:	47b0      	blx	r6
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	f43f af2a 	beq.w	8005876 <_printf_float+0xae>
 8005a22:	3701      	adds	r7, #1
 8005a24:	e7e7      	b.n	80059f6 <_printf_float+0x22e>
 8005a26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	dc2b      	bgt.n	8005a84 <_printf_float+0x2bc>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4a26      	ldr	r2, [pc, #152]	; (8005ac8 <_printf_float+0x300>)
 8005a30:	4659      	mov	r1, fp
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b0      	blx	r6
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af1d 	beq.w	8005876 <_printf_float+0xae>
 8005a3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a3e:	b923      	cbnz	r3, 8005a4a <_printf_float+0x282>
 8005a40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a42:	b913      	cbnz	r3, 8005a4a <_printf_float+0x282>
 8005a44:	6823      	ldr	r3, [r4, #0]
 8005a46:	07d9      	lsls	r1, r3, #31
 8005a48:	d5d9      	bpl.n	80059fe <_printf_float+0x236>
 8005a4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a4e:	4659      	mov	r1, fp
 8005a50:	4628      	mov	r0, r5
 8005a52:	47b0      	blx	r6
 8005a54:	3001      	adds	r0, #1
 8005a56:	f43f af0e 	beq.w	8005876 <_printf_float+0xae>
 8005a5a:	f04f 0800 	mov.w	r8, #0
 8005a5e:	f104 091a 	add.w	r9, r4, #26
 8005a62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005a64:	425b      	negs	r3, r3
 8005a66:	4543      	cmp	r3, r8
 8005a68:	dc01      	bgt.n	8005a6e <_printf_float+0x2a6>
 8005a6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005a6c:	e797      	b.n	800599e <_printf_float+0x1d6>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	464a      	mov	r2, r9
 8005a72:	4659      	mov	r1, fp
 8005a74:	4628      	mov	r0, r5
 8005a76:	47b0      	blx	r6
 8005a78:	3001      	adds	r0, #1
 8005a7a:	f43f aefc 	beq.w	8005876 <_printf_float+0xae>
 8005a7e:	f108 0801 	add.w	r8, r8, #1
 8005a82:	e7ee      	b.n	8005a62 <_printf_float+0x29a>
 8005a84:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005a86:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	bfa8      	it	ge
 8005a8c:	461a      	movge	r2, r3
 8005a8e:	2a00      	cmp	r2, #0
 8005a90:	4690      	mov	r8, r2
 8005a92:	dd07      	ble.n	8005aa4 <_printf_float+0x2dc>
 8005a94:	4613      	mov	r3, r2
 8005a96:	4659      	mov	r1, fp
 8005a98:	463a      	mov	r2, r7
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	47b0      	blx	r6
 8005a9e:	3001      	adds	r0, #1
 8005aa0:	f43f aee9 	beq.w	8005876 <_printf_float+0xae>
 8005aa4:	f104 031a 	add.w	r3, r4, #26
 8005aa8:	f04f 0a00 	mov.w	sl, #0
 8005aac:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005ab0:	930b      	str	r3, [sp, #44]	; 0x2c
 8005ab2:	e015      	b.n	8005ae0 <_printf_float+0x318>
 8005ab4:	7fefffff 	.word	0x7fefffff
 8005ab8:	08007f14 	.word	0x08007f14
 8005abc:	08007f10 	.word	0x08007f10
 8005ac0:	08007f1c 	.word	0x08007f1c
 8005ac4:	08007f18 	.word	0x08007f18
 8005ac8:	08007f20 	.word	0x08007f20
 8005acc:	2301      	movs	r3, #1
 8005ace:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ad0:	4659      	mov	r1, fp
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	47b0      	blx	r6
 8005ad6:	3001      	adds	r0, #1
 8005ad8:	f43f aecd 	beq.w	8005876 <_printf_float+0xae>
 8005adc:	f10a 0a01 	add.w	sl, sl, #1
 8005ae0:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005ae4:	eba9 0308 	sub.w	r3, r9, r8
 8005ae8:	4553      	cmp	r3, sl
 8005aea:	dcef      	bgt.n	8005acc <_printf_float+0x304>
 8005aec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005af0:	429a      	cmp	r2, r3
 8005af2:	444f      	add	r7, r9
 8005af4:	db14      	blt.n	8005b20 <_printf_float+0x358>
 8005af6:	6823      	ldr	r3, [r4, #0]
 8005af8:	07da      	lsls	r2, r3, #31
 8005afa:	d411      	bmi.n	8005b20 <_printf_float+0x358>
 8005afc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005afe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005b00:	eba3 0209 	sub.w	r2, r3, r9
 8005b04:	eba3 0901 	sub.w	r9, r3, r1
 8005b08:	4591      	cmp	r9, r2
 8005b0a:	bfa8      	it	ge
 8005b0c:	4691      	movge	r9, r2
 8005b0e:	f1b9 0f00 	cmp.w	r9, #0
 8005b12:	dc0d      	bgt.n	8005b30 <_printf_float+0x368>
 8005b14:	2700      	movs	r7, #0
 8005b16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b1a:	f104 081a 	add.w	r8, r4, #26
 8005b1e:	e018      	b.n	8005b52 <_printf_float+0x38a>
 8005b20:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b24:	4659      	mov	r1, fp
 8005b26:	4628      	mov	r0, r5
 8005b28:	47b0      	blx	r6
 8005b2a:	3001      	adds	r0, #1
 8005b2c:	d1e6      	bne.n	8005afc <_printf_float+0x334>
 8005b2e:	e6a2      	b.n	8005876 <_printf_float+0xae>
 8005b30:	464b      	mov	r3, r9
 8005b32:	463a      	mov	r2, r7
 8005b34:	4659      	mov	r1, fp
 8005b36:	4628      	mov	r0, r5
 8005b38:	47b0      	blx	r6
 8005b3a:	3001      	adds	r0, #1
 8005b3c:	d1ea      	bne.n	8005b14 <_printf_float+0x34c>
 8005b3e:	e69a      	b.n	8005876 <_printf_float+0xae>
 8005b40:	2301      	movs	r3, #1
 8005b42:	4642      	mov	r2, r8
 8005b44:	4659      	mov	r1, fp
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b0      	blx	r6
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	f43f ae93 	beq.w	8005876 <_printf_float+0xae>
 8005b50:	3701      	adds	r7, #1
 8005b52:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005b56:	1a9b      	subs	r3, r3, r2
 8005b58:	eba3 0309 	sub.w	r3, r3, r9
 8005b5c:	42bb      	cmp	r3, r7
 8005b5e:	dcef      	bgt.n	8005b40 <_printf_float+0x378>
 8005b60:	e74d      	b.n	80059fe <_printf_float+0x236>
 8005b62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b64:	2a01      	cmp	r2, #1
 8005b66:	dc01      	bgt.n	8005b6c <_printf_float+0x3a4>
 8005b68:	07db      	lsls	r3, r3, #31
 8005b6a:	d538      	bpl.n	8005bde <_printf_float+0x416>
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	463a      	mov	r2, r7
 8005b70:	4659      	mov	r1, fp
 8005b72:	4628      	mov	r0, r5
 8005b74:	47b0      	blx	r6
 8005b76:	3001      	adds	r0, #1
 8005b78:	f43f ae7d 	beq.w	8005876 <_printf_float+0xae>
 8005b7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b80:	4659      	mov	r1, fp
 8005b82:	4628      	mov	r0, r5
 8005b84:	47b0      	blx	r6
 8005b86:	3001      	adds	r0, #1
 8005b88:	f107 0701 	add.w	r7, r7, #1
 8005b8c:	f43f ae73 	beq.w	8005876 <_printf_float+0xae>
 8005b90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005b94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b96:	2200      	movs	r2, #0
 8005b98:	f103 38ff 	add.w	r8, r3, #4294967295
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f7fa ff03 	bl	80009a8 <__aeabi_dcmpeq>
 8005ba2:	b9c0      	cbnz	r0, 8005bd6 <_printf_float+0x40e>
 8005ba4:	4643      	mov	r3, r8
 8005ba6:	463a      	mov	r2, r7
 8005ba8:	4659      	mov	r1, fp
 8005baa:	4628      	mov	r0, r5
 8005bac:	47b0      	blx	r6
 8005bae:	3001      	adds	r0, #1
 8005bb0:	d10d      	bne.n	8005bce <_printf_float+0x406>
 8005bb2:	e660      	b.n	8005876 <_printf_float+0xae>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4642      	mov	r2, r8
 8005bb8:	4659      	mov	r1, fp
 8005bba:	4628      	mov	r0, r5
 8005bbc:	47b0      	blx	r6
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	f43f ae59 	beq.w	8005876 <_printf_float+0xae>
 8005bc4:	3701      	adds	r7, #1
 8005bc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	42bb      	cmp	r3, r7
 8005bcc:	dcf2      	bgt.n	8005bb4 <_printf_float+0x3ec>
 8005bce:	464b      	mov	r3, r9
 8005bd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005bd4:	e6e4      	b.n	80059a0 <_printf_float+0x1d8>
 8005bd6:	2700      	movs	r7, #0
 8005bd8:	f104 081a 	add.w	r8, r4, #26
 8005bdc:	e7f3      	b.n	8005bc6 <_printf_float+0x3fe>
 8005bde:	2301      	movs	r3, #1
 8005be0:	e7e1      	b.n	8005ba6 <_printf_float+0x3de>
 8005be2:	2301      	movs	r3, #1
 8005be4:	4642      	mov	r2, r8
 8005be6:	4659      	mov	r1, fp
 8005be8:	4628      	mov	r0, r5
 8005bea:	47b0      	blx	r6
 8005bec:	3001      	adds	r0, #1
 8005bee:	f43f ae42 	beq.w	8005876 <_printf_float+0xae>
 8005bf2:	3701      	adds	r7, #1
 8005bf4:	68e3      	ldr	r3, [r4, #12]
 8005bf6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005bf8:	1a9b      	subs	r3, r3, r2
 8005bfa:	42bb      	cmp	r3, r7
 8005bfc:	dcf1      	bgt.n	8005be2 <_printf_float+0x41a>
 8005bfe:	e702      	b.n	8005a06 <_printf_float+0x23e>
 8005c00:	2700      	movs	r7, #0
 8005c02:	f104 0819 	add.w	r8, r4, #25
 8005c06:	e7f5      	b.n	8005bf4 <_printf_float+0x42c>
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	f43f ae94 	beq.w	8005936 <_printf_float+0x16e>
 8005c0e:	f04f 0c00 	mov.w	ip, #0
 8005c12:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005c16:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8005c1a:	6022      	str	r2, [r4, #0]
 8005c1c:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005c20:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	463a      	mov	r2, r7
 8005c28:	464b      	mov	r3, r9
 8005c2a:	4628      	mov	r0, r5
 8005c2c:	f7ff fd3a 	bl	80056a4 <__cvt>
 8005c30:	4607      	mov	r7, r0
 8005c32:	e64f      	b.n	80058d4 <_printf_float+0x10c>

08005c34 <_printf_common>:
 8005c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c38:	4691      	mov	r9, r2
 8005c3a:	461f      	mov	r7, r3
 8005c3c:	688a      	ldr	r2, [r1, #8]
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	4606      	mov	r6, r0
 8005c42:	4293      	cmp	r3, r2
 8005c44:	bfb8      	it	lt
 8005c46:	4613      	movlt	r3, r2
 8005c48:	f8c9 3000 	str.w	r3, [r9]
 8005c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c50:	460c      	mov	r4, r1
 8005c52:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c56:	b112      	cbz	r2, 8005c5e <_printf_common+0x2a>
 8005c58:	3301      	adds	r3, #1
 8005c5a:	f8c9 3000 	str.w	r3, [r9]
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	0699      	lsls	r1, r3, #26
 8005c62:	bf42      	ittt	mi
 8005c64:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005c68:	3302      	addmi	r3, #2
 8005c6a:	f8c9 3000 	strmi.w	r3, [r9]
 8005c6e:	6825      	ldr	r5, [r4, #0]
 8005c70:	f015 0506 	ands.w	r5, r5, #6
 8005c74:	d107      	bne.n	8005c86 <_printf_common+0x52>
 8005c76:	f104 0a19 	add.w	sl, r4, #25
 8005c7a:	68e3      	ldr	r3, [r4, #12]
 8005c7c:	f8d9 2000 	ldr.w	r2, [r9]
 8005c80:	1a9b      	subs	r3, r3, r2
 8005c82:	42ab      	cmp	r3, r5
 8005c84:	dc29      	bgt.n	8005cda <_printf_common+0xa6>
 8005c86:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005c8a:	6822      	ldr	r2, [r4, #0]
 8005c8c:	3300      	adds	r3, #0
 8005c8e:	bf18      	it	ne
 8005c90:	2301      	movne	r3, #1
 8005c92:	0692      	lsls	r2, r2, #26
 8005c94:	d42e      	bmi.n	8005cf4 <_printf_common+0xc0>
 8005c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	47c0      	blx	r8
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d021      	beq.n	8005ce8 <_printf_common+0xb4>
 8005ca4:	6823      	ldr	r3, [r4, #0]
 8005ca6:	68e5      	ldr	r5, [r4, #12]
 8005ca8:	f003 0306 	and.w	r3, r3, #6
 8005cac:	2b04      	cmp	r3, #4
 8005cae:	bf18      	it	ne
 8005cb0:	2500      	movne	r5, #0
 8005cb2:	f8d9 2000 	ldr.w	r2, [r9]
 8005cb6:	f04f 0900 	mov.w	r9, #0
 8005cba:	bf08      	it	eq
 8005cbc:	1aad      	subeq	r5, r5, r2
 8005cbe:	68a3      	ldr	r3, [r4, #8]
 8005cc0:	6922      	ldr	r2, [r4, #16]
 8005cc2:	bf08      	it	eq
 8005cc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	bfc4      	itt	gt
 8005ccc:	1a9b      	subgt	r3, r3, r2
 8005cce:	18ed      	addgt	r5, r5, r3
 8005cd0:	341a      	adds	r4, #26
 8005cd2:	454d      	cmp	r5, r9
 8005cd4:	d11a      	bne.n	8005d0c <_printf_common+0xd8>
 8005cd6:	2000      	movs	r0, #0
 8005cd8:	e008      	b.n	8005cec <_printf_common+0xb8>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4652      	mov	r2, sl
 8005cde:	4639      	mov	r1, r7
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	47c0      	blx	r8
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d103      	bne.n	8005cf0 <_printf_common+0xbc>
 8005ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cf0:	3501      	adds	r5, #1
 8005cf2:	e7c2      	b.n	8005c7a <_printf_common+0x46>
 8005cf4:	2030      	movs	r0, #48	; 0x30
 8005cf6:	18e1      	adds	r1, r4, r3
 8005cf8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d02:	4422      	add	r2, r4
 8005d04:	3302      	adds	r3, #2
 8005d06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d0a:	e7c4      	b.n	8005c96 <_printf_common+0x62>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	4622      	mov	r2, r4
 8005d10:	4639      	mov	r1, r7
 8005d12:	4630      	mov	r0, r6
 8005d14:	47c0      	blx	r8
 8005d16:	3001      	adds	r0, #1
 8005d18:	d0e6      	beq.n	8005ce8 <_printf_common+0xb4>
 8005d1a:	f109 0901 	add.w	r9, r9, #1
 8005d1e:	e7d8      	b.n	8005cd2 <_printf_common+0x9e>

08005d20 <_printf_i>:
 8005d20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005d24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005d28:	460c      	mov	r4, r1
 8005d2a:	7e09      	ldrb	r1, [r1, #24]
 8005d2c:	b085      	sub	sp, #20
 8005d2e:	296e      	cmp	r1, #110	; 0x6e
 8005d30:	4617      	mov	r7, r2
 8005d32:	4606      	mov	r6, r0
 8005d34:	4698      	mov	r8, r3
 8005d36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d38:	f000 80b3 	beq.w	8005ea2 <_printf_i+0x182>
 8005d3c:	d822      	bhi.n	8005d84 <_printf_i+0x64>
 8005d3e:	2963      	cmp	r1, #99	; 0x63
 8005d40:	d036      	beq.n	8005db0 <_printf_i+0x90>
 8005d42:	d80a      	bhi.n	8005d5a <_printf_i+0x3a>
 8005d44:	2900      	cmp	r1, #0
 8005d46:	f000 80b9 	beq.w	8005ebc <_printf_i+0x19c>
 8005d4a:	2958      	cmp	r1, #88	; 0x58
 8005d4c:	f000 8083 	beq.w	8005e56 <_printf_i+0x136>
 8005d50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005d54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005d58:	e032      	b.n	8005dc0 <_printf_i+0xa0>
 8005d5a:	2964      	cmp	r1, #100	; 0x64
 8005d5c:	d001      	beq.n	8005d62 <_printf_i+0x42>
 8005d5e:	2969      	cmp	r1, #105	; 0x69
 8005d60:	d1f6      	bne.n	8005d50 <_printf_i+0x30>
 8005d62:	6820      	ldr	r0, [r4, #0]
 8005d64:	6813      	ldr	r3, [r2, #0]
 8005d66:	0605      	lsls	r5, r0, #24
 8005d68:	f103 0104 	add.w	r1, r3, #4
 8005d6c:	d52a      	bpl.n	8005dc4 <_printf_i+0xa4>
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	6011      	str	r1, [r2, #0]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	da03      	bge.n	8005d7e <_printf_i+0x5e>
 8005d76:	222d      	movs	r2, #45	; 0x2d
 8005d78:	425b      	negs	r3, r3
 8005d7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005d7e:	486f      	ldr	r0, [pc, #444]	; (8005f3c <_printf_i+0x21c>)
 8005d80:	220a      	movs	r2, #10
 8005d82:	e039      	b.n	8005df8 <_printf_i+0xd8>
 8005d84:	2973      	cmp	r1, #115	; 0x73
 8005d86:	f000 809d 	beq.w	8005ec4 <_printf_i+0x1a4>
 8005d8a:	d808      	bhi.n	8005d9e <_printf_i+0x7e>
 8005d8c:	296f      	cmp	r1, #111	; 0x6f
 8005d8e:	d020      	beq.n	8005dd2 <_printf_i+0xb2>
 8005d90:	2970      	cmp	r1, #112	; 0x70
 8005d92:	d1dd      	bne.n	8005d50 <_printf_i+0x30>
 8005d94:	6823      	ldr	r3, [r4, #0]
 8005d96:	f043 0320 	orr.w	r3, r3, #32
 8005d9a:	6023      	str	r3, [r4, #0]
 8005d9c:	e003      	b.n	8005da6 <_printf_i+0x86>
 8005d9e:	2975      	cmp	r1, #117	; 0x75
 8005da0:	d017      	beq.n	8005dd2 <_printf_i+0xb2>
 8005da2:	2978      	cmp	r1, #120	; 0x78
 8005da4:	d1d4      	bne.n	8005d50 <_printf_i+0x30>
 8005da6:	2378      	movs	r3, #120	; 0x78
 8005da8:	4865      	ldr	r0, [pc, #404]	; (8005f40 <_printf_i+0x220>)
 8005daa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005dae:	e055      	b.n	8005e5c <_printf_i+0x13c>
 8005db0:	6813      	ldr	r3, [r2, #0]
 8005db2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005db6:	1d19      	adds	r1, r3, #4
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	6011      	str	r1, [r2, #0]
 8005dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e08c      	b.n	8005ede <_printf_i+0x1be>
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005dca:	6011      	str	r1, [r2, #0]
 8005dcc:	bf18      	it	ne
 8005dce:	b21b      	sxthne	r3, r3
 8005dd0:	e7cf      	b.n	8005d72 <_printf_i+0x52>
 8005dd2:	6813      	ldr	r3, [r2, #0]
 8005dd4:	6825      	ldr	r5, [r4, #0]
 8005dd6:	1d18      	adds	r0, r3, #4
 8005dd8:	6010      	str	r0, [r2, #0]
 8005dda:	0628      	lsls	r0, r5, #24
 8005ddc:	d501      	bpl.n	8005de2 <_printf_i+0xc2>
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	e002      	b.n	8005de8 <_printf_i+0xc8>
 8005de2:	0668      	lsls	r0, r5, #25
 8005de4:	d5fb      	bpl.n	8005dde <_printf_i+0xbe>
 8005de6:	881b      	ldrh	r3, [r3, #0]
 8005de8:	296f      	cmp	r1, #111	; 0x6f
 8005dea:	bf14      	ite	ne
 8005dec:	220a      	movne	r2, #10
 8005dee:	2208      	moveq	r2, #8
 8005df0:	4852      	ldr	r0, [pc, #328]	; (8005f3c <_printf_i+0x21c>)
 8005df2:	2100      	movs	r1, #0
 8005df4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005df8:	6865      	ldr	r5, [r4, #4]
 8005dfa:	2d00      	cmp	r5, #0
 8005dfc:	60a5      	str	r5, [r4, #8]
 8005dfe:	f2c0 8095 	blt.w	8005f2c <_printf_i+0x20c>
 8005e02:	6821      	ldr	r1, [r4, #0]
 8005e04:	f021 0104 	bic.w	r1, r1, #4
 8005e08:	6021      	str	r1, [r4, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d13d      	bne.n	8005e8a <_printf_i+0x16a>
 8005e0e:	2d00      	cmp	r5, #0
 8005e10:	f040 808e 	bne.w	8005f30 <_printf_i+0x210>
 8005e14:	4665      	mov	r5, ip
 8005e16:	2a08      	cmp	r2, #8
 8005e18:	d10b      	bne.n	8005e32 <_printf_i+0x112>
 8005e1a:	6823      	ldr	r3, [r4, #0]
 8005e1c:	07db      	lsls	r3, r3, #31
 8005e1e:	d508      	bpl.n	8005e32 <_printf_i+0x112>
 8005e20:	6923      	ldr	r3, [r4, #16]
 8005e22:	6862      	ldr	r2, [r4, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	bfde      	ittt	le
 8005e28:	2330      	movle	r3, #48	; 0x30
 8005e2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005e2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005e32:	ebac 0305 	sub.w	r3, ip, r5
 8005e36:	6123      	str	r3, [r4, #16]
 8005e38:	f8cd 8000 	str.w	r8, [sp]
 8005e3c:	463b      	mov	r3, r7
 8005e3e:	aa03      	add	r2, sp, #12
 8005e40:	4621      	mov	r1, r4
 8005e42:	4630      	mov	r0, r6
 8005e44:	f7ff fef6 	bl	8005c34 <_printf_common>
 8005e48:	3001      	adds	r0, #1
 8005e4a:	d14d      	bne.n	8005ee8 <_printf_i+0x1c8>
 8005e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e50:	b005      	add	sp, #20
 8005e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e56:	4839      	ldr	r0, [pc, #228]	; (8005f3c <_printf_i+0x21c>)
 8005e58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005e5c:	6813      	ldr	r3, [r2, #0]
 8005e5e:	6821      	ldr	r1, [r4, #0]
 8005e60:	1d1d      	adds	r5, r3, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6015      	str	r5, [r2, #0]
 8005e66:	060a      	lsls	r2, r1, #24
 8005e68:	d50b      	bpl.n	8005e82 <_printf_i+0x162>
 8005e6a:	07ca      	lsls	r2, r1, #31
 8005e6c:	bf44      	itt	mi
 8005e6e:	f041 0120 	orrmi.w	r1, r1, #32
 8005e72:	6021      	strmi	r1, [r4, #0]
 8005e74:	b91b      	cbnz	r3, 8005e7e <_printf_i+0x15e>
 8005e76:	6822      	ldr	r2, [r4, #0]
 8005e78:	f022 0220 	bic.w	r2, r2, #32
 8005e7c:	6022      	str	r2, [r4, #0]
 8005e7e:	2210      	movs	r2, #16
 8005e80:	e7b7      	b.n	8005df2 <_printf_i+0xd2>
 8005e82:	064d      	lsls	r5, r1, #25
 8005e84:	bf48      	it	mi
 8005e86:	b29b      	uxthmi	r3, r3
 8005e88:	e7ef      	b.n	8005e6a <_printf_i+0x14a>
 8005e8a:	4665      	mov	r5, ip
 8005e8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e90:	fb02 3311 	mls	r3, r2, r1, r3
 8005e94:	5cc3      	ldrb	r3, [r0, r3]
 8005e96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	2900      	cmp	r1, #0
 8005e9e:	d1f5      	bne.n	8005e8c <_printf_i+0x16c>
 8005ea0:	e7b9      	b.n	8005e16 <_printf_i+0xf6>
 8005ea2:	6813      	ldr	r3, [r2, #0]
 8005ea4:	6825      	ldr	r5, [r4, #0]
 8005ea6:	1d18      	adds	r0, r3, #4
 8005ea8:	6961      	ldr	r1, [r4, #20]
 8005eaa:	6010      	str	r0, [r2, #0]
 8005eac:	0628      	lsls	r0, r5, #24
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	d501      	bpl.n	8005eb6 <_printf_i+0x196>
 8005eb2:	6019      	str	r1, [r3, #0]
 8005eb4:	e002      	b.n	8005ebc <_printf_i+0x19c>
 8005eb6:	066a      	lsls	r2, r5, #25
 8005eb8:	d5fb      	bpl.n	8005eb2 <_printf_i+0x192>
 8005eba:	8019      	strh	r1, [r3, #0]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	4665      	mov	r5, ip
 8005ec0:	6123      	str	r3, [r4, #16]
 8005ec2:	e7b9      	b.n	8005e38 <_printf_i+0x118>
 8005ec4:	6813      	ldr	r3, [r2, #0]
 8005ec6:	1d19      	adds	r1, r3, #4
 8005ec8:	6011      	str	r1, [r2, #0]
 8005eca:	681d      	ldr	r5, [r3, #0]
 8005ecc:	6862      	ldr	r2, [r4, #4]
 8005ece:	2100      	movs	r1, #0
 8005ed0:	4628      	mov	r0, r5
 8005ed2:	f000 feaf 	bl	8006c34 <memchr>
 8005ed6:	b108      	cbz	r0, 8005edc <_printf_i+0x1bc>
 8005ed8:	1b40      	subs	r0, r0, r5
 8005eda:	6060      	str	r0, [r4, #4]
 8005edc:	6863      	ldr	r3, [r4, #4]
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ee6:	e7a7      	b.n	8005e38 <_printf_i+0x118>
 8005ee8:	6923      	ldr	r3, [r4, #16]
 8005eea:	462a      	mov	r2, r5
 8005eec:	4639      	mov	r1, r7
 8005eee:	4630      	mov	r0, r6
 8005ef0:	47c0      	blx	r8
 8005ef2:	3001      	adds	r0, #1
 8005ef4:	d0aa      	beq.n	8005e4c <_printf_i+0x12c>
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	079b      	lsls	r3, r3, #30
 8005efa:	d413      	bmi.n	8005f24 <_printf_i+0x204>
 8005efc:	68e0      	ldr	r0, [r4, #12]
 8005efe:	9b03      	ldr	r3, [sp, #12]
 8005f00:	4298      	cmp	r0, r3
 8005f02:	bfb8      	it	lt
 8005f04:	4618      	movlt	r0, r3
 8005f06:	e7a3      	b.n	8005e50 <_printf_i+0x130>
 8005f08:	2301      	movs	r3, #1
 8005f0a:	464a      	mov	r2, r9
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	4630      	mov	r0, r6
 8005f10:	47c0      	blx	r8
 8005f12:	3001      	adds	r0, #1
 8005f14:	d09a      	beq.n	8005e4c <_printf_i+0x12c>
 8005f16:	3501      	adds	r5, #1
 8005f18:	68e3      	ldr	r3, [r4, #12]
 8005f1a:	9a03      	ldr	r2, [sp, #12]
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	42ab      	cmp	r3, r5
 8005f20:	dcf2      	bgt.n	8005f08 <_printf_i+0x1e8>
 8005f22:	e7eb      	b.n	8005efc <_printf_i+0x1dc>
 8005f24:	2500      	movs	r5, #0
 8005f26:	f104 0919 	add.w	r9, r4, #25
 8005f2a:	e7f5      	b.n	8005f18 <_printf_i+0x1f8>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1ac      	bne.n	8005e8a <_printf_i+0x16a>
 8005f30:	7803      	ldrb	r3, [r0, #0]
 8005f32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f3a:	e76c      	b.n	8005e16 <_printf_i+0xf6>
 8005f3c:	08007f22 	.word	0x08007f22
 8005f40:	08007f33 	.word	0x08007f33

08005f44 <siprintf>:
 8005f44:	b40e      	push	{r1, r2, r3}
 8005f46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f4a:	b500      	push	{lr}
 8005f4c:	b09c      	sub	sp, #112	; 0x70
 8005f4e:	ab1d      	add	r3, sp, #116	; 0x74
 8005f50:	9002      	str	r0, [sp, #8]
 8005f52:	9006      	str	r0, [sp, #24]
 8005f54:	9107      	str	r1, [sp, #28]
 8005f56:	9104      	str	r1, [sp, #16]
 8005f58:	4808      	ldr	r0, [pc, #32]	; (8005f7c <siprintf+0x38>)
 8005f5a:	4909      	ldr	r1, [pc, #36]	; (8005f80 <siprintf+0x3c>)
 8005f5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f60:	9105      	str	r1, [sp, #20]
 8005f62:	6800      	ldr	r0, [r0, #0]
 8005f64:	a902      	add	r1, sp, #8
 8005f66:	9301      	str	r3, [sp, #4]
 8005f68:	f001 fa68 	bl	800743c <_svfiprintf_r>
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	9b02      	ldr	r3, [sp, #8]
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	b01c      	add	sp, #112	; 0x70
 8005f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f78:	b003      	add	sp, #12
 8005f7a:	4770      	bx	lr
 8005f7c:	20000014 	.word	0x20000014
 8005f80:	ffff0208 	.word	0xffff0208

08005f84 <quorem>:
 8005f84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f88:	6903      	ldr	r3, [r0, #16]
 8005f8a:	690c      	ldr	r4, [r1, #16]
 8005f8c:	4680      	mov	r8, r0
 8005f8e:	42a3      	cmp	r3, r4
 8005f90:	f2c0 8084 	blt.w	800609c <quorem+0x118>
 8005f94:	3c01      	subs	r4, #1
 8005f96:	f101 0714 	add.w	r7, r1, #20
 8005f9a:	f100 0614 	add.w	r6, r0, #20
 8005f9e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005fa2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005fa6:	3501      	adds	r5, #1
 8005fa8:	fbb0 f5f5 	udiv	r5, r0, r5
 8005fac:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005fb0:	eb06 030c 	add.w	r3, r6, ip
 8005fb4:	eb07 090c 	add.w	r9, r7, ip
 8005fb8:	9301      	str	r3, [sp, #4]
 8005fba:	b39d      	cbz	r5, 8006024 <quorem+0xa0>
 8005fbc:	f04f 0a00 	mov.w	sl, #0
 8005fc0:	4638      	mov	r0, r7
 8005fc2:	46b6      	mov	lr, r6
 8005fc4:	46d3      	mov	fp, sl
 8005fc6:	f850 2b04 	ldr.w	r2, [r0], #4
 8005fca:	b293      	uxth	r3, r2
 8005fcc:	fb05 a303 	mla	r3, r5, r3, sl
 8005fd0:	0c12      	lsrs	r2, r2, #16
 8005fd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005fd6:	fb05 a202 	mla	r2, r5, r2, sl
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	ebab 0303 	sub.w	r3, fp, r3
 8005fe0:	f8de b000 	ldr.w	fp, [lr]
 8005fe4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005fe8:	fa1f fb8b 	uxth.w	fp, fp
 8005fec:	445b      	add	r3, fp
 8005fee:	fa1f fb82 	uxth.w	fp, r2
 8005ff2:	f8de 2000 	ldr.w	r2, [lr]
 8005ff6:	4581      	cmp	r9, r0
 8005ff8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005ffc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006000:	b29b      	uxth	r3, r3
 8006002:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006006:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800600a:	f84e 3b04 	str.w	r3, [lr], #4
 800600e:	d2da      	bcs.n	8005fc6 <quorem+0x42>
 8006010:	f856 300c 	ldr.w	r3, [r6, ip]
 8006014:	b933      	cbnz	r3, 8006024 <quorem+0xa0>
 8006016:	9b01      	ldr	r3, [sp, #4]
 8006018:	3b04      	subs	r3, #4
 800601a:	429e      	cmp	r6, r3
 800601c:	461a      	mov	r2, r3
 800601e:	d331      	bcc.n	8006084 <quorem+0x100>
 8006020:	f8c8 4010 	str.w	r4, [r8, #16]
 8006024:	4640      	mov	r0, r8
 8006026:	f001 f833 	bl	8007090 <__mcmp>
 800602a:	2800      	cmp	r0, #0
 800602c:	db26      	blt.n	800607c <quorem+0xf8>
 800602e:	4630      	mov	r0, r6
 8006030:	f04f 0c00 	mov.w	ip, #0
 8006034:	3501      	adds	r5, #1
 8006036:	f857 1b04 	ldr.w	r1, [r7], #4
 800603a:	f8d0 e000 	ldr.w	lr, [r0]
 800603e:	b28b      	uxth	r3, r1
 8006040:	ebac 0303 	sub.w	r3, ip, r3
 8006044:	fa1f f28e 	uxth.w	r2, lr
 8006048:	4413      	add	r3, r2
 800604a:	0c0a      	lsrs	r2, r1, #16
 800604c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006050:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006054:	b29b      	uxth	r3, r3
 8006056:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800605a:	45b9      	cmp	r9, r7
 800605c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006060:	f840 3b04 	str.w	r3, [r0], #4
 8006064:	d2e7      	bcs.n	8006036 <quorem+0xb2>
 8006066:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800606a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800606e:	b92a      	cbnz	r2, 800607c <quorem+0xf8>
 8006070:	3b04      	subs	r3, #4
 8006072:	429e      	cmp	r6, r3
 8006074:	461a      	mov	r2, r3
 8006076:	d30b      	bcc.n	8006090 <quorem+0x10c>
 8006078:	f8c8 4010 	str.w	r4, [r8, #16]
 800607c:	4628      	mov	r0, r5
 800607e:	b003      	add	sp, #12
 8006080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006084:	6812      	ldr	r2, [r2, #0]
 8006086:	3b04      	subs	r3, #4
 8006088:	2a00      	cmp	r2, #0
 800608a:	d1c9      	bne.n	8006020 <quorem+0x9c>
 800608c:	3c01      	subs	r4, #1
 800608e:	e7c4      	b.n	800601a <quorem+0x96>
 8006090:	6812      	ldr	r2, [r2, #0]
 8006092:	3b04      	subs	r3, #4
 8006094:	2a00      	cmp	r2, #0
 8006096:	d1ef      	bne.n	8006078 <quorem+0xf4>
 8006098:	3c01      	subs	r4, #1
 800609a:	e7ea      	b.n	8006072 <quorem+0xee>
 800609c:	2000      	movs	r0, #0
 800609e:	e7ee      	b.n	800607e <quorem+0xfa>

080060a0 <_dtoa_r>:
 80060a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060a4:	4616      	mov	r6, r2
 80060a6:	461f      	mov	r7, r3
 80060a8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80060aa:	b095      	sub	sp, #84	; 0x54
 80060ac:	4604      	mov	r4, r0
 80060ae:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 80060b2:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80060b6:	b93d      	cbnz	r5, 80060c8 <_dtoa_r+0x28>
 80060b8:	2010      	movs	r0, #16
 80060ba:	f000 fdb3 	bl	8006c24 <malloc>
 80060be:	6260      	str	r0, [r4, #36]	; 0x24
 80060c0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80060c4:	6005      	str	r5, [r0, #0]
 80060c6:	60c5      	str	r5, [r0, #12]
 80060c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060ca:	6819      	ldr	r1, [r3, #0]
 80060cc:	b151      	cbz	r1, 80060e4 <_dtoa_r+0x44>
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	2301      	movs	r3, #1
 80060d2:	4093      	lsls	r3, r2
 80060d4:	604a      	str	r2, [r1, #4]
 80060d6:	608b      	str	r3, [r1, #8]
 80060d8:	4620      	mov	r0, r4
 80060da:	f000 fdf8 	bl	8006cce <_Bfree>
 80060de:	2200      	movs	r2, #0
 80060e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e2:	601a      	str	r2, [r3, #0]
 80060e4:	1e3b      	subs	r3, r7, #0
 80060e6:	bfaf      	iteee	ge
 80060e8:	2300      	movge	r3, #0
 80060ea:	2201      	movlt	r2, #1
 80060ec:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80060f0:	9303      	strlt	r3, [sp, #12]
 80060f2:	bfac      	ite	ge
 80060f4:	f8c8 3000 	strge.w	r3, [r8]
 80060f8:	f8c8 2000 	strlt.w	r2, [r8]
 80060fc:	4bae      	ldr	r3, [pc, #696]	; (80063b8 <_dtoa_r+0x318>)
 80060fe:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006102:	ea33 0308 	bics.w	r3, r3, r8
 8006106:	d11b      	bne.n	8006140 <_dtoa_r+0xa0>
 8006108:	f242 730f 	movw	r3, #9999	; 0x270f
 800610c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800610e:	6013      	str	r3, [r2, #0]
 8006110:	9b02      	ldr	r3, [sp, #8]
 8006112:	b923      	cbnz	r3, 800611e <_dtoa_r+0x7e>
 8006114:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006118:	2800      	cmp	r0, #0
 800611a:	f000 8545 	beq.w	8006ba8 <_dtoa_r+0xb08>
 800611e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006120:	b953      	cbnz	r3, 8006138 <_dtoa_r+0x98>
 8006122:	4ba6      	ldr	r3, [pc, #664]	; (80063bc <_dtoa_r+0x31c>)
 8006124:	e021      	b.n	800616a <_dtoa_r+0xca>
 8006126:	4ba6      	ldr	r3, [pc, #664]	; (80063c0 <_dtoa_r+0x320>)
 8006128:	9306      	str	r3, [sp, #24]
 800612a:	3308      	adds	r3, #8
 800612c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	9806      	ldr	r0, [sp, #24]
 8006132:	b015      	add	sp, #84	; 0x54
 8006134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006138:	4ba0      	ldr	r3, [pc, #640]	; (80063bc <_dtoa_r+0x31c>)
 800613a:	9306      	str	r3, [sp, #24]
 800613c:	3303      	adds	r3, #3
 800613e:	e7f5      	b.n	800612c <_dtoa_r+0x8c>
 8006140:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006144:	2200      	movs	r2, #0
 8006146:	2300      	movs	r3, #0
 8006148:	4630      	mov	r0, r6
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa fc2c 	bl	80009a8 <__aeabi_dcmpeq>
 8006150:	4682      	mov	sl, r0
 8006152:	b160      	cbz	r0, 800616e <_dtoa_r+0xce>
 8006154:	2301      	movs	r3, #1
 8006156:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 8520 	beq.w	8006ba2 <_dtoa_r+0xb02>
 8006162:	4b98      	ldr	r3, [pc, #608]	; (80063c4 <_dtoa_r+0x324>)
 8006164:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006166:	6013      	str	r3, [r2, #0]
 8006168:	3b01      	subs	r3, #1
 800616a:	9306      	str	r3, [sp, #24]
 800616c:	e7e0      	b.n	8006130 <_dtoa_r+0x90>
 800616e:	ab12      	add	r3, sp, #72	; 0x48
 8006170:	9301      	str	r3, [sp, #4]
 8006172:	ab13      	add	r3, sp, #76	; 0x4c
 8006174:	9300      	str	r3, [sp, #0]
 8006176:	4632      	mov	r2, r6
 8006178:	463b      	mov	r3, r7
 800617a:	4620      	mov	r0, r4
 800617c:	f001 f800 	bl	8007180 <__d2b>
 8006180:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006184:	4683      	mov	fp, r0
 8006186:	2d00      	cmp	r5, #0
 8006188:	d07d      	beq.n	8006286 <_dtoa_r+0x1e6>
 800618a:	46b0      	mov	r8, r6
 800618c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006190:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 8006194:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 8006198:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800619c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80061a0:	2200      	movs	r2, #0
 80061a2:	4b89      	ldr	r3, [pc, #548]	; (80063c8 <_dtoa_r+0x328>)
 80061a4:	4640      	mov	r0, r8
 80061a6:	4649      	mov	r1, r9
 80061a8:	f7f9 ffde 	bl	8000168 <__aeabi_dsub>
 80061ac:	a37c      	add	r3, pc, #496	; (adr r3, 80063a0 <_dtoa_r+0x300>)
 80061ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b2:	f7fa f991 	bl	80004d8 <__aeabi_dmul>
 80061b6:	a37c      	add	r3, pc, #496	; (adr r3, 80063a8 <_dtoa_r+0x308>)
 80061b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061bc:	f7f9 ffd6 	bl	800016c <__adddf3>
 80061c0:	4606      	mov	r6, r0
 80061c2:	4628      	mov	r0, r5
 80061c4:	460f      	mov	r7, r1
 80061c6:	f7fa f91d 	bl	8000404 <__aeabi_i2d>
 80061ca:	a379      	add	r3, pc, #484	; (adr r3, 80063b0 <_dtoa_r+0x310>)
 80061cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061d0:	f7fa f982 	bl	80004d8 <__aeabi_dmul>
 80061d4:	4602      	mov	r2, r0
 80061d6:	460b      	mov	r3, r1
 80061d8:	4630      	mov	r0, r6
 80061da:	4639      	mov	r1, r7
 80061dc:	f7f9 ffc6 	bl	800016c <__adddf3>
 80061e0:	4606      	mov	r6, r0
 80061e2:	460f      	mov	r7, r1
 80061e4:	f7fa fc28 	bl	8000a38 <__aeabi_d2iz>
 80061e8:	2200      	movs	r2, #0
 80061ea:	4682      	mov	sl, r0
 80061ec:	2300      	movs	r3, #0
 80061ee:	4630      	mov	r0, r6
 80061f0:	4639      	mov	r1, r7
 80061f2:	f7fa fbe3 	bl	80009bc <__aeabi_dcmplt>
 80061f6:	b148      	cbz	r0, 800620c <_dtoa_r+0x16c>
 80061f8:	4650      	mov	r0, sl
 80061fa:	f7fa f903 	bl	8000404 <__aeabi_i2d>
 80061fe:	4632      	mov	r2, r6
 8006200:	463b      	mov	r3, r7
 8006202:	f7fa fbd1 	bl	80009a8 <__aeabi_dcmpeq>
 8006206:	b908      	cbnz	r0, 800620c <_dtoa_r+0x16c>
 8006208:	f10a 3aff 	add.w	sl, sl, #4294967295
 800620c:	f1ba 0f16 	cmp.w	sl, #22
 8006210:	d85a      	bhi.n	80062c8 <_dtoa_r+0x228>
 8006212:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006216:	496d      	ldr	r1, [pc, #436]	; (80063cc <_dtoa_r+0x32c>)
 8006218:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800621c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006220:	f7fa fbea 	bl	80009f8 <__aeabi_dcmpgt>
 8006224:	2800      	cmp	r0, #0
 8006226:	d051      	beq.n	80062cc <_dtoa_r+0x22c>
 8006228:	2300      	movs	r3, #0
 800622a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800622e:	930d      	str	r3, [sp, #52]	; 0x34
 8006230:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006232:	1b5d      	subs	r5, r3, r5
 8006234:	1e6b      	subs	r3, r5, #1
 8006236:	9307      	str	r3, [sp, #28]
 8006238:	bf43      	ittte	mi
 800623a:	2300      	movmi	r3, #0
 800623c:	f1c5 0901 	rsbmi	r9, r5, #1
 8006240:	9307      	strmi	r3, [sp, #28]
 8006242:	f04f 0900 	movpl.w	r9, #0
 8006246:	f1ba 0f00 	cmp.w	sl, #0
 800624a:	db41      	blt.n	80062d0 <_dtoa_r+0x230>
 800624c:	9b07      	ldr	r3, [sp, #28]
 800624e:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 8006252:	4453      	add	r3, sl
 8006254:	9307      	str	r3, [sp, #28]
 8006256:	2300      	movs	r3, #0
 8006258:	9308      	str	r3, [sp, #32]
 800625a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800625c:	2b09      	cmp	r3, #9
 800625e:	f200 808f 	bhi.w	8006380 <_dtoa_r+0x2e0>
 8006262:	2b05      	cmp	r3, #5
 8006264:	bfc4      	itt	gt
 8006266:	3b04      	subgt	r3, #4
 8006268:	931e      	strgt	r3, [sp, #120]	; 0x78
 800626a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800626c:	bfc8      	it	gt
 800626e:	2500      	movgt	r5, #0
 8006270:	f1a3 0302 	sub.w	r3, r3, #2
 8006274:	bfd8      	it	le
 8006276:	2501      	movle	r5, #1
 8006278:	2b03      	cmp	r3, #3
 800627a:	f200 808d 	bhi.w	8006398 <_dtoa_r+0x2f8>
 800627e:	e8df f003 	tbb	[pc, r3]
 8006282:	7d7b      	.short	0x7d7b
 8006284:	6f2f      	.short	0x6f2f
 8006286:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800628a:	441d      	add	r5, r3
 800628c:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006290:	2820      	cmp	r0, #32
 8006292:	dd13      	ble.n	80062bc <_dtoa_r+0x21c>
 8006294:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8006298:	9b02      	ldr	r3, [sp, #8]
 800629a:	fa08 f800 	lsl.w	r8, r8, r0
 800629e:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80062a2:	fa23 f000 	lsr.w	r0, r3, r0
 80062a6:	ea48 0000 	orr.w	r0, r8, r0
 80062aa:	f7fa f89b 	bl	80003e4 <__aeabi_ui2d>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4680      	mov	r8, r0
 80062b2:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 80062b6:	3d01      	subs	r5, #1
 80062b8:	9310      	str	r3, [sp, #64]	; 0x40
 80062ba:	e771      	b.n	80061a0 <_dtoa_r+0x100>
 80062bc:	9b02      	ldr	r3, [sp, #8]
 80062be:	f1c0 0020 	rsb	r0, r0, #32
 80062c2:	fa03 f000 	lsl.w	r0, r3, r0
 80062c6:	e7f0      	b.n	80062aa <_dtoa_r+0x20a>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e7b0      	b.n	800622e <_dtoa_r+0x18e>
 80062cc:	900d      	str	r0, [sp, #52]	; 0x34
 80062ce:	e7af      	b.n	8006230 <_dtoa_r+0x190>
 80062d0:	f1ca 0300 	rsb	r3, sl, #0
 80062d4:	9308      	str	r3, [sp, #32]
 80062d6:	2300      	movs	r3, #0
 80062d8:	eba9 090a 	sub.w	r9, r9, sl
 80062dc:	930c      	str	r3, [sp, #48]	; 0x30
 80062de:	e7bc      	b.n	800625a <_dtoa_r+0x1ba>
 80062e0:	2301      	movs	r3, #1
 80062e2:	9309      	str	r3, [sp, #36]	; 0x24
 80062e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	dd74      	ble.n	80063d4 <_dtoa_r+0x334>
 80062ea:	4698      	mov	r8, r3
 80062ec:	9304      	str	r3, [sp, #16]
 80062ee:	2200      	movs	r2, #0
 80062f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062f2:	6072      	str	r2, [r6, #4]
 80062f4:	2204      	movs	r2, #4
 80062f6:	f102 0014 	add.w	r0, r2, #20
 80062fa:	4298      	cmp	r0, r3
 80062fc:	6871      	ldr	r1, [r6, #4]
 80062fe:	d96e      	bls.n	80063de <_dtoa_r+0x33e>
 8006300:	4620      	mov	r0, r4
 8006302:	f000 fcb0 	bl	8006c66 <_Balloc>
 8006306:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006308:	6030      	str	r0, [r6, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f1b8 0f0e 	cmp.w	r8, #14
 8006310:	9306      	str	r3, [sp, #24]
 8006312:	f200 80ed 	bhi.w	80064f0 <_dtoa_r+0x450>
 8006316:	2d00      	cmp	r5, #0
 8006318:	f000 80ea 	beq.w	80064f0 <_dtoa_r+0x450>
 800631c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006320:	f1ba 0f00 	cmp.w	sl, #0
 8006324:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006328:	dd77      	ble.n	800641a <_dtoa_r+0x37a>
 800632a:	4a28      	ldr	r2, [pc, #160]	; (80063cc <_dtoa_r+0x32c>)
 800632c:	f00a 030f 	and.w	r3, sl, #15
 8006330:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006334:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006338:	06f0      	lsls	r0, r6, #27
 800633a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8006342:	d568      	bpl.n	8006416 <_dtoa_r+0x376>
 8006344:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006348:	4b21      	ldr	r3, [pc, #132]	; (80063d0 <_dtoa_r+0x330>)
 800634a:	2503      	movs	r5, #3
 800634c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006350:	f7fa f9ec 	bl	800072c <__aeabi_ddiv>
 8006354:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006358:	f006 060f 	and.w	r6, r6, #15
 800635c:	4f1c      	ldr	r7, [pc, #112]	; (80063d0 <_dtoa_r+0x330>)
 800635e:	e04f      	b.n	8006400 <_dtoa_r+0x360>
 8006360:	2301      	movs	r3, #1
 8006362:	9309      	str	r3, [sp, #36]	; 0x24
 8006364:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006366:	4453      	add	r3, sl
 8006368:	f103 0801 	add.w	r8, r3, #1
 800636c:	9304      	str	r3, [sp, #16]
 800636e:	4643      	mov	r3, r8
 8006370:	2b01      	cmp	r3, #1
 8006372:	bfb8      	it	lt
 8006374:	2301      	movlt	r3, #1
 8006376:	e7ba      	b.n	80062ee <_dtoa_r+0x24e>
 8006378:	2300      	movs	r3, #0
 800637a:	e7b2      	b.n	80062e2 <_dtoa_r+0x242>
 800637c:	2300      	movs	r3, #0
 800637e:	e7f0      	b.n	8006362 <_dtoa_r+0x2c2>
 8006380:	2501      	movs	r5, #1
 8006382:	2300      	movs	r3, #0
 8006384:	9509      	str	r5, [sp, #36]	; 0x24
 8006386:	931e      	str	r3, [sp, #120]	; 0x78
 8006388:	f04f 33ff 	mov.w	r3, #4294967295
 800638c:	2200      	movs	r2, #0
 800638e:	9304      	str	r3, [sp, #16]
 8006390:	4698      	mov	r8, r3
 8006392:	2312      	movs	r3, #18
 8006394:	921f      	str	r2, [sp, #124]	; 0x7c
 8006396:	e7aa      	b.n	80062ee <_dtoa_r+0x24e>
 8006398:	2301      	movs	r3, #1
 800639a:	9309      	str	r3, [sp, #36]	; 0x24
 800639c:	e7f4      	b.n	8006388 <_dtoa_r+0x2e8>
 800639e:	bf00      	nop
 80063a0:	636f4361 	.word	0x636f4361
 80063a4:	3fd287a7 	.word	0x3fd287a7
 80063a8:	8b60c8b3 	.word	0x8b60c8b3
 80063ac:	3fc68a28 	.word	0x3fc68a28
 80063b0:	509f79fb 	.word	0x509f79fb
 80063b4:	3fd34413 	.word	0x3fd34413
 80063b8:	7ff00000 	.word	0x7ff00000
 80063bc:	08007f4d 	.word	0x08007f4d
 80063c0:	08007f44 	.word	0x08007f44
 80063c4:	08007f21 	.word	0x08007f21
 80063c8:	3ff80000 	.word	0x3ff80000
 80063cc:	08007f80 	.word	0x08007f80
 80063d0:	08007f58 	.word	0x08007f58
 80063d4:	2301      	movs	r3, #1
 80063d6:	9304      	str	r3, [sp, #16]
 80063d8:	4698      	mov	r8, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	e7da      	b.n	8006394 <_dtoa_r+0x2f4>
 80063de:	3101      	adds	r1, #1
 80063e0:	6071      	str	r1, [r6, #4]
 80063e2:	0052      	lsls	r2, r2, #1
 80063e4:	e787      	b.n	80062f6 <_dtoa_r+0x256>
 80063e6:	07f1      	lsls	r1, r6, #31
 80063e8:	d508      	bpl.n	80063fc <_dtoa_r+0x35c>
 80063ea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80063ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f2:	f7fa f871 	bl	80004d8 <__aeabi_dmul>
 80063f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80063fa:	3501      	adds	r5, #1
 80063fc:	1076      	asrs	r6, r6, #1
 80063fe:	3708      	adds	r7, #8
 8006400:	2e00      	cmp	r6, #0
 8006402:	d1f0      	bne.n	80063e6 <_dtoa_r+0x346>
 8006404:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006408:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800640c:	f7fa f98e 	bl	800072c <__aeabi_ddiv>
 8006410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006414:	e01b      	b.n	800644e <_dtoa_r+0x3ae>
 8006416:	2502      	movs	r5, #2
 8006418:	e7a0      	b.n	800635c <_dtoa_r+0x2bc>
 800641a:	f000 80a4 	beq.w	8006566 <_dtoa_r+0x4c6>
 800641e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8006422:	f1ca 0600 	rsb	r6, sl, #0
 8006426:	4ba0      	ldr	r3, [pc, #640]	; (80066a8 <_dtoa_r+0x608>)
 8006428:	f006 020f 	and.w	r2, r6, #15
 800642c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006434:	f7fa f850 	bl	80004d8 <__aeabi_dmul>
 8006438:	2502      	movs	r5, #2
 800643a:	2300      	movs	r3, #0
 800643c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006440:	4f9a      	ldr	r7, [pc, #616]	; (80066ac <_dtoa_r+0x60c>)
 8006442:	1136      	asrs	r6, r6, #4
 8006444:	2e00      	cmp	r6, #0
 8006446:	f040 8083 	bne.w	8006550 <_dtoa_r+0x4b0>
 800644a:	2b00      	cmp	r3, #0
 800644c:	d1e0      	bne.n	8006410 <_dtoa_r+0x370>
 800644e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006450:	2b00      	cmp	r3, #0
 8006452:	f000 808a 	beq.w	800656a <_dtoa_r+0x4ca>
 8006456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800645a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800645e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006462:	2200      	movs	r2, #0
 8006464:	4b92      	ldr	r3, [pc, #584]	; (80066b0 <_dtoa_r+0x610>)
 8006466:	f7fa faa9 	bl	80009bc <__aeabi_dcmplt>
 800646a:	2800      	cmp	r0, #0
 800646c:	d07d      	beq.n	800656a <_dtoa_r+0x4ca>
 800646e:	f1b8 0f00 	cmp.w	r8, #0
 8006472:	d07a      	beq.n	800656a <_dtoa_r+0x4ca>
 8006474:	9b04      	ldr	r3, [sp, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	dd36      	ble.n	80064e8 <_dtoa_r+0x448>
 800647a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800647e:	2200      	movs	r2, #0
 8006480:	4b8c      	ldr	r3, [pc, #560]	; (80066b4 <_dtoa_r+0x614>)
 8006482:	f7fa f829 	bl	80004d8 <__aeabi_dmul>
 8006486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800648a:	9e04      	ldr	r6, [sp, #16]
 800648c:	f10a 37ff 	add.w	r7, sl, #4294967295
 8006490:	3501      	adds	r5, #1
 8006492:	4628      	mov	r0, r5
 8006494:	f7f9 ffb6 	bl	8000404 <__aeabi_i2d>
 8006498:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800649c:	f7fa f81c 	bl	80004d8 <__aeabi_dmul>
 80064a0:	2200      	movs	r2, #0
 80064a2:	4b85      	ldr	r3, [pc, #532]	; (80066b8 <_dtoa_r+0x618>)
 80064a4:	f7f9 fe62 	bl	800016c <__adddf3>
 80064a8:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 80064ac:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80064b0:	950b      	str	r5, [sp, #44]	; 0x2c
 80064b2:	2e00      	cmp	r6, #0
 80064b4:	d15c      	bne.n	8006570 <_dtoa_r+0x4d0>
 80064b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ba:	2200      	movs	r2, #0
 80064bc:	4b7f      	ldr	r3, [pc, #508]	; (80066bc <_dtoa_r+0x61c>)
 80064be:	f7f9 fe53 	bl	8000168 <__aeabi_dsub>
 80064c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064c4:	462b      	mov	r3, r5
 80064c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ca:	f7fa fa95 	bl	80009f8 <__aeabi_dcmpgt>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f040 8281 	bne.w	80069d6 <_dtoa_r+0x936>
 80064d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064da:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80064de:	f7fa fa6d 	bl	80009bc <__aeabi_dcmplt>
 80064e2:	2800      	cmp	r0, #0
 80064e4:	f040 8275 	bne.w	80069d2 <_dtoa_r+0x932>
 80064e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80064ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f2c0 814b 	blt.w	800678e <_dtoa_r+0x6ee>
 80064f8:	f1ba 0f0e 	cmp.w	sl, #14
 80064fc:	f300 8147 	bgt.w	800678e <_dtoa_r+0x6ee>
 8006500:	4b69      	ldr	r3, [pc, #420]	; (80066a8 <_dtoa_r+0x608>)
 8006502:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800650a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800650e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006510:	2b00      	cmp	r3, #0
 8006512:	f280 80d7 	bge.w	80066c4 <_dtoa_r+0x624>
 8006516:	f1b8 0f00 	cmp.w	r8, #0
 800651a:	f300 80d3 	bgt.w	80066c4 <_dtoa_r+0x624>
 800651e:	f040 8257 	bne.w	80069d0 <_dtoa_r+0x930>
 8006522:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006526:	2200      	movs	r2, #0
 8006528:	4b64      	ldr	r3, [pc, #400]	; (80066bc <_dtoa_r+0x61c>)
 800652a:	f7f9 ffd5 	bl	80004d8 <__aeabi_dmul>
 800652e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006532:	f7fa fa57 	bl	80009e4 <__aeabi_dcmpge>
 8006536:	4646      	mov	r6, r8
 8006538:	4647      	mov	r7, r8
 800653a:	2800      	cmp	r0, #0
 800653c:	f040 822d 	bne.w	800699a <_dtoa_r+0x8fa>
 8006540:	9b06      	ldr	r3, [sp, #24]
 8006542:	9a06      	ldr	r2, [sp, #24]
 8006544:	1c5d      	adds	r5, r3, #1
 8006546:	2331      	movs	r3, #49	; 0x31
 8006548:	f10a 0a01 	add.w	sl, sl, #1
 800654c:	7013      	strb	r3, [r2, #0]
 800654e:	e228      	b.n	80069a2 <_dtoa_r+0x902>
 8006550:	07f2      	lsls	r2, r6, #31
 8006552:	d505      	bpl.n	8006560 <_dtoa_r+0x4c0>
 8006554:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006558:	f7f9 ffbe 	bl	80004d8 <__aeabi_dmul>
 800655c:	2301      	movs	r3, #1
 800655e:	3501      	adds	r5, #1
 8006560:	1076      	asrs	r6, r6, #1
 8006562:	3708      	adds	r7, #8
 8006564:	e76e      	b.n	8006444 <_dtoa_r+0x3a4>
 8006566:	2502      	movs	r5, #2
 8006568:	e771      	b.n	800644e <_dtoa_r+0x3ae>
 800656a:	4657      	mov	r7, sl
 800656c:	4646      	mov	r6, r8
 800656e:	e790      	b.n	8006492 <_dtoa_r+0x3f2>
 8006570:	4b4d      	ldr	r3, [pc, #308]	; (80066a8 <_dtoa_r+0x608>)
 8006572:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006576:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800657a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d048      	beq.n	8006612 <_dtoa_r+0x572>
 8006580:	4602      	mov	r2, r0
 8006582:	460b      	mov	r3, r1
 8006584:	2000      	movs	r0, #0
 8006586:	494e      	ldr	r1, [pc, #312]	; (80066c0 <_dtoa_r+0x620>)
 8006588:	f7fa f8d0 	bl	800072c <__aeabi_ddiv>
 800658c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006590:	f7f9 fdea 	bl	8000168 <__aeabi_dsub>
 8006594:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006598:	9d06      	ldr	r5, [sp, #24]
 800659a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800659e:	f7fa fa4b 	bl	8000a38 <__aeabi_d2iz>
 80065a2:	9011      	str	r0, [sp, #68]	; 0x44
 80065a4:	f7f9 ff2e 	bl	8000404 <__aeabi_i2d>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065b0:	f7f9 fdda 	bl	8000168 <__aeabi_dsub>
 80065b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065ba:	3330      	adds	r3, #48	; 0x30
 80065bc:	f805 3b01 	strb.w	r3, [r5], #1
 80065c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065c4:	f7fa f9fa 	bl	80009bc <__aeabi_dcmplt>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d163      	bne.n	8006694 <_dtoa_r+0x5f4>
 80065cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d0:	2000      	movs	r0, #0
 80065d2:	4937      	ldr	r1, [pc, #220]	; (80066b0 <_dtoa_r+0x610>)
 80065d4:	f7f9 fdc8 	bl	8000168 <__aeabi_dsub>
 80065d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80065dc:	f7fa f9ee 	bl	80009bc <__aeabi_dcmplt>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	f040 80b5 	bne.w	8006750 <_dtoa_r+0x6b0>
 80065e6:	9b06      	ldr	r3, [sp, #24]
 80065e8:	1aeb      	subs	r3, r5, r3
 80065ea:	429e      	cmp	r6, r3
 80065ec:	f77f af7c 	ble.w	80064e8 <_dtoa_r+0x448>
 80065f0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80065f4:	2200      	movs	r2, #0
 80065f6:	4b2f      	ldr	r3, [pc, #188]	; (80066b4 <_dtoa_r+0x614>)
 80065f8:	f7f9 ff6e 	bl	80004d8 <__aeabi_dmul>
 80065fc:	2200      	movs	r2, #0
 80065fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006602:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006606:	4b2b      	ldr	r3, [pc, #172]	; (80066b4 <_dtoa_r+0x614>)
 8006608:	f7f9 ff66 	bl	80004d8 <__aeabi_dmul>
 800660c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006610:	e7c3      	b.n	800659a <_dtoa_r+0x4fa>
 8006612:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006616:	f7f9 ff5f 	bl	80004d8 <__aeabi_dmul>
 800661a:	9b06      	ldr	r3, [sp, #24]
 800661c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006620:	199d      	adds	r5, r3, r6
 8006622:	461e      	mov	r6, r3
 8006624:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006628:	f7fa fa06 	bl	8000a38 <__aeabi_d2iz>
 800662c:	9011      	str	r0, [sp, #68]	; 0x44
 800662e:	f7f9 fee9 	bl	8000404 <__aeabi_i2d>
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800663a:	f7f9 fd95 	bl	8000168 <__aeabi_dsub>
 800663e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006640:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006644:	3330      	adds	r3, #48	; 0x30
 8006646:	f806 3b01 	strb.w	r3, [r6], #1
 800664a:	42ae      	cmp	r6, r5
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	d124      	bne.n	800669c <_dtoa_r+0x5fc>
 8006652:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006656:	4b1a      	ldr	r3, [pc, #104]	; (80066c0 <_dtoa_r+0x620>)
 8006658:	f7f9 fd88 	bl	800016c <__adddf3>
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006664:	f7fa f9c8 	bl	80009f8 <__aeabi_dcmpgt>
 8006668:	2800      	cmp	r0, #0
 800666a:	d171      	bne.n	8006750 <_dtoa_r+0x6b0>
 800666c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006670:	2000      	movs	r0, #0
 8006672:	4913      	ldr	r1, [pc, #76]	; (80066c0 <_dtoa_r+0x620>)
 8006674:	f7f9 fd78 	bl	8000168 <__aeabi_dsub>
 8006678:	4602      	mov	r2, r0
 800667a:	460b      	mov	r3, r1
 800667c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006680:	f7fa f99c 	bl	80009bc <__aeabi_dcmplt>
 8006684:	2800      	cmp	r0, #0
 8006686:	f43f af2f 	beq.w	80064e8 <_dtoa_r+0x448>
 800668a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800668e:	1e6a      	subs	r2, r5, #1
 8006690:	2b30      	cmp	r3, #48	; 0x30
 8006692:	d001      	beq.n	8006698 <_dtoa_r+0x5f8>
 8006694:	46ba      	mov	sl, r7
 8006696:	e04a      	b.n	800672e <_dtoa_r+0x68e>
 8006698:	4615      	mov	r5, r2
 800669a:	e7f6      	b.n	800668a <_dtoa_r+0x5ea>
 800669c:	4b05      	ldr	r3, [pc, #20]	; (80066b4 <_dtoa_r+0x614>)
 800669e:	f7f9 ff1b 	bl	80004d8 <__aeabi_dmul>
 80066a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066a6:	e7bd      	b.n	8006624 <_dtoa_r+0x584>
 80066a8:	08007f80 	.word	0x08007f80
 80066ac:	08007f58 	.word	0x08007f58
 80066b0:	3ff00000 	.word	0x3ff00000
 80066b4:	40240000 	.word	0x40240000
 80066b8:	401c0000 	.word	0x401c0000
 80066bc:	40140000 	.word	0x40140000
 80066c0:	3fe00000 	.word	0x3fe00000
 80066c4:	9d06      	ldr	r5, [sp, #24]
 80066c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80066ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ce:	4630      	mov	r0, r6
 80066d0:	4639      	mov	r1, r7
 80066d2:	f7fa f82b 	bl	800072c <__aeabi_ddiv>
 80066d6:	f7fa f9af 	bl	8000a38 <__aeabi_d2iz>
 80066da:	4681      	mov	r9, r0
 80066dc:	f7f9 fe92 	bl	8000404 <__aeabi_i2d>
 80066e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e4:	f7f9 fef8 	bl	80004d8 <__aeabi_dmul>
 80066e8:	4602      	mov	r2, r0
 80066ea:	460b      	mov	r3, r1
 80066ec:	4630      	mov	r0, r6
 80066ee:	4639      	mov	r1, r7
 80066f0:	f7f9 fd3a 	bl	8000168 <__aeabi_dsub>
 80066f4:	f109 0630 	add.w	r6, r9, #48	; 0x30
 80066f8:	f805 6b01 	strb.w	r6, [r5], #1
 80066fc:	9e06      	ldr	r6, [sp, #24]
 80066fe:	4602      	mov	r2, r0
 8006700:	1bae      	subs	r6, r5, r6
 8006702:	45b0      	cmp	r8, r6
 8006704:	460b      	mov	r3, r1
 8006706:	d135      	bne.n	8006774 <_dtoa_r+0x6d4>
 8006708:	f7f9 fd30 	bl	800016c <__adddf3>
 800670c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006710:	4606      	mov	r6, r0
 8006712:	460f      	mov	r7, r1
 8006714:	f7fa f970 	bl	80009f8 <__aeabi_dcmpgt>
 8006718:	b9c8      	cbnz	r0, 800674e <_dtoa_r+0x6ae>
 800671a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800671e:	4630      	mov	r0, r6
 8006720:	4639      	mov	r1, r7
 8006722:	f7fa f941 	bl	80009a8 <__aeabi_dcmpeq>
 8006726:	b110      	cbz	r0, 800672e <_dtoa_r+0x68e>
 8006728:	f019 0f01 	tst.w	r9, #1
 800672c:	d10f      	bne.n	800674e <_dtoa_r+0x6ae>
 800672e:	4659      	mov	r1, fp
 8006730:	4620      	mov	r0, r4
 8006732:	f000 facc 	bl	8006cce <_Bfree>
 8006736:	2300      	movs	r3, #0
 8006738:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800673a:	702b      	strb	r3, [r5, #0]
 800673c:	f10a 0301 	add.w	r3, sl, #1
 8006740:	6013      	str	r3, [r2, #0]
 8006742:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006744:	2b00      	cmp	r3, #0
 8006746:	f43f acf3 	beq.w	8006130 <_dtoa_r+0x90>
 800674a:	601d      	str	r5, [r3, #0]
 800674c:	e4f0      	b.n	8006130 <_dtoa_r+0x90>
 800674e:	4657      	mov	r7, sl
 8006750:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006754:	1e6b      	subs	r3, r5, #1
 8006756:	2a39      	cmp	r2, #57	; 0x39
 8006758:	d106      	bne.n	8006768 <_dtoa_r+0x6c8>
 800675a:	9a06      	ldr	r2, [sp, #24]
 800675c:	429a      	cmp	r2, r3
 800675e:	d107      	bne.n	8006770 <_dtoa_r+0x6d0>
 8006760:	2330      	movs	r3, #48	; 0x30
 8006762:	7013      	strb	r3, [r2, #0]
 8006764:	4613      	mov	r3, r2
 8006766:	3701      	adds	r7, #1
 8006768:	781a      	ldrb	r2, [r3, #0]
 800676a:	3201      	adds	r2, #1
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	e791      	b.n	8006694 <_dtoa_r+0x5f4>
 8006770:	461d      	mov	r5, r3
 8006772:	e7ed      	b.n	8006750 <_dtoa_r+0x6b0>
 8006774:	2200      	movs	r2, #0
 8006776:	4b99      	ldr	r3, [pc, #612]	; (80069dc <_dtoa_r+0x93c>)
 8006778:	f7f9 feae 	bl	80004d8 <__aeabi_dmul>
 800677c:	2200      	movs	r2, #0
 800677e:	2300      	movs	r3, #0
 8006780:	4606      	mov	r6, r0
 8006782:	460f      	mov	r7, r1
 8006784:	f7fa f910 	bl	80009a8 <__aeabi_dcmpeq>
 8006788:	2800      	cmp	r0, #0
 800678a:	d09e      	beq.n	80066ca <_dtoa_r+0x62a>
 800678c:	e7cf      	b.n	800672e <_dtoa_r+0x68e>
 800678e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006790:	2a00      	cmp	r2, #0
 8006792:	f000 8088 	beq.w	80068a6 <_dtoa_r+0x806>
 8006796:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006798:	2a01      	cmp	r2, #1
 800679a:	dc6d      	bgt.n	8006878 <_dtoa_r+0x7d8>
 800679c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800679e:	2a00      	cmp	r2, #0
 80067a0:	d066      	beq.n	8006870 <_dtoa_r+0x7d0>
 80067a2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80067a6:	464d      	mov	r5, r9
 80067a8:	9e08      	ldr	r6, [sp, #32]
 80067aa:	9a07      	ldr	r2, [sp, #28]
 80067ac:	2101      	movs	r1, #1
 80067ae:	441a      	add	r2, r3
 80067b0:	4620      	mov	r0, r4
 80067b2:	4499      	add	r9, r3
 80067b4:	9207      	str	r2, [sp, #28]
 80067b6:	f000 fb2a 	bl	8006e0e <__i2b>
 80067ba:	4607      	mov	r7, r0
 80067bc:	2d00      	cmp	r5, #0
 80067be:	dd0b      	ble.n	80067d8 <_dtoa_r+0x738>
 80067c0:	9b07      	ldr	r3, [sp, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	dd08      	ble.n	80067d8 <_dtoa_r+0x738>
 80067c6:	42ab      	cmp	r3, r5
 80067c8:	bfa8      	it	ge
 80067ca:	462b      	movge	r3, r5
 80067cc:	9a07      	ldr	r2, [sp, #28]
 80067ce:	eba9 0903 	sub.w	r9, r9, r3
 80067d2:	1aed      	subs	r5, r5, r3
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	9307      	str	r3, [sp, #28]
 80067d8:	9b08      	ldr	r3, [sp, #32]
 80067da:	b1eb      	cbz	r3, 8006818 <_dtoa_r+0x778>
 80067dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d065      	beq.n	80068ae <_dtoa_r+0x80e>
 80067e2:	b18e      	cbz	r6, 8006808 <_dtoa_r+0x768>
 80067e4:	4639      	mov	r1, r7
 80067e6:	4632      	mov	r2, r6
 80067e8:	4620      	mov	r0, r4
 80067ea:	f000 fbaf 	bl	8006f4c <__pow5mult>
 80067ee:	465a      	mov	r2, fp
 80067f0:	4601      	mov	r1, r0
 80067f2:	4607      	mov	r7, r0
 80067f4:	4620      	mov	r0, r4
 80067f6:	f000 fb13 	bl	8006e20 <__multiply>
 80067fa:	4659      	mov	r1, fp
 80067fc:	900a      	str	r0, [sp, #40]	; 0x28
 80067fe:	4620      	mov	r0, r4
 8006800:	f000 fa65 	bl	8006cce <_Bfree>
 8006804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006806:	469b      	mov	fp, r3
 8006808:	9b08      	ldr	r3, [sp, #32]
 800680a:	1b9a      	subs	r2, r3, r6
 800680c:	d004      	beq.n	8006818 <_dtoa_r+0x778>
 800680e:	4659      	mov	r1, fp
 8006810:	4620      	mov	r0, r4
 8006812:	f000 fb9b 	bl	8006f4c <__pow5mult>
 8006816:	4683      	mov	fp, r0
 8006818:	2101      	movs	r1, #1
 800681a:	4620      	mov	r0, r4
 800681c:	f000 faf7 	bl	8006e0e <__i2b>
 8006820:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006822:	4606      	mov	r6, r0
 8006824:	2b00      	cmp	r3, #0
 8006826:	f000 81c6 	beq.w	8006bb6 <_dtoa_r+0xb16>
 800682a:	461a      	mov	r2, r3
 800682c:	4601      	mov	r1, r0
 800682e:	4620      	mov	r0, r4
 8006830:	f000 fb8c 	bl	8006f4c <__pow5mult>
 8006834:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006836:	4606      	mov	r6, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	dc3e      	bgt.n	80068ba <_dtoa_r+0x81a>
 800683c:	9b02      	ldr	r3, [sp, #8]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d137      	bne.n	80068b2 <_dtoa_r+0x812>
 8006842:	9b03      	ldr	r3, [sp, #12]
 8006844:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006848:	2b00      	cmp	r3, #0
 800684a:	d134      	bne.n	80068b6 <_dtoa_r+0x816>
 800684c:	9b03      	ldr	r3, [sp, #12]
 800684e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006852:	0d1b      	lsrs	r3, r3, #20
 8006854:	051b      	lsls	r3, r3, #20
 8006856:	b12b      	cbz	r3, 8006864 <_dtoa_r+0x7c4>
 8006858:	9b07      	ldr	r3, [sp, #28]
 800685a:	f109 0901 	add.w	r9, r9, #1
 800685e:	3301      	adds	r3, #1
 8006860:	9307      	str	r3, [sp, #28]
 8006862:	2301      	movs	r3, #1
 8006864:	9308      	str	r3, [sp, #32]
 8006866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006868:	2b00      	cmp	r3, #0
 800686a:	d128      	bne.n	80068be <_dtoa_r+0x81e>
 800686c:	2001      	movs	r0, #1
 800686e:	e02e      	b.n	80068ce <_dtoa_r+0x82e>
 8006870:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006872:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006876:	e796      	b.n	80067a6 <_dtoa_r+0x706>
 8006878:	9b08      	ldr	r3, [sp, #32]
 800687a:	f108 36ff 	add.w	r6, r8, #4294967295
 800687e:	42b3      	cmp	r3, r6
 8006880:	bfb7      	itett	lt
 8006882:	9b08      	ldrlt	r3, [sp, #32]
 8006884:	1b9e      	subge	r6, r3, r6
 8006886:	1af2      	sublt	r2, r6, r3
 8006888:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800688a:	bfbf      	itttt	lt
 800688c:	9608      	strlt	r6, [sp, #32]
 800688e:	189b      	addlt	r3, r3, r2
 8006890:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006892:	2600      	movlt	r6, #0
 8006894:	f1b8 0f00 	cmp.w	r8, #0
 8006898:	bfb9      	ittee	lt
 800689a:	eba9 0508 	sublt.w	r5, r9, r8
 800689e:	2300      	movlt	r3, #0
 80068a0:	464d      	movge	r5, r9
 80068a2:	4643      	movge	r3, r8
 80068a4:	e781      	b.n	80067aa <_dtoa_r+0x70a>
 80068a6:	9e08      	ldr	r6, [sp, #32]
 80068a8:	464d      	mov	r5, r9
 80068aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80068ac:	e786      	b.n	80067bc <_dtoa_r+0x71c>
 80068ae:	9a08      	ldr	r2, [sp, #32]
 80068b0:	e7ad      	b.n	800680e <_dtoa_r+0x76e>
 80068b2:	2300      	movs	r3, #0
 80068b4:	e7d6      	b.n	8006864 <_dtoa_r+0x7c4>
 80068b6:	9b02      	ldr	r3, [sp, #8]
 80068b8:	e7d4      	b.n	8006864 <_dtoa_r+0x7c4>
 80068ba:	2300      	movs	r3, #0
 80068bc:	9308      	str	r3, [sp, #32]
 80068be:	6933      	ldr	r3, [r6, #16]
 80068c0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068c4:	6918      	ldr	r0, [r3, #16]
 80068c6:	f000 fa54 	bl	8006d72 <__hi0bits>
 80068ca:	f1c0 0020 	rsb	r0, r0, #32
 80068ce:	9b07      	ldr	r3, [sp, #28]
 80068d0:	4418      	add	r0, r3
 80068d2:	f010 001f 	ands.w	r0, r0, #31
 80068d6:	d047      	beq.n	8006968 <_dtoa_r+0x8c8>
 80068d8:	f1c0 0320 	rsb	r3, r0, #32
 80068dc:	2b04      	cmp	r3, #4
 80068de:	dd3b      	ble.n	8006958 <_dtoa_r+0x8b8>
 80068e0:	9b07      	ldr	r3, [sp, #28]
 80068e2:	f1c0 001c 	rsb	r0, r0, #28
 80068e6:	4481      	add	r9, r0
 80068e8:	4405      	add	r5, r0
 80068ea:	4403      	add	r3, r0
 80068ec:	9307      	str	r3, [sp, #28]
 80068ee:	f1b9 0f00 	cmp.w	r9, #0
 80068f2:	dd05      	ble.n	8006900 <_dtoa_r+0x860>
 80068f4:	4659      	mov	r1, fp
 80068f6:	464a      	mov	r2, r9
 80068f8:	4620      	mov	r0, r4
 80068fa:	f000 fb75 	bl	8006fe8 <__lshift>
 80068fe:	4683      	mov	fp, r0
 8006900:	9b07      	ldr	r3, [sp, #28]
 8006902:	2b00      	cmp	r3, #0
 8006904:	dd05      	ble.n	8006912 <_dtoa_r+0x872>
 8006906:	4631      	mov	r1, r6
 8006908:	461a      	mov	r2, r3
 800690a:	4620      	mov	r0, r4
 800690c:	f000 fb6c 	bl	8006fe8 <__lshift>
 8006910:	4606      	mov	r6, r0
 8006912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006914:	b353      	cbz	r3, 800696c <_dtoa_r+0x8cc>
 8006916:	4631      	mov	r1, r6
 8006918:	4658      	mov	r0, fp
 800691a:	f000 fbb9 	bl	8007090 <__mcmp>
 800691e:	2800      	cmp	r0, #0
 8006920:	da24      	bge.n	800696c <_dtoa_r+0x8cc>
 8006922:	2300      	movs	r3, #0
 8006924:	4659      	mov	r1, fp
 8006926:	220a      	movs	r2, #10
 8006928:	4620      	mov	r0, r4
 800692a:	f000 f9e7 	bl	8006cfc <__multadd>
 800692e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006930:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006934:	4683      	mov	fp, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8144 	beq.w	8006bc4 <_dtoa_r+0xb24>
 800693c:	2300      	movs	r3, #0
 800693e:	4639      	mov	r1, r7
 8006940:	220a      	movs	r2, #10
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f9da 	bl	8006cfc <__multadd>
 8006948:	9b04      	ldr	r3, [sp, #16]
 800694a:	4607      	mov	r7, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	dc4d      	bgt.n	80069ec <_dtoa_r+0x94c>
 8006950:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006952:	2b02      	cmp	r3, #2
 8006954:	dd4a      	ble.n	80069ec <_dtoa_r+0x94c>
 8006956:	e011      	b.n	800697c <_dtoa_r+0x8dc>
 8006958:	d0c9      	beq.n	80068ee <_dtoa_r+0x84e>
 800695a:	9a07      	ldr	r2, [sp, #28]
 800695c:	331c      	adds	r3, #28
 800695e:	441a      	add	r2, r3
 8006960:	4499      	add	r9, r3
 8006962:	441d      	add	r5, r3
 8006964:	4613      	mov	r3, r2
 8006966:	e7c1      	b.n	80068ec <_dtoa_r+0x84c>
 8006968:	4603      	mov	r3, r0
 800696a:	e7f6      	b.n	800695a <_dtoa_r+0x8ba>
 800696c:	f1b8 0f00 	cmp.w	r8, #0
 8006970:	dc36      	bgt.n	80069e0 <_dtoa_r+0x940>
 8006972:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006974:	2b02      	cmp	r3, #2
 8006976:	dd33      	ble.n	80069e0 <_dtoa_r+0x940>
 8006978:	f8cd 8010 	str.w	r8, [sp, #16]
 800697c:	9b04      	ldr	r3, [sp, #16]
 800697e:	b963      	cbnz	r3, 800699a <_dtoa_r+0x8fa>
 8006980:	4631      	mov	r1, r6
 8006982:	2205      	movs	r2, #5
 8006984:	4620      	mov	r0, r4
 8006986:	f000 f9b9 	bl	8006cfc <__multadd>
 800698a:	4601      	mov	r1, r0
 800698c:	4606      	mov	r6, r0
 800698e:	4658      	mov	r0, fp
 8006990:	f000 fb7e 	bl	8007090 <__mcmp>
 8006994:	2800      	cmp	r0, #0
 8006996:	f73f add3 	bgt.w	8006540 <_dtoa_r+0x4a0>
 800699a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800699c:	9d06      	ldr	r5, [sp, #24]
 800699e:	ea6f 0a03 	mvn.w	sl, r3
 80069a2:	f04f 0900 	mov.w	r9, #0
 80069a6:	4631      	mov	r1, r6
 80069a8:	4620      	mov	r0, r4
 80069aa:	f000 f990 	bl	8006cce <_Bfree>
 80069ae:	2f00      	cmp	r7, #0
 80069b0:	f43f aebd 	beq.w	800672e <_dtoa_r+0x68e>
 80069b4:	f1b9 0f00 	cmp.w	r9, #0
 80069b8:	d005      	beq.n	80069c6 <_dtoa_r+0x926>
 80069ba:	45b9      	cmp	r9, r7
 80069bc:	d003      	beq.n	80069c6 <_dtoa_r+0x926>
 80069be:	4649      	mov	r1, r9
 80069c0:	4620      	mov	r0, r4
 80069c2:	f000 f984 	bl	8006cce <_Bfree>
 80069c6:	4639      	mov	r1, r7
 80069c8:	4620      	mov	r0, r4
 80069ca:	f000 f980 	bl	8006cce <_Bfree>
 80069ce:	e6ae      	b.n	800672e <_dtoa_r+0x68e>
 80069d0:	2600      	movs	r6, #0
 80069d2:	4637      	mov	r7, r6
 80069d4:	e7e1      	b.n	800699a <_dtoa_r+0x8fa>
 80069d6:	46ba      	mov	sl, r7
 80069d8:	4637      	mov	r7, r6
 80069da:	e5b1      	b.n	8006540 <_dtoa_r+0x4a0>
 80069dc:	40240000 	.word	0x40240000
 80069e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069e2:	f8cd 8010 	str.w	r8, [sp, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	f000 80f3 	beq.w	8006bd2 <_dtoa_r+0xb32>
 80069ec:	2d00      	cmp	r5, #0
 80069ee:	dd05      	ble.n	80069fc <_dtoa_r+0x95c>
 80069f0:	4639      	mov	r1, r7
 80069f2:	462a      	mov	r2, r5
 80069f4:	4620      	mov	r0, r4
 80069f6:	f000 faf7 	bl	8006fe8 <__lshift>
 80069fa:	4607      	mov	r7, r0
 80069fc:	9b08      	ldr	r3, [sp, #32]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d04c      	beq.n	8006a9c <_dtoa_r+0x9fc>
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	4620      	mov	r0, r4
 8006a06:	f000 f92e 	bl	8006c66 <_Balloc>
 8006a0a:	4605      	mov	r5, r0
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	f107 010c 	add.w	r1, r7, #12
 8006a12:	3202      	adds	r2, #2
 8006a14:	0092      	lsls	r2, r2, #2
 8006a16:	300c      	adds	r0, #12
 8006a18:	f000 f91a 	bl	8006c50 <memcpy>
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4629      	mov	r1, r5
 8006a20:	4620      	mov	r0, r4
 8006a22:	f000 fae1 	bl	8006fe8 <__lshift>
 8006a26:	46b9      	mov	r9, r7
 8006a28:	4607      	mov	r7, r0
 8006a2a:	9b06      	ldr	r3, [sp, #24]
 8006a2c:	9307      	str	r3, [sp, #28]
 8006a2e:	9b02      	ldr	r3, [sp, #8]
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	9308      	str	r3, [sp, #32]
 8006a36:	4631      	mov	r1, r6
 8006a38:	4658      	mov	r0, fp
 8006a3a:	f7ff faa3 	bl	8005f84 <quorem>
 8006a3e:	4649      	mov	r1, r9
 8006a40:	4605      	mov	r5, r0
 8006a42:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006a46:	4658      	mov	r0, fp
 8006a48:	f000 fb22 	bl	8007090 <__mcmp>
 8006a4c:	463a      	mov	r2, r7
 8006a4e:	9002      	str	r0, [sp, #8]
 8006a50:	4631      	mov	r1, r6
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 fb36 	bl	80070c4 <__mdiff>
 8006a58:	68c3      	ldr	r3, [r0, #12]
 8006a5a:	4602      	mov	r2, r0
 8006a5c:	bb03      	cbnz	r3, 8006aa0 <_dtoa_r+0xa00>
 8006a5e:	4601      	mov	r1, r0
 8006a60:	9009      	str	r0, [sp, #36]	; 0x24
 8006a62:	4658      	mov	r0, fp
 8006a64:	f000 fb14 	bl	8007090 <__mcmp>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a6c:	4611      	mov	r1, r2
 8006a6e:	4620      	mov	r0, r4
 8006a70:	9309      	str	r3, [sp, #36]	; 0x24
 8006a72:	f000 f92c 	bl	8006cce <_Bfree>
 8006a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a78:	b9a3      	cbnz	r3, 8006aa4 <_dtoa_r+0xa04>
 8006a7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006a7c:	b992      	cbnz	r2, 8006aa4 <_dtoa_r+0xa04>
 8006a7e:	9a08      	ldr	r2, [sp, #32]
 8006a80:	b982      	cbnz	r2, 8006aa4 <_dtoa_r+0xa04>
 8006a82:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006a86:	d029      	beq.n	8006adc <_dtoa_r+0xa3c>
 8006a88:	9b02      	ldr	r3, [sp, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dd01      	ble.n	8006a92 <_dtoa_r+0x9f2>
 8006a8e:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006a92:	9b07      	ldr	r3, [sp, #28]
 8006a94:	1c5d      	adds	r5, r3, #1
 8006a96:	f883 8000 	strb.w	r8, [r3]
 8006a9a:	e784      	b.n	80069a6 <_dtoa_r+0x906>
 8006a9c:	4638      	mov	r0, r7
 8006a9e:	e7c2      	b.n	8006a26 <_dtoa_r+0x986>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	e7e3      	b.n	8006a6c <_dtoa_r+0x9cc>
 8006aa4:	9a02      	ldr	r2, [sp, #8]
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	db04      	blt.n	8006ab4 <_dtoa_r+0xa14>
 8006aaa:	d123      	bne.n	8006af4 <_dtoa_r+0xa54>
 8006aac:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006aae:	bb0a      	cbnz	r2, 8006af4 <_dtoa_r+0xa54>
 8006ab0:	9a08      	ldr	r2, [sp, #32]
 8006ab2:	b9fa      	cbnz	r2, 8006af4 <_dtoa_r+0xa54>
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	ddec      	ble.n	8006a92 <_dtoa_r+0x9f2>
 8006ab8:	4659      	mov	r1, fp
 8006aba:	2201      	movs	r2, #1
 8006abc:	4620      	mov	r0, r4
 8006abe:	f000 fa93 	bl	8006fe8 <__lshift>
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	4683      	mov	fp, r0
 8006ac6:	f000 fae3 	bl	8007090 <__mcmp>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	dc03      	bgt.n	8006ad6 <_dtoa_r+0xa36>
 8006ace:	d1e0      	bne.n	8006a92 <_dtoa_r+0x9f2>
 8006ad0:	f018 0f01 	tst.w	r8, #1
 8006ad4:	d0dd      	beq.n	8006a92 <_dtoa_r+0x9f2>
 8006ad6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006ada:	d1d8      	bne.n	8006a8e <_dtoa_r+0x9ee>
 8006adc:	9b07      	ldr	r3, [sp, #28]
 8006ade:	9a07      	ldr	r2, [sp, #28]
 8006ae0:	1c5d      	adds	r5, r3, #1
 8006ae2:	2339      	movs	r3, #57	; 0x39
 8006ae4:	7013      	strb	r3, [r2, #0]
 8006ae6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006aea:	1e6a      	subs	r2, r5, #1
 8006aec:	2b39      	cmp	r3, #57	; 0x39
 8006aee:	d04d      	beq.n	8006b8c <_dtoa_r+0xaec>
 8006af0:	3301      	adds	r3, #1
 8006af2:	e052      	b.n	8006b9a <_dtoa_r+0xafa>
 8006af4:	9a07      	ldr	r2, [sp, #28]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	f102 0501 	add.w	r5, r2, #1
 8006afc:	dd06      	ble.n	8006b0c <_dtoa_r+0xa6c>
 8006afe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006b02:	d0eb      	beq.n	8006adc <_dtoa_r+0xa3c>
 8006b04:	f108 0801 	add.w	r8, r8, #1
 8006b08:	9b07      	ldr	r3, [sp, #28]
 8006b0a:	e7c4      	b.n	8006a96 <_dtoa_r+0x9f6>
 8006b0c:	9b06      	ldr	r3, [sp, #24]
 8006b0e:	9a04      	ldr	r2, [sp, #16]
 8006b10:	1aeb      	subs	r3, r5, r3
 8006b12:	4293      	cmp	r3, r2
 8006b14:	f805 8c01 	strb.w	r8, [r5, #-1]
 8006b18:	d021      	beq.n	8006b5e <_dtoa_r+0xabe>
 8006b1a:	4659      	mov	r1, fp
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	220a      	movs	r2, #10
 8006b20:	4620      	mov	r0, r4
 8006b22:	f000 f8eb 	bl	8006cfc <__multadd>
 8006b26:	45b9      	cmp	r9, r7
 8006b28:	4683      	mov	fp, r0
 8006b2a:	f04f 0300 	mov.w	r3, #0
 8006b2e:	f04f 020a 	mov.w	r2, #10
 8006b32:	4649      	mov	r1, r9
 8006b34:	4620      	mov	r0, r4
 8006b36:	d105      	bne.n	8006b44 <_dtoa_r+0xaa4>
 8006b38:	f000 f8e0 	bl	8006cfc <__multadd>
 8006b3c:	4681      	mov	r9, r0
 8006b3e:	4607      	mov	r7, r0
 8006b40:	9507      	str	r5, [sp, #28]
 8006b42:	e778      	b.n	8006a36 <_dtoa_r+0x996>
 8006b44:	f000 f8da 	bl	8006cfc <__multadd>
 8006b48:	4639      	mov	r1, r7
 8006b4a:	4681      	mov	r9, r0
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	220a      	movs	r2, #10
 8006b50:	4620      	mov	r0, r4
 8006b52:	f000 f8d3 	bl	8006cfc <__multadd>
 8006b56:	4607      	mov	r7, r0
 8006b58:	e7f2      	b.n	8006b40 <_dtoa_r+0xaa0>
 8006b5a:	f04f 0900 	mov.w	r9, #0
 8006b5e:	4659      	mov	r1, fp
 8006b60:	2201      	movs	r2, #1
 8006b62:	4620      	mov	r0, r4
 8006b64:	f000 fa40 	bl	8006fe8 <__lshift>
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4683      	mov	fp, r0
 8006b6c:	f000 fa90 	bl	8007090 <__mcmp>
 8006b70:	2800      	cmp	r0, #0
 8006b72:	dcb8      	bgt.n	8006ae6 <_dtoa_r+0xa46>
 8006b74:	d102      	bne.n	8006b7c <_dtoa_r+0xadc>
 8006b76:	f018 0f01 	tst.w	r8, #1
 8006b7a:	d1b4      	bne.n	8006ae6 <_dtoa_r+0xa46>
 8006b7c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006b80:	1e6a      	subs	r2, r5, #1
 8006b82:	2b30      	cmp	r3, #48	; 0x30
 8006b84:	f47f af0f 	bne.w	80069a6 <_dtoa_r+0x906>
 8006b88:	4615      	mov	r5, r2
 8006b8a:	e7f7      	b.n	8006b7c <_dtoa_r+0xadc>
 8006b8c:	9b06      	ldr	r3, [sp, #24]
 8006b8e:	4293      	cmp	r3, r2
 8006b90:	d105      	bne.n	8006b9e <_dtoa_r+0xafe>
 8006b92:	2331      	movs	r3, #49	; 0x31
 8006b94:	9a06      	ldr	r2, [sp, #24]
 8006b96:	f10a 0a01 	add.w	sl, sl, #1
 8006b9a:	7013      	strb	r3, [r2, #0]
 8006b9c:	e703      	b.n	80069a6 <_dtoa_r+0x906>
 8006b9e:	4615      	mov	r5, r2
 8006ba0:	e7a1      	b.n	8006ae6 <_dtoa_r+0xa46>
 8006ba2:	4b17      	ldr	r3, [pc, #92]	; (8006c00 <_dtoa_r+0xb60>)
 8006ba4:	f7ff bae1 	b.w	800616a <_dtoa_r+0xca>
 8006ba8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	f47f aabb 	bne.w	8006126 <_dtoa_r+0x86>
 8006bb0:	4b14      	ldr	r3, [pc, #80]	; (8006c04 <_dtoa_r+0xb64>)
 8006bb2:	f7ff bada 	b.w	800616a <_dtoa_r+0xca>
 8006bb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	f77f ae3f 	ble.w	800683c <_dtoa_r+0x79c>
 8006bbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006bc0:	9308      	str	r3, [sp, #32]
 8006bc2:	e653      	b.n	800686c <_dtoa_r+0x7cc>
 8006bc4:	9b04      	ldr	r3, [sp, #16]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	dc03      	bgt.n	8006bd2 <_dtoa_r+0xb32>
 8006bca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006bcc:	2b02      	cmp	r3, #2
 8006bce:	f73f aed5 	bgt.w	800697c <_dtoa_r+0x8dc>
 8006bd2:	9d06      	ldr	r5, [sp, #24]
 8006bd4:	4631      	mov	r1, r6
 8006bd6:	4658      	mov	r0, fp
 8006bd8:	f7ff f9d4 	bl	8005f84 <quorem>
 8006bdc:	9b06      	ldr	r3, [sp, #24]
 8006bde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006be2:	f805 8b01 	strb.w	r8, [r5], #1
 8006be6:	9a04      	ldr	r2, [sp, #16]
 8006be8:	1aeb      	subs	r3, r5, r3
 8006bea:	429a      	cmp	r2, r3
 8006bec:	ddb5      	ble.n	8006b5a <_dtoa_r+0xaba>
 8006bee:	4659      	mov	r1, fp
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	220a      	movs	r2, #10
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f000 f881 	bl	8006cfc <__multadd>
 8006bfa:	4683      	mov	fp, r0
 8006bfc:	e7ea      	b.n	8006bd4 <_dtoa_r+0xb34>
 8006bfe:	bf00      	nop
 8006c00:	08007f20 	.word	0x08007f20
 8006c04:	08007f44 	.word	0x08007f44

08006c08 <_localeconv_r>:
 8006c08:	4b04      	ldr	r3, [pc, #16]	; (8006c1c <_localeconv_r+0x14>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	6a18      	ldr	r0, [r3, #32]
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <_localeconv_r+0x18>)
 8006c10:	2800      	cmp	r0, #0
 8006c12:	bf08      	it	eq
 8006c14:	4618      	moveq	r0, r3
 8006c16:	30f0      	adds	r0, #240	; 0xf0
 8006c18:	4770      	bx	lr
 8006c1a:	bf00      	nop
 8006c1c:	20000014 	.word	0x20000014
 8006c20:	20000078 	.word	0x20000078

08006c24 <malloc>:
 8006c24:	4b02      	ldr	r3, [pc, #8]	; (8006c30 <malloc+0xc>)
 8006c26:	4601      	mov	r1, r0
 8006c28:	6818      	ldr	r0, [r3, #0]
 8006c2a:	f000 bb53 	b.w	80072d4 <_malloc_r>
 8006c2e:	bf00      	nop
 8006c30:	20000014 	.word	0x20000014

08006c34 <memchr>:
 8006c34:	b510      	push	{r4, lr}
 8006c36:	b2c9      	uxtb	r1, r1
 8006c38:	4402      	add	r2, r0
 8006c3a:	4290      	cmp	r0, r2
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	d101      	bne.n	8006c44 <memchr+0x10>
 8006c40:	2300      	movs	r3, #0
 8006c42:	e003      	b.n	8006c4c <memchr+0x18>
 8006c44:	781c      	ldrb	r4, [r3, #0]
 8006c46:	3001      	adds	r0, #1
 8006c48:	428c      	cmp	r4, r1
 8006c4a:	d1f6      	bne.n	8006c3a <memchr+0x6>
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	bd10      	pop	{r4, pc}

08006c50 <memcpy>:
 8006c50:	b510      	push	{r4, lr}
 8006c52:	1e43      	subs	r3, r0, #1
 8006c54:	440a      	add	r2, r1
 8006c56:	4291      	cmp	r1, r2
 8006c58:	d100      	bne.n	8006c5c <memcpy+0xc>
 8006c5a:	bd10      	pop	{r4, pc}
 8006c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c64:	e7f7      	b.n	8006c56 <memcpy+0x6>

08006c66 <_Balloc>:
 8006c66:	b570      	push	{r4, r5, r6, lr}
 8006c68:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006c6a:	4604      	mov	r4, r0
 8006c6c:	460e      	mov	r6, r1
 8006c6e:	b93d      	cbnz	r5, 8006c80 <_Balloc+0x1a>
 8006c70:	2010      	movs	r0, #16
 8006c72:	f7ff ffd7 	bl	8006c24 <malloc>
 8006c76:	6260      	str	r0, [r4, #36]	; 0x24
 8006c78:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006c7c:	6005      	str	r5, [r0, #0]
 8006c7e:	60c5      	str	r5, [r0, #12]
 8006c80:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006c82:	68eb      	ldr	r3, [r5, #12]
 8006c84:	b183      	cbz	r3, 8006ca8 <_Balloc+0x42>
 8006c86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c88:	68db      	ldr	r3, [r3, #12]
 8006c8a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006c8e:	b9b8      	cbnz	r0, 8006cc0 <_Balloc+0x5a>
 8006c90:	2101      	movs	r1, #1
 8006c92:	fa01 f506 	lsl.w	r5, r1, r6
 8006c96:	1d6a      	adds	r2, r5, #5
 8006c98:	0092      	lsls	r2, r2, #2
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 fabf 	bl	800721e <_calloc_r>
 8006ca0:	b160      	cbz	r0, 8006cbc <_Balloc+0x56>
 8006ca2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006ca6:	e00e      	b.n	8006cc6 <_Balloc+0x60>
 8006ca8:	2221      	movs	r2, #33	; 0x21
 8006caa:	2104      	movs	r1, #4
 8006cac:	4620      	mov	r0, r4
 8006cae:	f000 fab6 	bl	800721e <_calloc_r>
 8006cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cb4:	60e8      	str	r0, [r5, #12]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d1e4      	bne.n	8006c86 <_Balloc+0x20>
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	6802      	ldr	r2, [r0, #0]
 8006cc2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ccc:	e7f7      	b.n	8006cbe <_Balloc+0x58>

08006cce <_Bfree>:
 8006cce:	b570      	push	{r4, r5, r6, lr}
 8006cd0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460d      	mov	r5, r1
 8006cd6:	b93c      	cbnz	r4, 8006ce8 <_Bfree+0x1a>
 8006cd8:	2010      	movs	r0, #16
 8006cda:	f7ff ffa3 	bl	8006c24 <malloc>
 8006cde:	6270      	str	r0, [r6, #36]	; 0x24
 8006ce0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ce4:	6004      	str	r4, [r0, #0]
 8006ce6:	60c4      	str	r4, [r0, #12]
 8006ce8:	b13d      	cbz	r5, 8006cfa <_Bfree+0x2c>
 8006cea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006cec:	686a      	ldr	r2, [r5, #4]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cf4:	6029      	str	r1, [r5, #0]
 8006cf6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}

08006cfc <__multadd>:
 8006cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d00:	461f      	mov	r7, r3
 8006d02:	4606      	mov	r6, r0
 8006d04:	460c      	mov	r4, r1
 8006d06:	2300      	movs	r3, #0
 8006d08:	690d      	ldr	r5, [r1, #16]
 8006d0a:	f101 0c14 	add.w	ip, r1, #20
 8006d0e:	f8dc 0000 	ldr.w	r0, [ip]
 8006d12:	3301      	adds	r3, #1
 8006d14:	b281      	uxth	r1, r0
 8006d16:	fb02 7101 	mla	r1, r2, r1, r7
 8006d1a:	0c00      	lsrs	r0, r0, #16
 8006d1c:	0c0f      	lsrs	r7, r1, #16
 8006d1e:	fb02 7000 	mla	r0, r2, r0, r7
 8006d22:	b289      	uxth	r1, r1
 8006d24:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006d28:	429d      	cmp	r5, r3
 8006d2a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006d2e:	f84c 1b04 	str.w	r1, [ip], #4
 8006d32:	dcec      	bgt.n	8006d0e <__multadd+0x12>
 8006d34:	b1d7      	cbz	r7, 8006d6c <__multadd+0x70>
 8006d36:	68a3      	ldr	r3, [r4, #8]
 8006d38:	42ab      	cmp	r3, r5
 8006d3a:	dc12      	bgt.n	8006d62 <__multadd+0x66>
 8006d3c:	6861      	ldr	r1, [r4, #4]
 8006d3e:	4630      	mov	r0, r6
 8006d40:	3101      	adds	r1, #1
 8006d42:	f7ff ff90 	bl	8006c66 <_Balloc>
 8006d46:	4680      	mov	r8, r0
 8006d48:	6922      	ldr	r2, [r4, #16]
 8006d4a:	f104 010c 	add.w	r1, r4, #12
 8006d4e:	3202      	adds	r2, #2
 8006d50:	0092      	lsls	r2, r2, #2
 8006d52:	300c      	adds	r0, #12
 8006d54:	f7ff ff7c 	bl	8006c50 <memcpy>
 8006d58:	4621      	mov	r1, r4
 8006d5a:	4630      	mov	r0, r6
 8006d5c:	f7ff ffb7 	bl	8006cce <_Bfree>
 8006d60:	4644      	mov	r4, r8
 8006d62:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d66:	3501      	adds	r5, #1
 8006d68:	615f      	str	r7, [r3, #20]
 8006d6a:	6125      	str	r5, [r4, #16]
 8006d6c:	4620      	mov	r0, r4
 8006d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006d72 <__hi0bits>:
 8006d72:	0c02      	lsrs	r2, r0, #16
 8006d74:	0412      	lsls	r2, r2, #16
 8006d76:	4603      	mov	r3, r0
 8006d78:	b9b2      	cbnz	r2, 8006da8 <__hi0bits+0x36>
 8006d7a:	0403      	lsls	r3, r0, #16
 8006d7c:	2010      	movs	r0, #16
 8006d7e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006d82:	bf04      	itt	eq
 8006d84:	021b      	lsleq	r3, r3, #8
 8006d86:	3008      	addeq	r0, #8
 8006d88:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006d8c:	bf04      	itt	eq
 8006d8e:	011b      	lsleq	r3, r3, #4
 8006d90:	3004      	addeq	r0, #4
 8006d92:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006d96:	bf04      	itt	eq
 8006d98:	009b      	lsleq	r3, r3, #2
 8006d9a:	3002      	addeq	r0, #2
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	db06      	blt.n	8006dae <__hi0bits+0x3c>
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	d503      	bpl.n	8006dac <__hi0bits+0x3a>
 8006da4:	3001      	adds	r0, #1
 8006da6:	4770      	bx	lr
 8006da8:	2000      	movs	r0, #0
 8006daa:	e7e8      	b.n	8006d7e <__hi0bits+0xc>
 8006dac:	2020      	movs	r0, #32
 8006dae:	4770      	bx	lr

08006db0 <__lo0bits>:
 8006db0:	6803      	ldr	r3, [r0, #0]
 8006db2:	4601      	mov	r1, r0
 8006db4:	f013 0207 	ands.w	r2, r3, #7
 8006db8:	d00b      	beq.n	8006dd2 <__lo0bits+0x22>
 8006dba:	07da      	lsls	r2, r3, #31
 8006dbc:	d423      	bmi.n	8006e06 <__lo0bits+0x56>
 8006dbe:	0798      	lsls	r0, r3, #30
 8006dc0:	bf49      	itett	mi
 8006dc2:	085b      	lsrmi	r3, r3, #1
 8006dc4:	089b      	lsrpl	r3, r3, #2
 8006dc6:	2001      	movmi	r0, #1
 8006dc8:	600b      	strmi	r3, [r1, #0]
 8006dca:	bf5c      	itt	pl
 8006dcc:	600b      	strpl	r3, [r1, #0]
 8006dce:	2002      	movpl	r0, #2
 8006dd0:	4770      	bx	lr
 8006dd2:	b298      	uxth	r0, r3
 8006dd4:	b9a8      	cbnz	r0, 8006e02 <__lo0bits+0x52>
 8006dd6:	2010      	movs	r0, #16
 8006dd8:	0c1b      	lsrs	r3, r3, #16
 8006dda:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006dde:	bf04      	itt	eq
 8006de0:	0a1b      	lsreq	r3, r3, #8
 8006de2:	3008      	addeq	r0, #8
 8006de4:	071a      	lsls	r2, r3, #28
 8006de6:	bf04      	itt	eq
 8006de8:	091b      	lsreq	r3, r3, #4
 8006dea:	3004      	addeq	r0, #4
 8006dec:	079a      	lsls	r2, r3, #30
 8006dee:	bf04      	itt	eq
 8006df0:	089b      	lsreq	r3, r3, #2
 8006df2:	3002      	addeq	r0, #2
 8006df4:	07da      	lsls	r2, r3, #31
 8006df6:	d402      	bmi.n	8006dfe <__lo0bits+0x4e>
 8006df8:	085b      	lsrs	r3, r3, #1
 8006dfa:	d006      	beq.n	8006e0a <__lo0bits+0x5a>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	600b      	str	r3, [r1, #0]
 8006e00:	4770      	bx	lr
 8006e02:	4610      	mov	r0, r2
 8006e04:	e7e9      	b.n	8006dda <__lo0bits+0x2a>
 8006e06:	2000      	movs	r0, #0
 8006e08:	4770      	bx	lr
 8006e0a:	2020      	movs	r0, #32
 8006e0c:	4770      	bx	lr

08006e0e <__i2b>:
 8006e0e:	b510      	push	{r4, lr}
 8006e10:	460c      	mov	r4, r1
 8006e12:	2101      	movs	r1, #1
 8006e14:	f7ff ff27 	bl	8006c66 <_Balloc>
 8006e18:	2201      	movs	r2, #1
 8006e1a:	6144      	str	r4, [r0, #20]
 8006e1c:	6102      	str	r2, [r0, #16]
 8006e1e:	bd10      	pop	{r4, pc}

08006e20 <__multiply>:
 8006e20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e24:	4614      	mov	r4, r2
 8006e26:	690a      	ldr	r2, [r1, #16]
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	4688      	mov	r8, r1
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	bfbe      	ittt	lt
 8006e30:	460b      	movlt	r3, r1
 8006e32:	46a0      	movlt	r8, r4
 8006e34:	461c      	movlt	r4, r3
 8006e36:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e3a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006e3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006e42:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e46:	eb07 0609 	add.w	r6, r7, r9
 8006e4a:	42b3      	cmp	r3, r6
 8006e4c:	bfb8      	it	lt
 8006e4e:	3101      	addlt	r1, #1
 8006e50:	f7ff ff09 	bl	8006c66 <_Balloc>
 8006e54:	f100 0514 	add.w	r5, r0, #20
 8006e58:	462b      	mov	r3, r5
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006e60:	4573      	cmp	r3, lr
 8006e62:	d316      	bcc.n	8006e92 <__multiply+0x72>
 8006e64:	f104 0214 	add.w	r2, r4, #20
 8006e68:	f108 0114 	add.w	r1, r8, #20
 8006e6c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006e70:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006e74:	9300      	str	r3, [sp, #0]
 8006e76:	9b00      	ldr	r3, [sp, #0]
 8006e78:	9201      	str	r2, [sp, #4]
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d80c      	bhi.n	8006e98 <__multiply+0x78>
 8006e7e:	2e00      	cmp	r6, #0
 8006e80:	dd03      	ble.n	8006e8a <__multiply+0x6a>
 8006e82:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d05d      	beq.n	8006f46 <__multiply+0x126>
 8006e8a:	6106      	str	r6, [r0, #16]
 8006e8c:	b003      	add	sp, #12
 8006e8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e92:	f843 2b04 	str.w	r2, [r3], #4
 8006e96:	e7e3      	b.n	8006e60 <__multiply+0x40>
 8006e98:	f8b2 b000 	ldrh.w	fp, [r2]
 8006e9c:	f1bb 0f00 	cmp.w	fp, #0
 8006ea0:	d023      	beq.n	8006eea <__multiply+0xca>
 8006ea2:	4689      	mov	r9, r1
 8006ea4:	46ac      	mov	ip, r5
 8006ea6:	f04f 0800 	mov.w	r8, #0
 8006eaa:	f859 4b04 	ldr.w	r4, [r9], #4
 8006eae:	f8dc a000 	ldr.w	sl, [ip]
 8006eb2:	b2a3      	uxth	r3, r4
 8006eb4:	fa1f fa8a 	uxth.w	sl, sl
 8006eb8:	fb0b a303 	mla	r3, fp, r3, sl
 8006ebc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006ec0:	f8dc 4000 	ldr.w	r4, [ip]
 8006ec4:	4443      	add	r3, r8
 8006ec6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006eca:	fb0b 840a 	mla	r4, fp, sl, r8
 8006ece:	46e2      	mov	sl, ip
 8006ed0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006ed4:	b29b      	uxth	r3, r3
 8006ed6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006eda:	454f      	cmp	r7, r9
 8006edc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006ee0:	f84a 3b04 	str.w	r3, [sl], #4
 8006ee4:	d82b      	bhi.n	8006f3e <__multiply+0x11e>
 8006ee6:	f8cc 8004 	str.w	r8, [ip, #4]
 8006eea:	9b01      	ldr	r3, [sp, #4]
 8006eec:	3204      	adds	r2, #4
 8006eee:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006ef2:	f1ba 0f00 	cmp.w	sl, #0
 8006ef6:	d020      	beq.n	8006f3a <__multiply+0x11a>
 8006ef8:	4689      	mov	r9, r1
 8006efa:	46a8      	mov	r8, r5
 8006efc:	f04f 0b00 	mov.w	fp, #0
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	f8b9 c000 	ldrh.w	ip, [r9]
 8006f06:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	fb0a 440c 	mla	r4, sl, ip, r4
 8006f10:	46c4      	mov	ip, r8
 8006f12:	445c      	add	r4, fp
 8006f14:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006f18:	f84c 3b04 	str.w	r3, [ip], #4
 8006f1c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006f20:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006f24:	0c1b      	lsrs	r3, r3, #16
 8006f26:	fb0a b303 	mla	r3, sl, r3, fp
 8006f2a:	454f      	cmp	r7, r9
 8006f2c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006f30:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006f34:	d805      	bhi.n	8006f42 <__multiply+0x122>
 8006f36:	f8c8 3004 	str.w	r3, [r8, #4]
 8006f3a:	3504      	adds	r5, #4
 8006f3c:	e79b      	b.n	8006e76 <__multiply+0x56>
 8006f3e:	46d4      	mov	ip, sl
 8006f40:	e7b3      	b.n	8006eaa <__multiply+0x8a>
 8006f42:	46e0      	mov	r8, ip
 8006f44:	e7dd      	b.n	8006f02 <__multiply+0xe2>
 8006f46:	3e01      	subs	r6, #1
 8006f48:	e799      	b.n	8006e7e <__multiply+0x5e>
	...

08006f4c <__pow5mult>:
 8006f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f50:	4615      	mov	r5, r2
 8006f52:	f012 0203 	ands.w	r2, r2, #3
 8006f56:	4606      	mov	r6, r0
 8006f58:	460f      	mov	r7, r1
 8006f5a:	d007      	beq.n	8006f6c <__pow5mult+0x20>
 8006f5c:	4c21      	ldr	r4, [pc, #132]	; (8006fe4 <__pow5mult+0x98>)
 8006f5e:	3a01      	subs	r2, #1
 8006f60:	2300      	movs	r3, #0
 8006f62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f66:	f7ff fec9 	bl	8006cfc <__multadd>
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	10ad      	asrs	r5, r5, #2
 8006f6e:	d035      	beq.n	8006fdc <__pow5mult+0x90>
 8006f70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f72:	b93c      	cbnz	r4, 8006f84 <__pow5mult+0x38>
 8006f74:	2010      	movs	r0, #16
 8006f76:	f7ff fe55 	bl	8006c24 <malloc>
 8006f7a:	6270      	str	r0, [r6, #36]	; 0x24
 8006f7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f80:	6004      	str	r4, [r0, #0]
 8006f82:	60c4      	str	r4, [r0, #12]
 8006f84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f8c:	b94c      	cbnz	r4, 8006fa2 <__pow5mult+0x56>
 8006f8e:	f240 2171 	movw	r1, #625	; 0x271
 8006f92:	4630      	mov	r0, r6
 8006f94:	f7ff ff3b 	bl	8006e0e <__i2b>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	4604      	mov	r4, r0
 8006f9c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006fa0:	6003      	str	r3, [r0, #0]
 8006fa2:	f04f 0800 	mov.w	r8, #0
 8006fa6:	07eb      	lsls	r3, r5, #31
 8006fa8:	d50a      	bpl.n	8006fc0 <__pow5mult+0x74>
 8006faa:	4639      	mov	r1, r7
 8006fac:	4622      	mov	r2, r4
 8006fae:	4630      	mov	r0, r6
 8006fb0:	f7ff ff36 	bl	8006e20 <__multiply>
 8006fb4:	4681      	mov	r9, r0
 8006fb6:	4639      	mov	r1, r7
 8006fb8:	4630      	mov	r0, r6
 8006fba:	f7ff fe88 	bl	8006cce <_Bfree>
 8006fbe:	464f      	mov	r7, r9
 8006fc0:	106d      	asrs	r5, r5, #1
 8006fc2:	d00b      	beq.n	8006fdc <__pow5mult+0x90>
 8006fc4:	6820      	ldr	r0, [r4, #0]
 8006fc6:	b938      	cbnz	r0, 8006fd8 <__pow5mult+0x8c>
 8006fc8:	4622      	mov	r2, r4
 8006fca:	4621      	mov	r1, r4
 8006fcc:	4630      	mov	r0, r6
 8006fce:	f7ff ff27 	bl	8006e20 <__multiply>
 8006fd2:	6020      	str	r0, [r4, #0]
 8006fd4:	f8c0 8000 	str.w	r8, [r0]
 8006fd8:	4604      	mov	r4, r0
 8006fda:	e7e4      	b.n	8006fa6 <__pow5mult+0x5a>
 8006fdc:	4638      	mov	r0, r7
 8006fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fe2:	bf00      	nop
 8006fe4:	08008048 	.word	0x08008048

08006fe8 <__lshift>:
 8006fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fec:	460c      	mov	r4, r1
 8006fee:	4607      	mov	r7, r0
 8006ff0:	4616      	mov	r6, r2
 8006ff2:	6923      	ldr	r3, [r4, #16]
 8006ff4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ff8:	eb0a 0903 	add.w	r9, sl, r3
 8006ffc:	6849      	ldr	r1, [r1, #4]
 8006ffe:	68a3      	ldr	r3, [r4, #8]
 8007000:	f109 0501 	add.w	r5, r9, #1
 8007004:	42ab      	cmp	r3, r5
 8007006:	db32      	blt.n	800706e <__lshift+0x86>
 8007008:	4638      	mov	r0, r7
 800700a:	f7ff fe2c 	bl	8006c66 <_Balloc>
 800700e:	2300      	movs	r3, #0
 8007010:	4680      	mov	r8, r0
 8007012:	461a      	mov	r2, r3
 8007014:	f100 0114 	add.w	r1, r0, #20
 8007018:	4553      	cmp	r3, sl
 800701a:	db2b      	blt.n	8007074 <__lshift+0x8c>
 800701c:	6920      	ldr	r0, [r4, #16]
 800701e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007022:	f104 0314 	add.w	r3, r4, #20
 8007026:	f016 021f 	ands.w	r2, r6, #31
 800702a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800702e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007032:	d025      	beq.n	8007080 <__lshift+0x98>
 8007034:	2000      	movs	r0, #0
 8007036:	f1c2 0e20 	rsb	lr, r2, #32
 800703a:	468a      	mov	sl, r1
 800703c:	681e      	ldr	r6, [r3, #0]
 800703e:	4096      	lsls	r6, r2
 8007040:	4330      	orrs	r0, r6
 8007042:	f84a 0b04 	str.w	r0, [sl], #4
 8007046:	f853 0b04 	ldr.w	r0, [r3], #4
 800704a:	459c      	cmp	ip, r3
 800704c:	fa20 f00e 	lsr.w	r0, r0, lr
 8007050:	d814      	bhi.n	800707c <__lshift+0x94>
 8007052:	6048      	str	r0, [r1, #4]
 8007054:	b108      	cbz	r0, 800705a <__lshift+0x72>
 8007056:	f109 0502 	add.w	r5, r9, #2
 800705a:	3d01      	subs	r5, #1
 800705c:	4638      	mov	r0, r7
 800705e:	f8c8 5010 	str.w	r5, [r8, #16]
 8007062:	4621      	mov	r1, r4
 8007064:	f7ff fe33 	bl	8006cce <_Bfree>
 8007068:	4640      	mov	r0, r8
 800706a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706e:	3101      	adds	r1, #1
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	e7c7      	b.n	8007004 <__lshift+0x1c>
 8007074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007078:	3301      	adds	r3, #1
 800707a:	e7cd      	b.n	8007018 <__lshift+0x30>
 800707c:	4651      	mov	r1, sl
 800707e:	e7dc      	b.n	800703a <__lshift+0x52>
 8007080:	3904      	subs	r1, #4
 8007082:	f853 2b04 	ldr.w	r2, [r3], #4
 8007086:	459c      	cmp	ip, r3
 8007088:	f841 2f04 	str.w	r2, [r1, #4]!
 800708c:	d8f9      	bhi.n	8007082 <__lshift+0x9a>
 800708e:	e7e4      	b.n	800705a <__lshift+0x72>

08007090 <__mcmp>:
 8007090:	6903      	ldr	r3, [r0, #16]
 8007092:	690a      	ldr	r2, [r1, #16]
 8007094:	b530      	push	{r4, r5, lr}
 8007096:	1a9b      	subs	r3, r3, r2
 8007098:	d10c      	bne.n	80070b4 <__mcmp+0x24>
 800709a:	0092      	lsls	r2, r2, #2
 800709c:	3014      	adds	r0, #20
 800709e:	3114      	adds	r1, #20
 80070a0:	1884      	adds	r4, r0, r2
 80070a2:	4411      	add	r1, r2
 80070a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80070a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80070ac:	4295      	cmp	r5, r2
 80070ae:	d003      	beq.n	80070b8 <__mcmp+0x28>
 80070b0:	d305      	bcc.n	80070be <__mcmp+0x2e>
 80070b2:	2301      	movs	r3, #1
 80070b4:	4618      	mov	r0, r3
 80070b6:	bd30      	pop	{r4, r5, pc}
 80070b8:	42a0      	cmp	r0, r4
 80070ba:	d3f3      	bcc.n	80070a4 <__mcmp+0x14>
 80070bc:	e7fa      	b.n	80070b4 <__mcmp+0x24>
 80070be:	f04f 33ff 	mov.w	r3, #4294967295
 80070c2:	e7f7      	b.n	80070b4 <__mcmp+0x24>

080070c4 <__mdiff>:
 80070c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c8:	460d      	mov	r5, r1
 80070ca:	4607      	mov	r7, r0
 80070cc:	4611      	mov	r1, r2
 80070ce:	4628      	mov	r0, r5
 80070d0:	4614      	mov	r4, r2
 80070d2:	f7ff ffdd 	bl	8007090 <__mcmp>
 80070d6:	1e06      	subs	r6, r0, #0
 80070d8:	d108      	bne.n	80070ec <__mdiff+0x28>
 80070da:	4631      	mov	r1, r6
 80070dc:	4638      	mov	r0, r7
 80070de:	f7ff fdc2 	bl	8006c66 <_Balloc>
 80070e2:	2301      	movs	r3, #1
 80070e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80070e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070ec:	bfa4      	itt	ge
 80070ee:	4623      	movge	r3, r4
 80070f0:	462c      	movge	r4, r5
 80070f2:	4638      	mov	r0, r7
 80070f4:	6861      	ldr	r1, [r4, #4]
 80070f6:	bfa6      	itte	ge
 80070f8:	461d      	movge	r5, r3
 80070fa:	2600      	movge	r6, #0
 80070fc:	2601      	movlt	r6, #1
 80070fe:	f7ff fdb2 	bl	8006c66 <_Balloc>
 8007102:	f04f 0e00 	mov.w	lr, #0
 8007106:	60c6      	str	r6, [r0, #12]
 8007108:	692b      	ldr	r3, [r5, #16]
 800710a:	6926      	ldr	r6, [r4, #16]
 800710c:	f104 0214 	add.w	r2, r4, #20
 8007110:	f105 0914 	add.w	r9, r5, #20
 8007114:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007118:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800711c:	f100 0114 	add.w	r1, r0, #20
 8007120:	f852 ab04 	ldr.w	sl, [r2], #4
 8007124:	f859 5b04 	ldr.w	r5, [r9], #4
 8007128:	fa1f f38a 	uxth.w	r3, sl
 800712c:	4473      	add	r3, lr
 800712e:	b2ac      	uxth	r4, r5
 8007130:	1b1b      	subs	r3, r3, r4
 8007132:	0c2c      	lsrs	r4, r5, #16
 8007134:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007138:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800713c:	b29b      	uxth	r3, r3
 800713e:	ea4f 4e24 	mov.w	lr, r4, asr #16
 8007142:	45c8      	cmp	r8, r9
 8007144:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007148:	4694      	mov	ip, r2
 800714a:	f841 4b04 	str.w	r4, [r1], #4
 800714e:	d8e7      	bhi.n	8007120 <__mdiff+0x5c>
 8007150:	45bc      	cmp	ip, r7
 8007152:	d304      	bcc.n	800715e <__mdiff+0x9a>
 8007154:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8007158:	b183      	cbz	r3, 800717c <__mdiff+0xb8>
 800715a:	6106      	str	r6, [r0, #16]
 800715c:	e7c4      	b.n	80070e8 <__mdiff+0x24>
 800715e:	f85c 4b04 	ldr.w	r4, [ip], #4
 8007162:	b2a2      	uxth	r2, r4
 8007164:	4472      	add	r2, lr
 8007166:	1413      	asrs	r3, r2, #16
 8007168:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800716c:	b292      	uxth	r2, r2
 800716e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007172:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8007176:	f841 2b04 	str.w	r2, [r1], #4
 800717a:	e7e9      	b.n	8007150 <__mdiff+0x8c>
 800717c:	3e01      	subs	r6, #1
 800717e:	e7e9      	b.n	8007154 <__mdiff+0x90>

08007180 <__d2b>:
 8007180:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007184:	461c      	mov	r4, r3
 8007186:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800718a:	2101      	movs	r1, #1
 800718c:	4690      	mov	r8, r2
 800718e:	f7ff fd6a 	bl	8006c66 <_Balloc>
 8007192:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8007196:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800719a:	4607      	mov	r7, r0
 800719c:	bb34      	cbnz	r4, 80071ec <__d2b+0x6c>
 800719e:	9201      	str	r2, [sp, #4]
 80071a0:	f1b8 0200 	subs.w	r2, r8, #0
 80071a4:	d027      	beq.n	80071f6 <__d2b+0x76>
 80071a6:	a802      	add	r0, sp, #8
 80071a8:	f840 2d08 	str.w	r2, [r0, #-8]!
 80071ac:	f7ff fe00 	bl	8006db0 <__lo0bits>
 80071b0:	9900      	ldr	r1, [sp, #0]
 80071b2:	b1f0      	cbz	r0, 80071f2 <__d2b+0x72>
 80071b4:	9a01      	ldr	r2, [sp, #4]
 80071b6:	f1c0 0320 	rsb	r3, r0, #32
 80071ba:	fa02 f303 	lsl.w	r3, r2, r3
 80071be:	430b      	orrs	r3, r1
 80071c0:	40c2      	lsrs	r2, r0
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	9201      	str	r2, [sp, #4]
 80071c6:	9b01      	ldr	r3, [sp, #4]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bf14      	ite	ne
 80071cc:	2102      	movne	r1, #2
 80071ce:	2101      	moveq	r1, #1
 80071d0:	61bb      	str	r3, [r7, #24]
 80071d2:	6139      	str	r1, [r7, #16]
 80071d4:	b1c4      	cbz	r4, 8007208 <__d2b+0x88>
 80071d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80071da:	4404      	add	r4, r0
 80071dc:	6034      	str	r4, [r6, #0]
 80071de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80071e2:	6028      	str	r0, [r5, #0]
 80071e4:	4638      	mov	r0, r7
 80071e6:	b002      	add	sp, #8
 80071e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071ec:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80071f0:	e7d5      	b.n	800719e <__d2b+0x1e>
 80071f2:	6179      	str	r1, [r7, #20]
 80071f4:	e7e7      	b.n	80071c6 <__d2b+0x46>
 80071f6:	a801      	add	r0, sp, #4
 80071f8:	f7ff fdda 	bl	8006db0 <__lo0bits>
 80071fc:	2101      	movs	r1, #1
 80071fe:	9b01      	ldr	r3, [sp, #4]
 8007200:	6139      	str	r1, [r7, #16]
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	3020      	adds	r0, #32
 8007206:	e7e5      	b.n	80071d4 <__d2b+0x54>
 8007208:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800720c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007210:	6030      	str	r0, [r6, #0]
 8007212:	6918      	ldr	r0, [r3, #16]
 8007214:	f7ff fdad 	bl	8006d72 <__hi0bits>
 8007218:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800721c:	e7e1      	b.n	80071e2 <__d2b+0x62>

0800721e <_calloc_r>:
 800721e:	b538      	push	{r3, r4, r5, lr}
 8007220:	fb02 f401 	mul.w	r4, r2, r1
 8007224:	4621      	mov	r1, r4
 8007226:	f000 f855 	bl	80072d4 <_malloc_r>
 800722a:	4605      	mov	r5, r0
 800722c:	b118      	cbz	r0, 8007236 <_calloc_r+0x18>
 800722e:	4622      	mov	r2, r4
 8007230:	2100      	movs	r1, #0
 8007232:	f7fe fa2f 	bl	8005694 <memset>
 8007236:	4628      	mov	r0, r5
 8007238:	bd38      	pop	{r3, r4, r5, pc}
	...

0800723c <_free_r>:
 800723c:	b538      	push	{r3, r4, r5, lr}
 800723e:	4605      	mov	r5, r0
 8007240:	2900      	cmp	r1, #0
 8007242:	d043      	beq.n	80072cc <_free_r+0x90>
 8007244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007248:	1f0c      	subs	r4, r1, #4
 800724a:	2b00      	cmp	r3, #0
 800724c:	bfb8      	it	lt
 800724e:	18e4      	addlt	r4, r4, r3
 8007250:	f000 fa27 	bl	80076a2 <__malloc_lock>
 8007254:	4a1e      	ldr	r2, [pc, #120]	; (80072d0 <_free_r+0x94>)
 8007256:	6813      	ldr	r3, [r2, #0]
 8007258:	4610      	mov	r0, r2
 800725a:	b933      	cbnz	r3, 800726a <_free_r+0x2e>
 800725c:	6063      	str	r3, [r4, #4]
 800725e:	6014      	str	r4, [r2, #0]
 8007260:	4628      	mov	r0, r5
 8007262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007266:	f000 ba1d 	b.w	80076a4 <__malloc_unlock>
 800726a:	42a3      	cmp	r3, r4
 800726c:	d90b      	bls.n	8007286 <_free_r+0x4a>
 800726e:	6821      	ldr	r1, [r4, #0]
 8007270:	1862      	adds	r2, r4, r1
 8007272:	4293      	cmp	r3, r2
 8007274:	bf01      	itttt	eq
 8007276:	681a      	ldreq	r2, [r3, #0]
 8007278:	685b      	ldreq	r3, [r3, #4]
 800727a:	1852      	addeq	r2, r2, r1
 800727c:	6022      	streq	r2, [r4, #0]
 800727e:	6063      	str	r3, [r4, #4]
 8007280:	6004      	str	r4, [r0, #0]
 8007282:	e7ed      	b.n	8007260 <_free_r+0x24>
 8007284:	4613      	mov	r3, r2
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	b10a      	cbz	r2, 800728e <_free_r+0x52>
 800728a:	42a2      	cmp	r2, r4
 800728c:	d9fa      	bls.n	8007284 <_free_r+0x48>
 800728e:	6819      	ldr	r1, [r3, #0]
 8007290:	1858      	adds	r0, r3, r1
 8007292:	42a0      	cmp	r0, r4
 8007294:	d10b      	bne.n	80072ae <_free_r+0x72>
 8007296:	6820      	ldr	r0, [r4, #0]
 8007298:	4401      	add	r1, r0
 800729a:	1858      	adds	r0, r3, r1
 800729c:	4282      	cmp	r2, r0
 800729e:	6019      	str	r1, [r3, #0]
 80072a0:	d1de      	bne.n	8007260 <_free_r+0x24>
 80072a2:	6810      	ldr	r0, [r2, #0]
 80072a4:	6852      	ldr	r2, [r2, #4]
 80072a6:	4401      	add	r1, r0
 80072a8:	6019      	str	r1, [r3, #0]
 80072aa:	605a      	str	r2, [r3, #4]
 80072ac:	e7d8      	b.n	8007260 <_free_r+0x24>
 80072ae:	d902      	bls.n	80072b6 <_free_r+0x7a>
 80072b0:	230c      	movs	r3, #12
 80072b2:	602b      	str	r3, [r5, #0]
 80072b4:	e7d4      	b.n	8007260 <_free_r+0x24>
 80072b6:	6820      	ldr	r0, [r4, #0]
 80072b8:	1821      	adds	r1, r4, r0
 80072ba:	428a      	cmp	r2, r1
 80072bc:	bf01      	itttt	eq
 80072be:	6811      	ldreq	r1, [r2, #0]
 80072c0:	6852      	ldreq	r2, [r2, #4]
 80072c2:	1809      	addeq	r1, r1, r0
 80072c4:	6021      	streq	r1, [r4, #0]
 80072c6:	6062      	str	r2, [r4, #4]
 80072c8:	605c      	str	r4, [r3, #4]
 80072ca:	e7c9      	b.n	8007260 <_free_r+0x24>
 80072cc:	bd38      	pop	{r3, r4, r5, pc}
 80072ce:	bf00      	nop
 80072d0:	20000610 	.word	0x20000610

080072d4 <_malloc_r>:
 80072d4:	b570      	push	{r4, r5, r6, lr}
 80072d6:	1ccd      	adds	r5, r1, #3
 80072d8:	f025 0503 	bic.w	r5, r5, #3
 80072dc:	3508      	adds	r5, #8
 80072de:	2d0c      	cmp	r5, #12
 80072e0:	bf38      	it	cc
 80072e2:	250c      	movcc	r5, #12
 80072e4:	2d00      	cmp	r5, #0
 80072e6:	4606      	mov	r6, r0
 80072e8:	db01      	blt.n	80072ee <_malloc_r+0x1a>
 80072ea:	42a9      	cmp	r1, r5
 80072ec:	d903      	bls.n	80072f6 <_malloc_r+0x22>
 80072ee:	230c      	movs	r3, #12
 80072f0:	6033      	str	r3, [r6, #0]
 80072f2:	2000      	movs	r0, #0
 80072f4:	bd70      	pop	{r4, r5, r6, pc}
 80072f6:	f000 f9d4 	bl	80076a2 <__malloc_lock>
 80072fa:	4a21      	ldr	r2, [pc, #132]	; (8007380 <_malloc_r+0xac>)
 80072fc:	6814      	ldr	r4, [r2, #0]
 80072fe:	4621      	mov	r1, r4
 8007300:	b991      	cbnz	r1, 8007328 <_malloc_r+0x54>
 8007302:	4c20      	ldr	r4, [pc, #128]	; (8007384 <_malloc_r+0xb0>)
 8007304:	6823      	ldr	r3, [r4, #0]
 8007306:	b91b      	cbnz	r3, 8007310 <_malloc_r+0x3c>
 8007308:	4630      	mov	r0, r6
 800730a:	f000 f98f 	bl	800762c <_sbrk_r>
 800730e:	6020      	str	r0, [r4, #0]
 8007310:	4629      	mov	r1, r5
 8007312:	4630      	mov	r0, r6
 8007314:	f000 f98a 	bl	800762c <_sbrk_r>
 8007318:	1c43      	adds	r3, r0, #1
 800731a:	d124      	bne.n	8007366 <_malloc_r+0x92>
 800731c:	230c      	movs	r3, #12
 800731e:	4630      	mov	r0, r6
 8007320:	6033      	str	r3, [r6, #0]
 8007322:	f000 f9bf 	bl	80076a4 <__malloc_unlock>
 8007326:	e7e4      	b.n	80072f2 <_malloc_r+0x1e>
 8007328:	680b      	ldr	r3, [r1, #0]
 800732a:	1b5b      	subs	r3, r3, r5
 800732c:	d418      	bmi.n	8007360 <_malloc_r+0x8c>
 800732e:	2b0b      	cmp	r3, #11
 8007330:	d90f      	bls.n	8007352 <_malloc_r+0x7e>
 8007332:	600b      	str	r3, [r1, #0]
 8007334:	18cc      	adds	r4, r1, r3
 8007336:	50cd      	str	r5, [r1, r3]
 8007338:	4630      	mov	r0, r6
 800733a:	f000 f9b3 	bl	80076a4 <__malloc_unlock>
 800733e:	f104 000b 	add.w	r0, r4, #11
 8007342:	1d23      	adds	r3, r4, #4
 8007344:	f020 0007 	bic.w	r0, r0, #7
 8007348:	1ac3      	subs	r3, r0, r3
 800734a:	d0d3      	beq.n	80072f4 <_malloc_r+0x20>
 800734c:	425a      	negs	r2, r3
 800734e:	50e2      	str	r2, [r4, r3]
 8007350:	e7d0      	b.n	80072f4 <_malloc_r+0x20>
 8007352:	684b      	ldr	r3, [r1, #4]
 8007354:	428c      	cmp	r4, r1
 8007356:	bf16      	itet	ne
 8007358:	6063      	strne	r3, [r4, #4]
 800735a:	6013      	streq	r3, [r2, #0]
 800735c:	460c      	movne	r4, r1
 800735e:	e7eb      	b.n	8007338 <_malloc_r+0x64>
 8007360:	460c      	mov	r4, r1
 8007362:	6849      	ldr	r1, [r1, #4]
 8007364:	e7cc      	b.n	8007300 <_malloc_r+0x2c>
 8007366:	1cc4      	adds	r4, r0, #3
 8007368:	f024 0403 	bic.w	r4, r4, #3
 800736c:	42a0      	cmp	r0, r4
 800736e:	d005      	beq.n	800737c <_malloc_r+0xa8>
 8007370:	1a21      	subs	r1, r4, r0
 8007372:	4630      	mov	r0, r6
 8007374:	f000 f95a 	bl	800762c <_sbrk_r>
 8007378:	3001      	adds	r0, #1
 800737a:	d0cf      	beq.n	800731c <_malloc_r+0x48>
 800737c:	6025      	str	r5, [r4, #0]
 800737e:	e7db      	b.n	8007338 <_malloc_r+0x64>
 8007380:	20000610 	.word	0x20000610
 8007384:	20000614 	.word	0x20000614

08007388 <__ssputs_r>:
 8007388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800738c:	688e      	ldr	r6, [r1, #8]
 800738e:	4682      	mov	sl, r0
 8007390:	429e      	cmp	r6, r3
 8007392:	460c      	mov	r4, r1
 8007394:	4690      	mov	r8, r2
 8007396:	4699      	mov	r9, r3
 8007398:	d837      	bhi.n	800740a <__ssputs_r+0x82>
 800739a:	898a      	ldrh	r2, [r1, #12]
 800739c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80073a0:	d031      	beq.n	8007406 <__ssputs_r+0x7e>
 80073a2:	2302      	movs	r3, #2
 80073a4:	6825      	ldr	r5, [r4, #0]
 80073a6:	6909      	ldr	r1, [r1, #16]
 80073a8:	1a6f      	subs	r7, r5, r1
 80073aa:	6965      	ldr	r5, [r4, #20]
 80073ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80073b0:	fb95 f5f3 	sdiv	r5, r5, r3
 80073b4:	f109 0301 	add.w	r3, r9, #1
 80073b8:	443b      	add	r3, r7
 80073ba:	429d      	cmp	r5, r3
 80073bc:	bf38      	it	cc
 80073be:	461d      	movcc	r5, r3
 80073c0:	0553      	lsls	r3, r2, #21
 80073c2:	d530      	bpl.n	8007426 <__ssputs_r+0x9e>
 80073c4:	4629      	mov	r1, r5
 80073c6:	f7ff ff85 	bl	80072d4 <_malloc_r>
 80073ca:	4606      	mov	r6, r0
 80073cc:	b950      	cbnz	r0, 80073e4 <__ssputs_r+0x5c>
 80073ce:	230c      	movs	r3, #12
 80073d0:	f04f 30ff 	mov.w	r0, #4294967295
 80073d4:	f8ca 3000 	str.w	r3, [sl]
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073de:	81a3      	strh	r3, [r4, #12]
 80073e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073e4:	463a      	mov	r2, r7
 80073e6:	6921      	ldr	r1, [r4, #16]
 80073e8:	f7ff fc32 	bl	8006c50 <memcpy>
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80073f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073f6:	81a3      	strh	r3, [r4, #12]
 80073f8:	6126      	str	r6, [r4, #16]
 80073fa:	443e      	add	r6, r7
 80073fc:	6026      	str	r6, [r4, #0]
 80073fe:	464e      	mov	r6, r9
 8007400:	6165      	str	r5, [r4, #20]
 8007402:	1bed      	subs	r5, r5, r7
 8007404:	60a5      	str	r5, [r4, #8]
 8007406:	454e      	cmp	r6, r9
 8007408:	d900      	bls.n	800740c <__ssputs_r+0x84>
 800740a:	464e      	mov	r6, r9
 800740c:	4632      	mov	r2, r6
 800740e:	4641      	mov	r1, r8
 8007410:	6820      	ldr	r0, [r4, #0]
 8007412:	f000 f92d 	bl	8007670 <memmove>
 8007416:	68a3      	ldr	r3, [r4, #8]
 8007418:	2000      	movs	r0, #0
 800741a:	1b9b      	subs	r3, r3, r6
 800741c:	60a3      	str	r3, [r4, #8]
 800741e:	6823      	ldr	r3, [r4, #0]
 8007420:	441e      	add	r6, r3
 8007422:	6026      	str	r6, [r4, #0]
 8007424:	e7dc      	b.n	80073e0 <__ssputs_r+0x58>
 8007426:	462a      	mov	r2, r5
 8007428:	f000 f93d 	bl	80076a6 <_realloc_r>
 800742c:	4606      	mov	r6, r0
 800742e:	2800      	cmp	r0, #0
 8007430:	d1e2      	bne.n	80073f8 <__ssputs_r+0x70>
 8007432:	6921      	ldr	r1, [r4, #16]
 8007434:	4650      	mov	r0, sl
 8007436:	f7ff ff01 	bl	800723c <_free_r>
 800743a:	e7c8      	b.n	80073ce <__ssputs_r+0x46>

0800743c <_svfiprintf_r>:
 800743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	461d      	mov	r5, r3
 8007442:	898b      	ldrh	r3, [r1, #12]
 8007444:	b09d      	sub	sp, #116	; 0x74
 8007446:	061f      	lsls	r7, r3, #24
 8007448:	4680      	mov	r8, r0
 800744a:	460c      	mov	r4, r1
 800744c:	4616      	mov	r6, r2
 800744e:	d50f      	bpl.n	8007470 <_svfiprintf_r+0x34>
 8007450:	690b      	ldr	r3, [r1, #16]
 8007452:	b96b      	cbnz	r3, 8007470 <_svfiprintf_r+0x34>
 8007454:	2140      	movs	r1, #64	; 0x40
 8007456:	f7ff ff3d 	bl	80072d4 <_malloc_r>
 800745a:	6020      	str	r0, [r4, #0]
 800745c:	6120      	str	r0, [r4, #16]
 800745e:	b928      	cbnz	r0, 800746c <_svfiprintf_r+0x30>
 8007460:	230c      	movs	r3, #12
 8007462:	f8c8 3000 	str.w	r3, [r8]
 8007466:	f04f 30ff 	mov.w	r0, #4294967295
 800746a:	e0c8      	b.n	80075fe <_svfiprintf_r+0x1c2>
 800746c:	2340      	movs	r3, #64	; 0x40
 800746e:	6163      	str	r3, [r4, #20]
 8007470:	2300      	movs	r3, #0
 8007472:	9309      	str	r3, [sp, #36]	; 0x24
 8007474:	2320      	movs	r3, #32
 8007476:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800747a:	2330      	movs	r3, #48	; 0x30
 800747c:	f04f 0b01 	mov.w	fp, #1
 8007480:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007484:	9503      	str	r5, [sp, #12]
 8007486:	4637      	mov	r7, r6
 8007488:	463d      	mov	r5, r7
 800748a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800748e:	b10b      	cbz	r3, 8007494 <_svfiprintf_r+0x58>
 8007490:	2b25      	cmp	r3, #37	; 0x25
 8007492:	d13e      	bne.n	8007512 <_svfiprintf_r+0xd6>
 8007494:	ebb7 0a06 	subs.w	sl, r7, r6
 8007498:	d00b      	beq.n	80074b2 <_svfiprintf_r+0x76>
 800749a:	4653      	mov	r3, sl
 800749c:	4632      	mov	r2, r6
 800749e:	4621      	mov	r1, r4
 80074a0:	4640      	mov	r0, r8
 80074a2:	f7ff ff71 	bl	8007388 <__ssputs_r>
 80074a6:	3001      	adds	r0, #1
 80074a8:	f000 80a4 	beq.w	80075f4 <_svfiprintf_r+0x1b8>
 80074ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074ae:	4453      	add	r3, sl
 80074b0:	9309      	str	r3, [sp, #36]	; 0x24
 80074b2:	783b      	ldrb	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	f000 809d 	beq.w	80075f4 <_svfiprintf_r+0x1b8>
 80074ba:	2300      	movs	r3, #0
 80074bc:	f04f 32ff 	mov.w	r2, #4294967295
 80074c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074c4:	9304      	str	r3, [sp, #16]
 80074c6:	9307      	str	r3, [sp, #28]
 80074c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074cc:	931a      	str	r3, [sp, #104]	; 0x68
 80074ce:	462f      	mov	r7, r5
 80074d0:	2205      	movs	r2, #5
 80074d2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80074d6:	4850      	ldr	r0, [pc, #320]	; (8007618 <_svfiprintf_r+0x1dc>)
 80074d8:	f7ff fbac 	bl	8006c34 <memchr>
 80074dc:	9b04      	ldr	r3, [sp, #16]
 80074de:	b9d0      	cbnz	r0, 8007516 <_svfiprintf_r+0xda>
 80074e0:	06d9      	lsls	r1, r3, #27
 80074e2:	bf44      	itt	mi
 80074e4:	2220      	movmi	r2, #32
 80074e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074ea:	071a      	lsls	r2, r3, #28
 80074ec:	bf44      	itt	mi
 80074ee:	222b      	movmi	r2, #43	; 0x2b
 80074f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80074f4:	782a      	ldrb	r2, [r5, #0]
 80074f6:	2a2a      	cmp	r2, #42	; 0x2a
 80074f8:	d015      	beq.n	8007526 <_svfiprintf_r+0xea>
 80074fa:	462f      	mov	r7, r5
 80074fc:	2000      	movs	r0, #0
 80074fe:	250a      	movs	r5, #10
 8007500:	9a07      	ldr	r2, [sp, #28]
 8007502:	4639      	mov	r1, r7
 8007504:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007508:	3b30      	subs	r3, #48	; 0x30
 800750a:	2b09      	cmp	r3, #9
 800750c:	d94d      	bls.n	80075aa <_svfiprintf_r+0x16e>
 800750e:	b1b8      	cbz	r0, 8007540 <_svfiprintf_r+0x104>
 8007510:	e00f      	b.n	8007532 <_svfiprintf_r+0xf6>
 8007512:	462f      	mov	r7, r5
 8007514:	e7b8      	b.n	8007488 <_svfiprintf_r+0x4c>
 8007516:	4a40      	ldr	r2, [pc, #256]	; (8007618 <_svfiprintf_r+0x1dc>)
 8007518:	463d      	mov	r5, r7
 800751a:	1a80      	subs	r0, r0, r2
 800751c:	fa0b f000 	lsl.w	r0, fp, r0
 8007520:	4318      	orrs	r0, r3
 8007522:	9004      	str	r0, [sp, #16]
 8007524:	e7d3      	b.n	80074ce <_svfiprintf_r+0x92>
 8007526:	9a03      	ldr	r2, [sp, #12]
 8007528:	1d11      	adds	r1, r2, #4
 800752a:	6812      	ldr	r2, [r2, #0]
 800752c:	9103      	str	r1, [sp, #12]
 800752e:	2a00      	cmp	r2, #0
 8007530:	db01      	blt.n	8007536 <_svfiprintf_r+0xfa>
 8007532:	9207      	str	r2, [sp, #28]
 8007534:	e004      	b.n	8007540 <_svfiprintf_r+0x104>
 8007536:	4252      	negs	r2, r2
 8007538:	f043 0302 	orr.w	r3, r3, #2
 800753c:	9207      	str	r2, [sp, #28]
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	783b      	ldrb	r3, [r7, #0]
 8007542:	2b2e      	cmp	r3, #46	; 0x2e
 8007544:	d10c      	bne.n	8007560 <_svfiprintf_r+0x124>
 8007546:	787b      	ldrb	r3, [r7, #1]
 8007548:	2b2a      	cmp	r3, #42	; 0x2a
 800754a:	d133      	bne.n	80075b4 <_svfiprintf_r+0x178>
 800754c:	9b03      	ldr	r3, [sp, #12]
 800754e:	3702      	adds	r7, #2
 8007550:	1d1a      	adds	r2, r3, #4
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	9203      	str	r2, [sp, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	bfb8      	it	lt
 800755a:	f04f 33ff 	movlt.w	r3, #4294967295
 800755e:	9305      	str	r3, [sp, #20]
 8007560:	4d2e      	ldr	r5, [pc, #184]	; (800761c <_svfiprintf_r+0x1e0>)
 8007562:	2203      	movs	r2, #3
 8007564:	7839      	ldrb	r1, [r7, #0]
 8007566:	4628      	mov	r0, r5
 8007568:	f7ff fb64 	bl	8006c34 <memchr>
 800756c:	b138      	cbz	r0, 800757e <_svfiprintf_r+0x142>
 800756e:	2340      	movs	r3, #64	; 0x40
 8007570:	1b40      	subs	r0, r0, r5
 8007572:	fa03 f000 	lsl.w	r0, r3, r0
 8007576:	9b04      	ldr	r3, [sp, #16]
 8007578:	3701      	adds	r7, #1
 800757a:	4303      	orrs	r3, r0
 800757c:	9304      	str	r3, [sp, #16]
 800757e:	7839      	ldrb	r1, [r7, #0]
 8007580:	2206      	movs	r2, #6
 8007582:	4827      	ldr	r0, [pc, #156]	; (8007620 <_svfiprintf_r+0x1e4>)
 8007584:	1c7e      	adds	r6, r7, #1
 8007586:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800758a:	f7ff fb53 	bl	8006c34 <memchr>
 800758e:	2800      	cmp	r0, #0
 8007590:	d038      	beq.n	8007604 <_svfiprintf_r+0x1c8>
 8007592:	4b24      	ldr	r3, [pc, #144]	; (8007624 <_svfiprintf_r+0x1e8>)
 8007594:	bb13      	cbnz	r3, 80075dc <_svfiprintf_r+0x1a0>
 8007596:	9b03      	ldr	r3, [sp, #12]
 8007598:	3307      	adds	r3, #7
 800759a:	f023 0307 	bic.w	r3, r3, #7
 800759e:	3308      	adds	r3, #8
 80075a0:	9303      	str	r3, [sp, #12]
 80075a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075a4:	444b      	add	r3, r9
 80075a6:	9309      	str	r3, [sp, #36]	; 0x24
 80075a8:	e76d      	b.n	8007486 <_svfiprintf_r+0x4a>
 80075aa:	fb05 3202 	mla	r2, r5, r2, r3
 80075ae:	2001      	movs	r0, #1
 80075b0:	460f      	mov	r7, r1
 80075b2:	e7a6      	b.n	8007502 <_svfiprintf_r+0xc6>
 80075b4:	2300      	movs	r3, #0
 80075b6:	250a      	movs	r5, #10
 80075b8:	4619      	mov	r1, r3
 80075ba:	3701      	adds	r7, #1
 80075bc:	9305      	str	r3, [sp, #20]
 80075be:	4638      	mov	r0, r7
 80075c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075c4:	3a30      	subs	r2, #48	; 0x30
 80075c6:	2a09      	cmp	r2, #9
 80075c8:	d903      	bls.n	80075d2 <_svfiprintf_r+0x196>
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d0c8      	beq.n	8007560 <_svfiprintf_r+0x124>
 80075ce:	9105      	str	r1, [sp, #20]
 80075d0:	e7c6      	b.n	8007560 <_svfiprintf_r+0x124>
 80075d2:	fb05 2101 	mla	r1, r5, r1, r2
 80075d6:	2301      	movs	r3, #1
 80075d8:	4607      	mov	r7, r0
 80075da:	e7f0      	b.n	80075be <_svfiprintf_r+0x182>
 80075dc:	ab03      	add	r3, sp, #12
 80075de:	9300      	str	r3, [sp, #0]
 80075e0:	4622      	mov	r2, r4
 80075e2:	4b11      	ldr	r3, [pc, #68]	; (8007628 <_svfiprintf_r+0x1ec>)
 80075e4:	a904      	add	r1, sp, #16
 80075e6:	4640      	mov	r0, r8
 80075e8:	f7fe f8ee 	bl	80057c8 <_printf_float>
 80075ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80075f0:	4681      	mov	r9, r0
 80075f2:	d1d6      	bne.n	80075a2 <_svfiprintf_r+0x166>
 80075f4:	89a3      	ldrh	r3, [r4, #12]
 80075f6:	065b      	lsls	r3, r3, #25
 80075f8:	f53f af35 	bmi.w	8007466 <_svfiprintf_r+0x2a>
 80075fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075fe:	b01d      	add	sp, #116	; 0x74
 8007600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007604:	ab03      	add	r3, sp, #12
 8007606:	9300      	str	r3, [sp, #0]
 8007608:	4622      	mov	r2, r4
 800760a:	4b07      	ldr	r3, [pc, #28]	; (8007628 <_svfiprintf_r+0x1ec>)
 800760c:	a904      	add	r1, sp, #16
 800760e:	4640      	mov	r0, r8
 8007610:	f7fe fb86 	bl	8005d20 <_printf_i>
 8007614:	e7ea      	b.n	80075ec <_svfiprintf_r+0x1b0>
 8007616:	bf00      	nop
 8007618:	08008054 	.word	0x08008054
 800761c:	0800805a 	.word	0x0800805a
 8007620:	0800805e 	.word	0x0800805e
 8007624:	080057c9 	.word	0x080057c9
 8007628:	08007389 	.word	0x08007389

0800762c <_sbrk_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	2300      	movs	r3, #0
 8007630:	4c05      	ldr	r4, [pc, #20]	; (8007648 <_sbrk_r+0x1c>)
 8007632:	4605      	mov	r5, r0
 8007634:	4608      	mov	r0, r1
 8007636:	6023      	str	r3, [r4, #0]
 8007638:	f7fa fd40 	bl	80020bc <_sbrk>
 800763c:	1c43      	adds	r3, r0, #1
 800763e:	d102      	bne.n	8007646 <_sbrk_r+0x1a>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	b103      	cbz	r3, 8007646 <_sbrk_r+0x1a>
 8007644:	602b      	str	r3, [r5, #0]
 8007646:	bd38      	pop	{r3, r4, r5, pc}
 8007648:	20000808 	.word	0x20000808

0800764c <__ascii_mbtowc>:
 800764c:	b082      	sub	sp, #8
 800764e:	b901      	cbnz	r1, 8007652 <__ascii_mbtowc+0x6>
 8007650:	a901      	add	r1, sp, #4
 8007652:	b142      	cbz	r2, 8007666 <__ascii_mbtowc+0x1a>
 8007654:	b14b      	cbz	r3, 800766a <__ascii_mbtowc+0x1e>
 8007656:	7813      	ldrb	r3, [r2, #0]
 8007658:	600b      	str	r3, [r1, #0]
 800765a:	7812      	ldrb	r2, [r2, #0]
 800765c:	1c10      	adds	r0, r2, #0
 800765e:	bf18      	it	ne
 8007660:	2001      	movne	r0, #1
 8007662:	b002      	add	sp, #8
 8007664:	4770      	bx	lr
 8007666:	4610      	mov	r0, r2
 8007668:	e7fb      	b.n	8007662 <__ascii_mbtowc+0x16>
 800766a:	f06f 0001 	mvn.w	r0, #1
 800766e:	e7f8      	b.n	8007662 <__ascii_mbtowc+0x16>

08007670 <memmove>:
 8007670:	4288      	cmp	r0, r1
 8007672:	b510      	push	{r4, lr}
 8007674:	eb01 0302 	add.w	r3, r1, r2
 8007678:	d807      	bhi.n	800768a <memmove+0x1a>
 800767a:	1e42      	subs	r2, r0, #1
 800767c:	4299      	cmp	r1, r3
 800767e:	d00a      	beq.n	8007696 <memmove+0x26>
 8007680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007684:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007688:	e7f8      	b.n	800767c <memmove+0xc>
 800768a:	4283      	cmp	r3, r0
 800768c:	d9f5      	bls.n	800767a <memmove+0xa>
 800768e:	1881      	adds	r1, r0, r2
 8007690:	1ad2      	subs	r2, r2, r3
 8007692:	42d3      	cmn	r3, r2
 8007694:	d100      	bne.n	8007698 <memmove+0x28>
 8007696:	bd10      	pop	{r4, pc}
 8007698:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800769c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076a0:	e7f7      	b.n	8007692 <memmove+0x22>

080076a2 <__malloc_lock>:
 80076a2:	4770      	bx	lr

080076a4 <__malloc_unlock>:
 80076a4:	4770      	bx	lr

080076a6 <_realloc_r>:
 80076a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a8:	4607      	mov	r7, r0
 80076aa:	4614      	mov	r4, r2
 80076ac:	460e      	mov	r6, r1
 80076ae:	b921      	cbnz	r1, 80076ba <_realloc_r+0x14>
 80076b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80076b4:	4611      	mov	r1, r2
 80076b6:	f7ff be0d 	b.w	80072d4 <_malloc_r>
 80076ba:	b922      	cbnz	r2, 80076c6 <_realloc_r+0x20>
 80076bc:	f7ff fdbe 	bl	800723c <_free_r>
 80076c0:	4625      	mov	r5, r4
 80076c2:	4628      	mov	r0, r5
 80076c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c6:	f000 f821 	bl	800770c <_malloc_usable_size_r>
 80076ca:	42a0      	cmp	r0, r4
 80076cc:	d20f      	bcs.n	80076ee <_realloc_r+0x48>
 80076ce:	4621      	mov	r1, r4
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff fdff 	bl	80072d4 <_malloc_r>
 80076d6:	4605      	mov	r5, r0
 80076d8:	2800      	cmp	r0, #0
 80076da:	d0f2      	beq.n	80076c2 <_realloc_r+0x1c>
 80076dc:	4631      	mov	r1, r6
 80076de:	4622      	mov	r2, r4
 80076e0:	f7ff fab6 	bl	8006c50 <memcpy>
 80076e4:	4631      	mov	r1, r6
 80076e6:	4638      	mov	r0, r7
 80076e8:	f7ff fda8 	bl	800723c <_free_r>
 80076ec:	e7e9      	b.n	80076c2 <_realloc_r+0x1c>
 80076ee:	4635      	mov	r5, r6
 80076f0:	e7e7      	b.n	80076c2 <_realloc_r+0x1c>

080076f2 <__ascii_wctomb>:
 80076f2:	b149      	cbz	r1, 8007708 <__ascii_wctomb+0x16>
 80076f4:	2aff      	cmp	r2, #255	; 0xff
 80076f6:	bf8b      	itete	hi
 80076f8:	238a      	movhi	r3, #138	; 0x8a
 80076fa:	700a      	strbls	r2, [r1, #0]
 80076fc:	6003      	strhi	r3, [r0, #0]
 80076fe:	2001      	movls	r0, #1
 8007700:	bf88      	it	hi
 8007702:	f04f 30ff 	movhi.w	r0, #4294967295
 8007706:	4770      	bx	lr
 8007708:	4608      	mov	r0, r1
 800770a:	4770      	bx	lr

0800770c <_malloc_usable_size_r>:
 800770c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007710:	1f18      	subs	r0, r3, #4
 8007712:	2b00      	cmp	r3, #0
 8007714:	bfbc      	itt	lt
 8007716:	580b      	ldrlt	r3, [r1, r0]
 8007718:	18c0      	addlt	r0, r0, r3
 800771a:	4770      	bx	lr

0800771c <_init>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	bf00      	nop
 8007720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007722:	bc08      	pop	{r3}
 8007724:	469e      	mov	lr, r3
 8007726:	4770      	bx	lr

08007728 <_fini>:
 8007728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772a:	bf00      	nop
 800772c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800772e:	bc08      	pop	{r3}
 8007730:	469e      	mov	lr, r3
 8007732:	4770      	bx	lr
