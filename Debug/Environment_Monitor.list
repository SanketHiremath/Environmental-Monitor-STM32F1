
Environment_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086e0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a68  080087f0  080087f0  000187f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009258  08009258  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009258  08009258  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009258  08009258  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009258  08009258  00019258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800925c  0800925c  0001925c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  200001e8  08009448  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  08009448  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010be8  00000000  00000000  00020211  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002374  00000000  00000000  00030df9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  00033170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f78  00000000  00000000  000341e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001609e  00000000  00000000  00035158  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c235  00000000  00000000  0004b1f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c00d  00000000  00000000  0005742b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d3438  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052fc  00000000  00000000  000d34b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	080087d8 	.word	0x080087d8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	080087d8 	.word	0x080087d8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000be4:	f1a2 0201 	sub.w	r2, r2, #1
 8000be8:	d1ed      	bne.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_fmul>:
 8000d44:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d48:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d4c:	bf1e      	ittt	ne
 8000d4e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d52:	ea92 0f0c 	teqne	r2, ip
 8000d56:	ea93 0f0c 	teqne	r3, ip
 8000d5a:	d06f      	beq.n	8000e3c <__aeabi_fmul+0xf8>
 8000d5c:	441a      	add	r2, r3
 8000d5e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d62:	0240      	lsls	r0, r0, #9
 8000d64:	bf18      	it	ne
 8000d66:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d6a:	d01e      	beq.n	8000daa <__aeabi_fmul+0x66>
 8000d6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d70:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d74:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d78:	fba0 3101 	umull	r3, r1, r0, r1
 8000d7c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d80:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d84:	bf3e      	ittt	cc
 8000d86:	0049      	lslcc	r1, r1, #1
 8000d88:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	ea40 0001 	orr.w	r0, r0, r1
 8000d92:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d96:	2afd      	cmp	r2, #253	; 0xfd
 8000d98:	d81d      	bhi.n	8000dd6 <__aeabi_fmul+0x92>
 8000d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d9e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da2:	bf08      	it	eq
 8000da4:	f020 0001 	biceq.w	r0, r0, #1
 8000da8:	4770      	bx	lr
 8000daa:	f090 0f00 	teq	r0, #0
 8000dae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000db2:	bf08      	it	eq
 8000db4:	0249      	lsleq	r1, r1, #9
 8000db6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dbe:	3a7f      	subs	r2, #127	; 0x7f
 8000dc0:	bfc2      	ittt	gt
 8000dc2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dc6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dca:	4770      	bxgt	lr
 8000dcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dd0:	f04f 0300 	mov.w	r3, #0
 8000dd4:	3a01      	subs	r2, #1
 8000dd6:	dc5d      	bgt.n	8000e94 <__aeabi_fmul+0x150>
 8000dd8:	f112 0f19 	cmn.w	r2, #25
 8000ddc:	bfdc      	itt	le
 8000dde:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000de2:	4770      	bxle	lr
 8000de4:	f1c2 0200 	rsb	r2, r2, #0
 8000de8:	0041      	lsls	r1, r0, #1
 8000dea:	fa21 f102 	lsr.w	r1, r1, r2
 8000dee:	f1c2 0220 	rsb	r2, r2, #32
 8000df2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000df6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dfa:	f140 0000 	adc.w	r0, r0, #0
 8000dfe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e02:	bf08      	it	eq
 8000e04:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e08:	4770      	bx	lr
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fmul+0xce>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fmul+0xe6>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e78f      	b.n	8000d5c <__aeabi_fmul+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	bf18      	it	ne
 8000e46:	ea93 0f0c 	teqne	r3, ip
 8000e4a:	d00a      	beq.n	8000e62 <__aeabi_fmul+0x11e>
 8000e4c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e50:	bf18      	it	ne
 8000e52:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e56:	d1d8      	bne.n	8000e0a <__aeabi_fmul+0xc6>
 8000e58:	ea80 0001 	eor.w	r0, r0, r1
 8000e5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e60:	4770      	bx	lr
 8000e62:	f090 0f00 	teq	r0, #0
 8000e66:	bf17      	itett	ne
 8000e68:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e6c:	4608      	moveq	r0, r1
 8000e6e:	f091 0f00 	teqne	r1, #0
 8000e72:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e76:	d014      	beq.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_fmul+0x13e>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d10f      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e82:	ea93 0f0c 	teq	r3, ip
 8000e86:	d103      	bne.n	8000e90 <__aeabi_fmul+0x14c>
 8000e88:	024b      	lsls	r3, r1, #9
 8000e8a:	bf18      	it	ne
 8000e8c:	4608      	movne	r0, r1
 8000e8e:	d108      	bne.n	8000ea2 <__aeabi_fmul+0x15e>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ea0:	4770      	bx	lr
 8000ea2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ea6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eaa:	4770      	bx	lr

08000eac <__aeabi_fdiv>:
 8000eac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000eb0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eb4:	bf1e      	ittt	ne
 8000eb6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eba:	ea92 0f0c 	teqne	r2, ip
 8000ebe:	ea93 0f0c 	teqne	r3, ip
 8000ec2:	d069      	beq.n	8000f98 <__aeabi_fdiv+0xec>
 8000ec4:	eba2 0203 	sub.w	r2, r2, r3
 8000ec8:	ea80 0c01 	eor.w	ip, r0, r1
 8000ecc:	0249      	lsls	r1, r1, #9
 8000ece:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ed2:	d037      	beq.n	8000f44 <__aeabi_fdiv+0x98>
 8000ed4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000edc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ee0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ee4:	428b      	cmp	r3, r1
 8000ee6:	bf38      	it	cc
 8000ee8:	005b      	lslcc	r3, r3, #1
 8000eea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000eee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	bf24      	itt	cs
 8000ef6:	1a5b      	subcs	r3, r3, r1
 8000ef8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000efc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f00:	bf24      	itt	cs
 8000f02:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f06:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f0a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f0e:	bf24      	itt	cs
 8000f10:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f14:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f18:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f1c:	bf24      	itt	cs
 8000f1e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f22:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f26:	011b      	lsls	r3, r3, #4
 8000f28:	bf18      	it	ne
 8000f2a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f2e:	d1e0      	bne.n	8000ef2 <__aeabi_fdiv+0x46>
 8000f30:	2afd      	cmp	r2, #253	; 0xfd
 8000f32:	f63f af50 	bhi.w	8000dd6 <__aeabi_fmul+0x92>
 8000f36:	428b      	cmp	r3, r1
 8000f38:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f3c:	bf08      	it	eq
 8000f3e:	f020 0001 	biceq.w	r0, r0, #1
 8000f42:	4770      	bx	lr
 8000f44:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f48:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f4c:	327f      	adds	r2, #127	; 0x7f
 8000f4e:	bfc2      	ittt	gt
 8000f50:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f54:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f58:	4770      	bxgt	lr
 8000f5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f5e:	f04f 0300 	mov.w	r3, #0
 8000f62:	3a01      	subs	r2, #1
 8000f64:	e737      	b.n	8000dd6 <__aeabi_fmul+0x92>
 8000f66:	f092 0f00 	teq	r2, #0
 8000f6a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f6e:	bf02      	ittt	eq
 8000f70:	0040      	lsleq	r0, r0, #1
 8000f72:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f76:	3a01      	subeq	r2, #1
 8000f78:	d0f9      	beq.n	8000f6e <__aeabi_fdiv+0xc2>
 8000f7a:	ea40 000c 	orr.w	r0, r0, ip
 8000f7e:	f093 0f00 	teq	r3, #0
 8000f82:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f86:	bf02      	ittt	eq
 8000f88:	0049      	lsleq	r1, r1, #1
 8000f8a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f8e:	3b01      	subeq	r3, #1
 8000f90:	d0f9      	beq.n	8000f86 <__aeabi_fdiv+0xda>
 8000f92:	ea41 010c 	orr.w	r1, r1, ip
 8000f96:	e795      	b.n	8000ec4 <__aeabi_fdiv+0x18>
 8000f98:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f9c:	ea92 0f0c 	teq	r2, ip
 8000fa0:	d108      	bne.n	8000fb4 <__aeabi_fdiv+0x108>
 8000fa2:	0242      	lsls	r2, r0, #9
 8000fa4:	f47f af7d 	bne.w	8000ea2 <__aeabi_fmul+0x15e>
 8000fa8:	ea93 0f0c 	teq	r3, ip
 8000fac:	f47f af70 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	e776      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fb4:	ea93 0f0c 	teq	r3, ip
 8000fb8:	d104      	bne.n	8000fc4 <__aeabi_fdiv+0x118>
 8000fba:	024b      	lsls	r3, r1, #9
 8000fbc:	f43f af4c 	beq.w	8000e58 <__aeabi_fmul+0x114>
 8000fc0:	4608      	mov	r0, r1
 8000fc2:	e76e      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fc4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc8:	bf18      	it	ne
 8000fca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fce:	d1ca      	bne.n	8000f66 <__aeabi_fdiv+0xba>
 8000fd0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fd4:	f47f af5c 	bne.w	8000e90 <__aeabi_fmul+0x14c>
 8000fd8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fdc:	f47f af3c 	bne.w	8000e58 <__aeabi_fmul+0x114>
 8000fe0:	e75f      	b.n	8000ea2 <__aeabi_fmul+0x15e>
 8000fe2:	bf00      	nop

08000fe4 <__gesf2>:
 8000fe4:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe8:	e006      	b.n	8000ff8 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__lesf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	e002      	b.n	8000ff8 <__cmpsf2+0x4>
 8000ff2:	bf00      	nop

08000ff4 <__cmpsf2>:
 8000ff4:	f04f 0c01 	mov.w	ip, #1
 8000ff8:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ffc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001000:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001004:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001008:	bf18      	it	ne
 800100a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800100e:	d011      	beq.n	8001034 <__cmpsf2+0x40>
 8001010:	b001      	add	sp, #4
 8001012:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001016:	bf18      	it	ne
 8001018:	ea90 0f01 	teqne	r0, r1
 800101c:	bf58      	it	pl
 800101e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001022:	bf88      	it	hi
 8001024:	17c8      	asrhi	r0, r1, #31
 8001026:	bf38      	it	cc
 8001028:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800102c:	bf18      	it	ne
 800102e:	f040 0001 	orrne.w	r0, r0, #1
 8001032:	4770      	bx	lr
 8001034:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001038:	d102      	bne.n	8001040 <__cmpsf2+0x4c>
 800103a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800103e:	d105      	bne.n	800104c <__cmpsf2+0x58>
 8001040:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001044:	d1e4      	bne.n	8001010 <__cmpsf2+0x1c>
 8001046:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104a:	d0e1      	beq.n	8001010 <__cmpsf2+0x1c>
 800104c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop

08001054 <__aeabi_cfrcmple>:
 8001054:	4684      	mov	ip, r0
 8001056:	4608      	mov	r0, r1
 8001058:	4661      	mov	r1, ip
 800105a:	e7ff      	b.n	800105c <__aeabi_cfcmpeq>

0800105c <__aeabi_cfcmpeq>:
 800105c:	b50f      	push	{r0, r1, r2, r3, lr}
 800105e:	f7ff ffc9 	bl	8000ff4 <__cmpsf2>
 8001062:	2800      	cmp	r0, #0
 8001064:	bf48      	it	mi
 8001066:	f110 0f00 	cmnmi.w	r0, #0
 800106a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0800106c <__aeabi_fcmpeq>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff fff4 	bl	800105c <__aeabi_cfcmpeq>
 8001074:	bf0c      	ite	eq
 8001076:	2001      	moveq	r0, #1
 8001078:	2000      	movne	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmplt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffea 	bl	800105c <__aeabi_cfcmpeq>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_fcmple>:
 8001094:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001098:	f7ff ffe0 	bl	800105c <__aeabi_cfcmpeq>
 800109c:	bf94      	ite	ls
 800109e:	2001      	movls	r0, #1
 80010a0:	2000      	movhi	r0, #0
 80010a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010a6:	bf00      	nop

080010a8 <__aeabi_fcmpge>:
 80010a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ac:	f7ff ffd2 	bl	8001054 <__aeabi_cfrcmple>
 80010b0:	bf94      	ite	ls
 80010b2:	2001      	movls	r0, #1
 80010b4:	2000      	movhi	r0, #0
 80010b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ba:	bf00      	nop

080010bc <__aeabi_fcmpgt>:
 80010bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c0:	f7ff ffc8 	bl	8001054 <__aeabi_cfrcmple>
 80010c4:	bf34      	ite	cc
 80010c6:	2001      	movcc	r0, #1
 80010c8:	2000      	movcs	r0, #0
 80010ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ce:	bf00      	nop

080010d0 <__aeabi_fcmpun>:
 80010d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010d4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80010d8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010dc:	d102      	bne.n	80010e4 <__aeabi_fcmpun+0x14>
 80010de:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010e2:	d108      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010e4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010e8:	d102      	bne.n	80010f0 <__aeabi_fcmpun+0x20>
 80010ea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ee:	d102      	bne.n	80010f6 <__aeabi_fcmpun+0x26>
 80010f0:	f04f 0000 	mov.w	r0, #0
 80010f4:	4770      	bx	lr
 80010f6:	f04f 0001 	mov.w	r0, #1
 80010fa:	4770      	bx	lr

080010fc <bcdToDec>:
{
  return (uint8_t)( (val/10*16) + (val%10) );
}
// Convert binary coded decimal to normal decimal numbers
int bcdToDec(uint8_t val)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	b2db      	uxtb	r3, r3
 800110c:	461a      	mov	r2, r3
 800110e:	4613      	mov	r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4413      	add	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	461a      	mov	r2, r3
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	f003 030f 	and.w	r3, r3, #15
 800111e:	4413      	add	r3, r2
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	bc80      	pop	{r7}
 8001128:	4770      	bx	lr
	...

0800112c <Get_Time>:

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, 0x00, 1, set_time, 7, 1000);
}

void Get_Time (void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b086      	sub	sp, #24
 8001130:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, 0x00, 1, get_time, 7, 1000);
 8001132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001136:	9302      	str	r3, [sp, #8]
 8001138:	2307      	movs	r3, #7
 800113a:	9301      	str	r3, [sp, #4]
 800113c:	463b      	mov	r3, r7
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2301      	movs	r3, #1
 8001142:	2200      	movs	r2, #0
 8001144:	21d0      	movs	r1, #208	; 0xd0
 8001146:	481f      	ldr	r0, [pc, #124]	; (80011c4 <Get_Time+0x98>)
 8001148:	f002 fc7c 	bl	8003a44 <HAL_I2C_Mem_Read>
	time.seconds = bcdToDec(get_time[0]);
 800114c:	783b      	ldrb	r3, [r7, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff ffd4 	bl	80010fc <bcdToDec>
 8001154:	4603      	mov	r3, r0
 8001156:	b2da      	uxtb	r2, r3
 8001158:	4b1b      	ldr	r3, [pc, #108]	; (80011c8 <Get_Time+0x9c>)
 800115a:	701a      	strb	r2, [r3, #0]
	time.minutes = bcdToDec(get_time[1]);
 800115c:	787b      	ldrb	r3, [r7, #1]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ffcc 	bl	80010fc <bcdToDec>
 8001164:	4603      	mov	r3, r0
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b17      	ldr	r3, [pc, #92]	; (80011c8 <Get_Time+0x9c>)
 800116a:	705a      	strb	r2, [r3, #1]
	time.hour = bcdToDec(get_time[2]);
 800116c:	78bb      	ldrb	r3, [r7, #2]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffc4 	bl	80010fc <bcdToDec>
 8001174:	4603      	mov	r3, r0
 8001176:	b2da      	uxtb	r2, r3
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <Get_Time+0x9c>)
 800117a:	709a      	strb	r2, [r3, #2]
	time.dayofweek = bcdToDec(get_time[3]);
 800117c:	78fb      	ldrb	r3, [r7, #3]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffbc 	bl	80010fc <bcdToDec>
 8001184:	4603      	mov	r3, r0
 8001186:	b2da      	uxtb	r2, r3
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <Get_Time+0x9c>)
 800118a:	70da      	strb	r2, [r3, #3]
	time.dayofmonth = bcdToDec(get_time[4]);
 800118c:	793b      	ldrb	r3, [r7, #4]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ffb4 	bl	80010fc <bcdToDec>
 8001194:	4603      	mov	r3, r0
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b0b      	ldr	r3, [pc, #44]	; (80011c8 <Get_Time+0x9c>)
 800119a:	711a      	strb	r2, [r3, #4]
	time.month = bcdToDec(get_time[5]);
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ffac 	bl	80010fc <bcdToDec>
 80011a4:	4603      	mov	r3, r0
 80011a6:	b2da      	uxtb	r2, r3
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <Get_Time+0x9c>)
 80011aa:	715a      	strb	r2, [r3, #5]
	time.year = bcdToDec(get_time[6]);
 80011ac:	79bb      	ldrb	r3, [r7, #6]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ffa4 	bl	80010fc <bcdToDec>
 80011b4:	4603      	mov	r3, r0
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	4b03      	ldr	r3, [pc, #12]	; (80011c8 <Get_Time+0x9c>)
 80011ba:	719a      	strb	r2, [r3, #6]
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000630 	.word	0x20000630
 80011c8:	200007cc 	.word	0x200007cc

080011cc <pir>:

void pir(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	2102      	movs	r1, #2
 80011d4:	4803      	ldr	r0, [pc, #12]	; (80011e4 <pir+0x18>)
 80011d6:	f001 ffb0 	bl	800313a <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3);
 80011da:	4803      	ldr	r0, [pc, #12]	; (80011e8 <pir+0x1c>)
 80011dc:	f004 f85f 	bl	800529e <HAL_TIM_Base_Start_IT>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40010800 	.word	0x40010800
 80011e8:	200006c4 	.word	0x200006c4

080011ec <init_LightSensor>:

void init_LightSensor()
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af02      	add	r7, sp, #8
	light_databuff[0] = 0x01;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <init_LightSensor+0x30>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	701a      	strb	r2, [r3, #0]
	light_databuff[1] = (0xCE10)>>8;
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <init_LightSensor+0x30>)
 80011fa:	22ce      	movs	r2, #206	; 0xce
 80011fc:	705a      	strb	r2, [r3, #1]
	light_databuff[2] = (0xCE10)& 0x00FF;
 80011fe:	4b07      	ldr	r3, [pc, #28]	; (800121c <init_LightSensor+0x30>)
 8001200:	2210      	movs	r2, #16
 8001202:	709a      	strb	r2, [r3, #2]
	HAL_I2C_Master_Transmit(&hi2c1,lux_address<<1,light_databuff,3,50);
 8001204:	2332      	movs	r3, #50	; 0x32
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	2303      	movs	r3, #3
 800120a:	4a04      	ldr	r2, [pc, #16]	; (800121c <init_LightSensor+0x30>)
 800120c:	2188      	movs	r1, #136	; 0x88
 800120e:	4804      	ldr	r0, [pc, #16]	; (8001220 <init_LightSensor+0x34>)
 8001210:	f002 f8ec 	bl	80033ec <HAL_I2C_Master_Transmit>
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000069c 	.word	0x2000069c
 8001220:	20000630 	.word	0x20000630

08001224 <get_lux>:

void get_lux()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af02      	add	r7, sp, #8
	data[0]=(0x00);
 800122a:	4b11      	ldr	r3, [pc, #68]	; (8001270 <get_lux+0x4c>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,lux_address<<1,data,1,50);
 8001230:	2332      	movs	r3, #50	; 0x32
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2301      	movs	r3, #1
 8001236:	4a0e      	ldr	r2, [pc, #56]	; (8001270 <get_lux+0x4c>)
 8001238:	2188      	movs	r1, #136	; 0x88
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <get_lux+0x50>)
 800123c:	f002 f8d6 	bl	80033ec <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 8001240:	2032      	movs	r0, #50	; 0x32
 8001242:	f001 facf 	bl	80027e4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,lux_address<<1,readbuff,2,50);
 8001246:	2332      	movs	r3, #50	; 0x32
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2302      	movs	r3, #2
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <get_lux+0x54>)
 800124e:	2188      	movs	r1, #136	; 0x88
 8001250:	4808      	ldr	r0, [pc, #32]	; (8001274 <get_lux+0x50>)
 8001252:	f002 f9c9 	bl	80035e8 <HAL_I2C_Master_Receive>
	rawlux=((readbuff[0] << 8) | readbuff[1]);
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <get_lux+0x54>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <get_lux+0x54>)
 800125e:	7852      	ldrb	r2, [r2, #1]
 8001260:	4313      	orrs	r3, r2
 8001262:	461a      	mov	r2, r3
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <get_lux+0x58>)
 8001266:	601a      	str	r2, [r3, #0]
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200007c8 	.word	0x200007c8
 8001274:	20000630 	.word	0x20000630
 8001278:	200007dc 	.word	0x200007dc
 800127c:	200007d4 	.word	0x200007d4

08001280 <calculate_lux>:

void calculate_lux()
{
 8001280:	b5b0      	push	{r4, r5, r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
	uint16_t iExponent, iMantissa;
	iMantissa = rawlux & 0x0FFF;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <calculate_lux+0x80>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	b29b      	uxth	r3, r3
 800128c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001290:	80fb      	strh	r3, [r7, #6]
	iExponent = (rawlux & 0xF000) >> 12;
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <calculate_lux+0x80>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	0b1b      	lsrs	r3, r3, #12
 8001298:	b29b      	uxth	r3, r3
 800129a:	f003 030f 	and.w	r3, r3, #15
 800129e:	80bb      	strh	r3, [r7, #4]
	flux= iMantissa * (0.01 * powf(2, iExponent));
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff f8ae 	bl	8000404 <__aeabi_i2d>
 80012a8:	4604      	mov	r4, r0
 80012aa:	460d      	mov	r5, r1
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fcf0 	bl	8000c94 <__aeabi_ui2f>
 80012b4:	4603      	mov	r3, r0
 80012b6:	4619      	mov	r1, r3
 80012b8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012bc:	f006 fcda 	bl	8007c74 <powf>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f8b0 	bl	8000428 <__aeabi_f2d>
 80012c8:	a30b      	add	r3, pc, #44	; (adr r3, 80012f8 <calculate_lux+0x78>)
 80012ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ce:	f7ff f903 	bl	80004d8 <__aeabi_dmul>
 80012d2:	4602      	mov	r2, r0
 80012d4:	460b      	mov	r3, r1
 80012d6:	4620      	mov	r0, r4
 80012d8:	4629      	mov	r1, r5
 80012da:	f7ff f8fd 	bl	80004d8 <__aeabi_dmul>
 80012de:	4603      	mov	r3, r0
 80012e0:	460c      	mov	r4, r1
 80012e2:	4618      	mov	r0, r3
 80012e4:	4621      	mov	r1, r4
 80012e6:	f7ff fbcf 	bl	8000a88 <__aeabi_d2f>
 80012ea:	4602      	mov	r2, r0
 80012ec:	4b05      	ldr	r3, [pc, #20]	; (8001304 <calculate_lux+0x84>)
 80012ee:	601a      	str	r2, [r3, #0]
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bdb0      	pop	{r4, r5, r7, pc}
 80012f8:	47ae147b 	.word	0x47ae147b
 80012fc:	3f847ae1 	.word	0x3f847ae1
 8001300:	200007d4 	.word	0x200007d4
 8001304:	200007d8 	.word	0x200007d8

08001308 <init_co2>:

void init_co2()
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af02      	add	r7, sp, #8
	data[0] = (0x2003)>>8;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <init_co2+0x28>)
 8001310:	2220      	movs	r2, #32
 8001312:	701a      	strb	r2, [r3, #0]
	data[1] = (0x2003) & 0x00FF;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <init_co2+0x28>)
 8001316:	2203      	movs	r2, #3
 8001318:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1,co2sensor_address<<1,data,2,50);
 800131a:	2332      	movs	r3, #50	; 0x32
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2302      	movs	r3, #2
 8001320:	4a03      	ldr	r2, [pc, #12]	; (8001330 <init_co2+0x28>)
 8001322:	21b0      	movs	r1, #176	; 0xb0
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <init_co2+0x2c>)
 8001326:	f002 f861 	bl	80033ec <HAL_I2C_Master_Transmit>
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200007c8 	.word	0x200007c8
 8001334:	20000630 	.word	0x20000630

08001338 <get_co2_voc>:

void get_co2_voc()
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af02      	add	r7, sp, #8
	data[0] = (0x2008)>>8;
 800133e:	4b1c      	ldr	r3, [pc, #112]	; (80013b0 <get_co2_voc+0x78>)
 8001340:	2220      	movs	r2, #32
 8001342:	701a      	strb	r2, [r3, #0]
	data[1] = (0x2008) & 0x00FF;
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <get_co2_voc+0x78>)
 8001346:	2208      	movs	r2, #8
 8001348:	705a      	strb	r2, [r3, #1]
	co2sensor_init = 0x2008;
 800134a:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <get_co2_voc+0x7c>)
 800134c:	f242 0208 	movw	r2, #8200	; 0x2008
 8001350:	801a      	strh	r2, [r3, #0]
	HAL_I2C_Master_Transmit(&hi2c1,co2sensor_address<<1,data,2,50);
 8001352:	2332      	movs	r3, #50	; 0x32
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2302      	movs	r3, #2
 8001358:	4a15      	ldr	r2, [pc, #84]	; (80013b0 <get_co2_voc+0x78>)
 800135a:	21b0      	movs	r1, #176	; 0xb0
 800135c:	4816      	ldr	r0, [pc, #88]	; (80013b8 <get_co2_voc+0x80>)
 800135e:	f002 f845 	bl	80033ec <HAL_I2C_Master_Transmit>
	HAL_Delay(1000);
 8001362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001366:	f001 fa3d 	bl	80027e4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,co2sensor_address<<1,readbuff,6,50);
 800136a:	2332      	movs	r3, #50	; 0x32
 800136c:	9300      	str	r3, [sp, #0]
 800136e:	2306      	movs	r3, #6
 8001370:	4a12      	ldr	r2, [pc, #72]	; (80013bc <get_co2_voc+0x84>)
 8001372:	21b0      	movs	r1, #176	; 0xb0
 8001374:	4810      	ldr	r0, [pc, #64]	; (80013b8 <get_co2_voc+0x80>)
 8001376:	f002 f937 	bl	80035e8 <HAL_I2C_Master_Receive>
	co2 = (readbuff[0]<<8)|readbuff[1];
 800137a:	4b10      	ldr	r3, [pc, #64]	; (80013bc <get_co2_voc+0x84>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4a0e      	ldr	r2, [pc, #56]	; (80013bc <get_co2_voc+0x84>)
 8001382:	7852      	ldrb	r2, [r2, #1]
 8001384:	4313      	orrs	r3, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fc88 	bl	8000c9c <__aeabi_i2f>
 800138c:	4602      	mov	r2, r0
 800138e:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <get_co2_voc+0x88>)
 8001390:	601a      	str	r2, [r3, #0]
	tvoc = (readbuff[3]<<8)|(readbuff[4]);
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <get_co2_voc+0x84>)
 8001394:	78db      	ldrb	r3, [r3, #3]
 8001396:	021b      	lsls	r3, r3, #8
 8001398:	4a08      	ldr	r2, [pc, #32]	; (80013bc <get_co2_voc+0x84>)
 800139a:	7912      	ldrb	r2, [r2, #4]
 800139c:	4313      	orrs	r3, r2
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fc7c 	bl	8000c9c <__aeabi_i2f>
 80013a4:	4602      	mov	r2, r0
 80013a6:	4b07      	ldr	r3, [pc, #28]	; (80013c4 <get_co2_voc+0x8c>)
 80013a8:	601a      	str	r2, [r3, #0]
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200007c8 	.word	0x200007c8
 80013b4:	2000062e 	.word	0x2000062e
 80013b8:	20000630 	.word	0x20000630
 80013bc:	200007dc 	.word	0x200007dc
 80013c0:	200006b4 	.word	0x200006b4
 80013c4:	200006b8 	.word	0x200006b8

080013c8 <get_temp_humi>:

void get_temp_humi()
{
 80013c8:	b590      	push	{r4, r7, lr}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af02      	add	r7, sp, #8
	HAL_Delay(50);
 80013ce:	2032      	movs	r0, #50	; 0x32
 80013d0:	f001 fa08 	bl	80027e4 <HAL_Delay>
	data[0] = 0x22; //command
 80013d4:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <get_temp_humi+0xf8>)
 80013d6:	2222      	movs	r2, #34	; 0x22
 80013d8:	701a      	strb	r2, [r3, #0]
	data[1] = 0x36;
 80013da:	4b39      	ldr	r3, [pc, #228]	; (80014c0 <get_temp_humi+0xf8>)
 80013dc:	2236      	movs	r2, #54	; 0x36
 80013de:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1,thermal_address<<1,data,2,50);
 80013e0:	2332      	movs	r3, #50	; 0x32
 80013e2:	9300      	str	r3, [sp, #0]
 80013e4:	2302      	movs	r3, #2
 80013e6:	4a36      	ldr	r2, [pc, #216]	; (80014c0 <get_temp_humi+0xf8>)
 80013e8:	218a      	movs	r1, #138	; 0x8a
 80013ea:	4836      	ldr	r0, [pc, #216]	; (80014c4 <get_temp_humi+0xfc>)
 80013ec:	f001 fffe 	bl	80033ec <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80013f0:	2032      	movs	r0, #50	; 0x32
 80013f2:	f001 f9f7 	bl	80027e4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1,thermal_address<<1,readbuff,6,50);
 80013f6:	2332      	movs	r3, #50	; 0x32
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2306      	movs	r3, #6
 80013fc:	4a32      	ldr	r2, [pc, #200]	; (80014c8 <get_temp_humi+0x100>)
 80013fe:	218a      	movs	r1, #138	; 0x8a
 8001400:	4830      	ldr	r0, [pc, #192]	; (80014c4 <get_temp_humi+0xfc>)
 8001402:	f002 f8f1 	bl	80035e8 <HAL_I2C_Master_Receive>
	temp = (readbuff[0] * 256) + readbuff[1];
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <get_temp_humi+0x100>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	021b      	lsls	r3, r3, #8
 800140c:	4a2e      	ldr	r2, [pc, #184]	; (80014c8 <get_temp_humi+0x100>)
 800140e:	7852      	ldrb	r2, [r2, #1]
 8001410:	4413      	add	r3, r2
 8001412:	4a2e      	ldr	r2, [pc, #184]	; (80014cc <get_temp_humi+0x104>)
 8001414:	6013      	str	r3, [r2, #0]
	cTemp = -45.0 + (175.0 * temp / 65535.0);
 8001416:	4b2d      	ldr	r3, [pc, #180]	; (80014cc <get_temp_humi+0x104>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe fff2 	bl	8000404 <__aeabi_i2d>
 8001420:	a323      	add	r3, pc, #140	; (adr r3, 80014b0 <get_temp_humi+0xe8>)
 8001422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001426:	f7ff f857 	bl	80004d8 <__aeabi_dmul>
 800142a:	4603      	mov	r3, r0
 800142c:	460c      	mov	r4, r1
 800142e:	4618      	mov	r0, r3
 8001430:	4621      	mov	r1, r4
 8001432:	a321      	add	r3, pc, #132	; (adr r3, 80014b8 <get_temp_humi+0xf0>)
 8001434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001438:	f7ff f978 	bl	800072c <__aeabi_ddiv>
 800143c:	4603      	mov	r3, r0
 800143e:	460c      	mov	r4, r1
 8001440:	4618      	mov	r0, r3
 8001442:	4621      	mov	r1, r4
 8001444:	f04f 0200 	mov.w	r2, #0
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <get_temp_humi+0x108>)
 800144a:	f7fe fe8d 	bl	8000168 <__aeabi_dsub>
 800144e:	4603      	mov	r3, r0
 8001450:	460c      	mov	r4, r1
 8001452:	4618      	mov	r0, r3
 8001454:	4621      	mov	r1, r4
 8001456:	f7ff fb17 	bl	8000a88 <__aeabi_d2f>
 800145a:	4602      	mov	r2, r0
 800145c:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <get_temp_humi+0x10c>)
 800145e:	601a      	str	r2, [r3, #0]
	humi = (readbuff[3] * 256) + readbuff[4];
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <get_temp_humi+0x100>)
 8001462:	78db      	ldrb	r3, [r3, #3]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	4a18      	ldr	r2, [pc, #96]	; (80014c8 <get_temp_humi+0x100>)
 8001468:	7912      	ldrb	r2, [r2, #4]
 800146a:	4413      	add	r3, r2
 800146c:	4a1a      	ldr	r2, [pc, #104]	; (80014d8 <get_temp_humi+0x110>)
 800146e:	6013      	str	r3, [r2, #0]
	cHumi = (100.0 * humi / 65535.0);
 8001470:	4b19      	ldr	r3, [pc, #100]	; (80014d8 <get_temp_humi+0x110>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f7fe ffc5 	bl	8000404 <__aeabi_i2d>
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <get_temp_humi+0x114>)
 8001480:	f7ff f82a 	bl	80004d8 <__aeabi_dmul>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	4618      	mov	r0, r3
 800148a:	4621      	mov	r1, r4
 800148c:	a30a      	add	r3, pc, #40	; (adr r3, 80014b8 <get_temp_humi+0xf0>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff f94b 	bl	800072c <__aeabi_ddiv>
 8001496:	4603      	mov	r3, r0
 8001498:	460c      	mov	r4, r1
 800149a:	4618      	mov	r0, r3
 800149c:	4621      	mov	r1, r4
 800149e:	f7ff faf3 	bl	8000a88 <__aeabi_d2f>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <get_temp_humi+0x118>)
 80014a6:	601a      	str	r2, [r3, #0]
//	i = abs(25-cTemp);
}
 80014a8:	bf00      	nop
 80014aa:	3704      	adds	r7, #4
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd90      	pop	{r4, r7, pc}
 80014b0:	00000000 	.word	0x00000000
 80014b4:	4065e000 	.word	0x4065e000
 80014b8:	00000000 	.word	0x00000000
 80014bc:	40efffe0 	.word	0x40efffe0
 80014c0:	200007c8 	.word	0x200007c8
 80014c4:	20000630 	.word	0x20000630
 80014c8:	200007dc 	.word	0x200007dc
 80014cc:	200006bc 	.word	0x200006bc
 80014d0:	40468000 	.word	0x40468000
 80014d4:	200007f8 	.word	0x200007f8
 80014d8:	2000061c 	.word	0x2000061c
 80014dc:	40590000 	.word	0x40590000
 80014e0:	200007c4 	.word	0x200007c4

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b590      	push	{r4, r7, lr}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ea:	f001 f919 	bl	8002720 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ee:	f000 f97b 	bl	80017e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f000 fabd 	bl	8001a70 <MX_GPIO_Init>
  MX_I2C1_Init();
 80014f6:	f000 fa15 	bl	8001924 <MX_I2C1_Init>
  MX_ADC1_Init();
 80014fa:	f000 f9d5 	bl	80018a8 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80014fe:	f000 fa8d 	bl	8001a1c <MX_USART1_UART_Init>
//  MX_RTC_Init();
  MX_TIM3_Init();
 8001502:	f000 fa3d 	bl	8001980 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

//    HAL_RTC_Init(&hrtc);
//    HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13, GPIO_PIN_RESET);
    init_co2();
 8001506:	f7ff feff 	bl	8001308 <init_co2>
    init_LightSensor();
 800150a:	f7ff fe6f 	bl	80011ec <init_LightSensor>
    SSD1306_Init();
 800150e:	f000 fb39 	bl	8001b84 <SSD1306_Init>
    SSD1306_Fill(0);
 8001512:	2000      	movs	r0, #0
 8001514:	f000 fc28 	bl	8001d68 <SSD1306_Fill>
    SSD1306_GotoXY(0,0);
 8001518:	2100      	movs	r1, #0
 800151a:	2000      	movs	r0, #0
 800151c:	f000 fc9a 	bl	8001e54 <SSD1306_GotoXY>
    SSD1306_Puts("Temp:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001520:	2201      	movs	r2, #1
 8001522:	4988      	ldr	r1, [pc, #544]	; (8001744 <main+0x260>)
 8001524:	4888      	ldr	r0, [pc, #544]	; (8001748 <main+0x264>)
 8001526:	f000 fd2b 	bl	8001f80 <SSD1306_Puts>
    SSD1306_GotoXY(0,12);
 800152a:	210c      	movs	r1, #12
 800152c:	2000      	movs	r0, #0
 800152e:	f000 fc91 	bl	8001e54 <SSD1306_GotoXY>
    SSD1306_Puts("Humi:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001532:	2201      	movs	r2, #1
 8001534:	4983      	ldr	r1, [pc, #524]	; (8001744 <main+0x260>)
 8001536:	4885      	ldr	r0, [pc, #532]	; (800174c <main+0x268>)
 8001538:	f000 fd22 	bl	8001f80 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 800153c:	f000 fbe6 	bl	8001d0c <SSD1306_UpdateScreen>
    SSD1306_GotoXY(0,22);
 8001540:	2116      	movs	r1, #22
 8001542:	2000      	movs	r0, #0
 8001544:	f000 fc86 	bl	8001e54 <SSD1306_GotoXY>
    SSD1306_Puts("CO2:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001548:	2201      	movs	r2, #1
 800154a:	497e      	ldr	r1, [pc, #504]	; (8001744 <main+0x260>)
 800154c:	4880      	ldr	r0, [pc, #512]	; (8001750 <main+0x26c>)
 800154e:	f000 fd17 	bl	8001f80 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001552:	f000 fbdb 	bl	8001d0c <SSD1306_UpdateScreen>
    SSD1306_GotoXY(0,32);
 8001556:	2120      	movs	r1, #32
 8001558:	2000      	movs	r0, #0
 800155a:	f000 fc7b 	bl	8001e54 <SSD1306_GotoXY>
    SSD1306_Puts("VOC:", &Font_7x10, SSD1306_COLOR_WHITE);
 800155e:	2201      	movs	r2, #1
 8001560:	4978      	ldr	r1, [pc, #480]	; (8001744 <main+0x260>)
 8001562:	487c      	ldr	r0, [pc, #496]	; (8001754 <main+0x270>)
 8001564:	f000 fd0c 	bl	8001f80 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001568:	f000 fbd0 	bl	8001d0c <SSD1306_UpdateScreen>
    SSD1306_GotoXY(0,42);
 800156c:	212a      	movs	r1, #42	; 0x2a
 800156e:	2000      	movs	r0, #0
 8001570:	f000 fc70 	bl	8001e54 <SSD1306_GotoXY>
    SSD1306_Puts("Light:", &Font_7x10, SSD1306_COLOR_WHITE);
 8001574:	2201      	movs	r2, #1
 8001576:	4973      	ldr	r1, [pc, #460]	; (8001744 <main+0x260>)
 8001578:	4877      	ldr	r0, [pc, #476]	; (8001758 <main+0x274>)
 800157a:	f000 fd01 	bl	8001f80 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 800157e:	f000 fbc5 	bl	8001d0c <SSD1306_UpdateScreen>
    SSD1306_GotoXY(0,52);
 8001582:	2134      	movs	r1, #52	; 0x34
 8001584:	2000      	movs	r0, #0
 8001586:	f000 fc65 	bl	8001e54 <SSD1306_GotoXY>
    SSD1306_Puts("Time:", &Font_7x10, SSD1306_COLOR_WHITE);
 800158a:	2201      	movs	r2, #1
 800158c:	496d      	ldr	r1, [pc, #436]	; (8001744 <main+0x260>)
 800158e:	4873      	ldr	r0, [pc, #460]	; (800175c <main+0x278>)
 8001590:	f000 fcf6 	bl	8001f80 <SSD1306_Puts>
    SSD1306_UpdateScreen();
 8001594:	f000 fbba 	bl	8001d0c <SSD1306_UpdateScreen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ///////////////////////////////////////////////////////////////////////////////////temp and humidity
	    get_temp_humi();
 8001598:	f7ff ff16 	bl	80013c8 <get_temp_humi>
		SSD1306_GotoXY(42,0);
 800159c:	2100      	movs	r1, #0
 800159e:	202a      	movs	r0, #42	; 0x2a
 80015a0:	f000 fc58 	bl	8001e54 <SSD1306_GotoXY>
		sprintf(char_buff1,"%.2f",cTemp);
 80015a4:	4b6e      	ldr	r3, [pc, #440]	; (8001760 <main+0x27c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe ff3d 	bl	8000428 <__aeabi_f2d>
 80015ae:	4603      	mov	r3, r0
 80015b0:	460c      	mov	r4, r1
 80015b2:	461a      	mov	r2, r3
 80015b4:	4623      	mov	r3, r4
 80015b6:	496b      	ldr	r1, [pc, #428]	; (8001764 <main+0x280>)
 80015b8:	486b      	ldr	r0, [pc, #428]	; (8001768 <main+0x284>)
 80015ba:	f004 ff6f 	bl	800649c <siprintf>
		SSD1306_Puts(char_buff1, &Font_7x10, SSD1306_COLOR_WHITE);
 80015be:	2201      	movs	r2, #1
 80015c0:	4960      	ldr	r1, [pc, #384]	; (8001744 <main+0x260>)
 80015c2:	4869      	ldr	r0, [pc, #420]	; (8001768 <main+0x284>)
 80015c4:	f000 fcdc 	bl	8001f80 <SSD1306_Puts>
		SSD1306_UpdateScreen();
 80015c8:	f000 fba0 	bl	8001d0c <SSD1306_UpdateScreen>
		HAL_Delay(1000);
 80015cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015d0:	f001 f908 	bl	80027e4 <HAL_Delay>

		 SSD1306_GotoXY(42,12);
 80015d4:	210c      	movs	r1, #12
 80015d6:	202a      	movs	r0, #42	; 0x2a
 80015d8:	f000 fc3c 	bl	8001e54 <SSD1306_GotoXY>
		 sprintf(char_buff2,"%.2f",cHumi);
 80015dc:	4b63      	ldr	r3, [pc, #396]	; (800176c <main+0x288>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe ff21 	bl	8000428 <__aeabi_f2d>
 80015e6:	4603      	mov	r3, r0
 80015e8:	460c      	mov	r4, r1
 80015ea:	461a      	mov	r2, r3
 80015ec:	4623      	mov	r3, r4
 80015ee:	495d      	ldr	r1, [pc, #372]	; (8001764 <main+0x280>)
 80015f0:	485f      	ldr	r0, [pc, #380]	; (8001770 <main+0x28c>)
 80015f2:	f004 ff53 	bl	800649c <siprintf>
		SSD1306_Puts(char_buff2, &Font_7x10, SSD1306_COLOR_WHITE);
 80015f6:	2201      	movs	r2, #1
 80015f8:	4952      	ldr	r1, [pc, #328]	; (8001744 <main+0x260>)
 80015fa:	485d      	ldr	r0, [pc, #372]	; (8001770 <main+0x28c>)
 80015fc:	f000 fcc0 	bl	8001f80 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 8001600:	f000 fb84 	bl	8001d0c <SSD1306_UpdateScreen>
      /////////////////////////////////////////////////////////////////////////////////co2 and tvoc
	    get_co2_voc();
 8001604:	f7ff fe98 	bl	8001338 <get_co2_voc>
		 SSD1306_GotoXY(42,22);
 8001608:	2116      	movs	r1, #22
 800160a:	202a      	movs	r0, #42	; 0x2a
 800160c:	f000 fc22 	bl	8001e54 <SSD1306_GotoXY>
		 sprintf(char_buff1,"%.2f",co2);
 8001610:	4b58      	ldr	r3, [pc, #352]	; (8001774 <main+0x290>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe ff07 	bl	8000428 <__aeabi_f2d>
 800161a:	4603      	mov	r3, r0
 800161c:	460c      	mov	r4, r1
 800161e:	461a      	mov	r2, r3
 8001620:	4623      	mov	r3, r4
 8001622:	4950      	ldr	r1, [pc, #320]	; (8001764 <main+0x280>)
 8001624:	4850      	ldr	r0, [pc, #320]	; (8001768 <main+0x284>)
 8001626:	f004 ff39 	bl	800649c <siprintf>
		SSD1306_Puts(char_buff1, &Font_7x10, SSD1306_COLOR_WHITE);
 800162a:	2201      	movs	r2, #1
 800162c:	4945      	ldr	r1, [pc, #276]	; (8001744 <main+0x260>)
 800162e:	484e      	ldr	r0, [pc, #312]	; (8001768 <main+0x284>)
 8001630:	f000 fca6 	bl	8001f80 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 8001634:	f000 fb6a 	bl	8001d0c <SSD1306_UpdateScreen>

		 SSD1306_GotoXY(42,32);
 8001638:	2120      	movs	r1, #32
 800163a:	202a      	movs	r0, #42	; 0x2a
 800163c:	f000 fc0a 	bl	8001e54 <SSD1306_GotoXY>
		 sprintf(char_buff2,"%.2f",tvoc);
 8001640:	4b4d      	ldr	r3, [pc, #308]	; (8001778 <main+0x294>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f7fe feef 	bl	8000428 <__aeabi_f2d>
 800164a:	4603      	mov	r3, r0
 800164c:	460c      	mov	r4, r1
 800164e:	461a      	mov	r2, r3
 8001650:	4623      	mov	r3, r4
 8001652:	4944      	ldr	r1, [pc, #272]	; (8001764 <main+0x280>)
 8001654:	4846      	ldr	r0, [pc, #280]	; (8001770 <main+0x28c>)
 8001656:	f004 ff21 	bl	800649c <siprintf>
		SSD1306_Puts(char_buff2, &Font_7x10, SSD1306_COLOR_WHITE);
 800165a:	2201      	movs	r2, #1
 800165c:	4939      	ldr	r1, [pc, #228]	; (8001744 <main+0x260>)
 800165e:	4844      	ldr	r0, [pc, #272]	; (8001770 <main+0x28c>)
 8001660:	f000 fc8e 	bl	8001f80 <SSD1306_Puts>
	    SSD1306_UpdateScreen();
 8001664:	f000 fb52 	bl	8001d0c <SSD1306_UpdateScreen>
	 ///////////////////////////////////////////////////////////////////////////////////Ambient light
		  get_lux();
 8001668:	f7ff fddc 	bl	8001224 <get_lux>
		  calculate_lux();
 800166c:	f7ff fe08 	bl	8001280 <calculate_lux>
		  SSD1306_GotoXY(42,42);
 8001670:	212a      	movs	r1, #42	; 0x2a
 8001672:	202a      	movs	r0, #42	; 0x2a
 8001674:	f000 fbee 	bl	8001e54 <SSD1306_GotoXY>
		  sprintf(char_buff2,"%.1f",flux);
 8001678:	4b40      	ldr	r3, [pc, #256]	; (800177c <main+0x298>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fed3 	bl	8000428 <__aeabi_f2d>
 8001682:	4603      	mov	r3, r0
 8001684:	460c      	mov	r4, r1
 8001686:	461a      	mov	r2, r3
 8001688:	4623      	mov	r3, r4
 800168a:	493d      	ldr	r1, [pc, #244]	; (8001780 <main+0x29c>)
 800168c:	4838      	ldr	r0, [pc, #224]	; (8001770 <main+0x28c>)
 800168e:	f004 ff05 	bl	800649c <siprintf>
		  SSD1306_Puts(char_buff2, &Font_7x10, SSD1306_COLOR_WHITE);
 8001692:	2201      	movs	r2, #1
 8001694:	492b      	ldr	r1, [pc, #172]	; (8001744 <main+0x260>)
 8001696:	4836      	ldr	r0, [pc, #216]	; (8001770 <main+0x28c>)
 8001698:	f000 fc72 	bl	8001f80 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800169c:	f000 fb36 	bl	8001d0c <SSD1306_UpdateScreen>
    //////////////////////////////////////////////////////////////////////////////////////Time

		  Get_Time();
 80016a0:	f7ff fd44 	bl	800112c <Get_Time>
		  SSD1306_DrawFilledRectangle(42, 52, 86, 12, SSD1306_COLOR_BLACK);  //to clear the previous time displayed
 80016a4:	2300      	movs	r3, #0
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	230c      	movs	r3, #12
 80016aa:	2256      	movs	r2, #86	; 0x56
 80016ac:	2134      	movs	r1, #52	; 0x34
 80016ae:	202a      	movs	r0, #42	; 0x2a
 80016b0:	f000 fd86 	bl	80021c0 <SSD1306_DrawFilledRectangle>
		  SSD1306_UpdateScreen();
 80016b4:	f000 fb2a 	bl	8001d0c <SSD1306_UpdateScreen>
		  SSD1306_GotoXY(42,52);
 80016b8:	2134      	movs	r1, #52	; 0x34
 80016ba:	202a      	movs	r0, #42	; 0x2a
 80016bc:	f000 fbca 	bl	8001e54 <SSD1306_GotoXY>
		  sprintf(hrtime,"%u",time.hour);
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <main+0x2a0>)
 80016c2:	789b      	ldrb	r3, [r3, #2]
 80016c4:	461a      	mov	r2, r3
 80016c6:	4930      	ldr	r1, [pc, #192]	; (8001788 <main+0x2a4>)
 80016c8:	4830      	ldr	r0, [pc, #192]	; (800178c <main+0x2a8>)
 80016ca:	f004 fee7 	bl	800649c <siprintf>
		  SSD1306_Puts(hrtime, &Font_7x10, SSD1306_COLOR_WHITE);
 80016ce:	2201      	movs	r2, #1
 80016d0:	491c      	ldr	r1, [pc, #112]	; (8001744 <main+0x260>)
 80016d2:	482e      	ldr	r0, [pc, #184]	; (800178c <main+0x2a8>)
 80016d4:	f000 fc54 	bl	8001f80 <SSD1306_Puts>
		  SSD1306_GotoXY(57,52);
 80016d8:	2134      	movs	r1, #52	; 0x34
 80016da:	2039      	movs	r0, #57	; 0x39
 80016dc:	f000 fbba 	bl	8001e54 <SSD1306_GotoXY>
		  SSD1306_Puts(":", &Font_7x10, SSD1306_COLOR_WHITE);
 80016e0:	2201      	movs	r2, #1
 80016e2:	4918      	ldr	r1, [pc, #96]	; (8001744 <main+0x260>)
 80016e4:	482a      	ldr	r0, [pc, #168]	; (8001790 <main+0x2ac>)
 80016e6:	f000 fc4b 	bl	8001f80 <SSD1306_Puts>
		  SSD1306_GotoXY(64,52);
 80016ea:	2134      	movs	r1, #52	; 0x34
 80016ec:	2040      	movs	r0, #64	; 0x40
 80016ee:	f000 fbb1 	bl	8001e54 <SSD1306_GotoXY>
		  sprintf(mintime,"%u",time.minutes);
 80016f2:	4b24      	ldr	r3, [pc, #144]	; (8001784 <main+0x2a0>)
 80016f4:	785b      	ldrb	r3, [r3, #1]
 80016f6:	461a      	mov	r2, r3
 80016f8:	4923      	ldr	r1, [pc, #140]	; (8001788 <main+0x2a4>)
 80016fa:	4826      	ldr	r0, [pc, #152]	; (8001794 <main+0x2b0>)
 80016fc:	f004 fece 	bl	800649c <siprintf>
		  SSD1306_Puts(mintime, &Font_7x10, SSD1306_COLOR_WHITE);
 8001700:	2201      	movs	r2, #1
 8001702:	4910      	ldr	r1, [pc, #64]	; (8001744 <main+0x260>)
 8001704:	4823      	ldr	r0, [pc, #140]	; (8001794 <main+0x2b0>)
 8001706:	f000 fc3b 	bl	8001f80 <SSD1306_Puts>
		  SSD1306_GotoXY(79,52);
 800170a:	2134      	movs	r1, #52	; 0x34
 800170c:	204f      	movs	r0, #79	; 0x4f
 800170e:	f000 fba1 	bl	8001e54 <SSD1306_GotoXY>
		  SSD1306_Puts(":", &Font_7x10, SSD1306_COLOR_WHITE);
 8001712:	2201      	movs	r2, #1
 8001714:	490b      	ldr	r1, [pc, #44]	; (8001744 <main+0x260>)
 8001716:	481e      	ldr	r0, [pc, #120]	; (8001790 <main+0x2ac>)
 8001718:	f000 fc32 	bl	8001f80 <SSD1306_Puts>
		  SSD1306_GotoXY(86,52);
 800171c:	2134      	movs	r1, #52	; 0x34
 800171e:	2056      	movs	r0, #86	; 0x56
 8001720:	f000 fb98 	bl	8001e54 <SSD1306_GotoXY>
		  sprintf(sectime,"%u",time.seconds);
 8001724:	4b17      	ldr	r3, [pc, #92]	; (8001784 <main+0x2a0>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4917      	ldr	r1, [pc, #92]	; (8001788 <main+0x2a4>)
 800172c:	481a      	ldr	r0, [pc, #104]	; (8001798 <main+0x2b4>)
 800172e:	f004 feb5 	bl	800649c <siprintf>
		  SSD1306_Puts(sectime, &Font_7x10, SSD1306_COLOR_WHITE);
 8001732:	2201      	movs	r2, #1
 8001734:	4903      	ldr	r1, [pc, #12]	; (8001744 <main+0x260>)
 8001736:	4818      	ldr	r0, [pc, #96]	; (8001798 <main+0x2b4>)
 8001738:	f000 fc22 	bl	8001f80 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 800173c:	f000 fae6 	bl	8001d0c <SSD1306_UpdateScreen>
	    get_temp_humi();
 8001740:	e72a      	b.n	8001598 <main+0xb4>
 8001742:	bf00      	nop
 8001744:	20000000 	.word	0x20000000
 8001748:	080087f0 	.word	0x080087f0
 800174c:	080087f8 	.word	0x080087f8
 8001750:	08008800 	.word	0x08008800
 8001754:	08008808 	.word	0x08008808
 8001758:	08008810 	.word	0x08008810
 800175c:	08008818 	.word	0x08008818
 8001760:	200007f8 	.word	0x200007f8
 8001764:	08008820 	.word	0x08008820
 8001768:	20000620 	.word	0x20000620
 800176c:	200007c4 	.word	0x200007c4
 8001770:	20000628 	.word	0x20000628
 8001774:	200006b4 	.word	0x200006b4
 8001778:	200006b8 	.word	0x200006b8
 800177c:	200007d8 	.word	0x200007d8
 8001780:	08008828 	.word	0x08008828
 8001784:	200007cc 	.word	0x200007cc
 8001788:	08008830 	.word	0x08008830
 800178c:	20000734 	.word	0x20000734
 8001790:	08008834 	.word	0x08008834
 8001794:	2000077c 	.word	0x2000077c
 8001798:	200007fc 	.word	0x200007fc

0800179c <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  if(GPIO_Pin==GPIO_PIN_13)
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017ac:	d105      	bne.n	80017ba <HAL_GPIO_EXTI_Callback+0x1e>
	{
       if(workflag==1)
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_GPIO_EXTI_Callback+0x28>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_GPIO_EXTI_Callback+0x1e>
       {
		  pir();
 80017b6:	f7ff fd09 	bl	80011cc <pir>
       }
	}
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000204 	.word	0x20000204

080017c8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_1,GPIO_PIN_SET);
 80017d0:	2201      	movs	r2, #1
 80017d2:	2102      	movs	r1, #2
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80017d6:	f001 fcb0 	bl	800313a <HAL_GPIO_WritePin>

}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40010800 	.word	0x40010800

080017e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b094      	sub	sp, #80	; 0x50
 80017ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017f2:	2228      	movs	r2, #40	; 0x28
 80017f4:	2100      	movs	r1, #0
 80017f6:	4618      	mov	r0, r3
 80017f8:	f004 f9f8 	bl	8005bec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800180c:	1d3b      	adds	r3, r7, #4
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001818:	2305      	movs	r3, #5
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800181c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001822:	2300      	movs	r3, #0
 8001824:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001826:	2301      	movs	r3, #1
 8001828:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800182a:	2301      	movs	r3, #1
 800182c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182e:	2302      	movs	r3, #2
 8001830:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001836:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001838:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800183c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001842:	4618      	mov	r0, r3
 8001844:	f003 f82e 	bl	80048a4 <HAL_RCC_OscConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 800184e:	f000 f993 	bl	8001b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001852:	230f      	movs	r3, #15
 8001854:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001856:	2302      	movs	r3, #2
 8001858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800185a:	2300      	movs	r3, #0
 800185c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001862:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001868:	f107 0314 	add.w	r3, r7, #20
 800186c:	2102      	movs	r1, #2
 800186e:	4618      	mov	r0, r3
 8001870:	f003 fa98 	bl	8004da4 <HAL_RCC_ClockConfig>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800187a:	f000 f97d 	bl	8001b78 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
 800187e:	2303      	movs	r3, #3
 8001880:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001882:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001886:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001888:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800188c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800188e:	1d3b      	adds	r3, r7, #4
 8001890:	4618      	mov	r0, r3
 8001892:	f003 fc23 	bl	80050dc <HAL_RCCEx_PeriphCLKConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 800189c:	f000 f96c 	bl	8001b78 <Error_Handler>
  }
}
 80018a0:	bf00      	nop
 80018a2:	3750      	adds	r7, #80	; 0x50
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <MX_ADC1_Init+0x74>)
 80018ba:	4a19      	ldr	r2, [pc, #100]	; (8001920 <MX_ADC1_Init+0x78>)
 80018bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <MX_ADC1_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <MX_ADC1_Init+0x74>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <MX_ADC1_Init+0x74>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <MX_ADC1_Init+0x74>)
 80018d2:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80018d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018d8:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_ADC1_Init+0x74>)
 80018da:	2200      	movs	r2, #0
 80018dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80018de:	4b0f      	ldr	r3, [pc, #60]	; (800191c <MX_ADC1_Init+0x74>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018e4:	480d      	ldr	r0, [pc, #52]	; (800191c <MX_ADC1_Init+0x74>)
 80018e6:	f000 ff9f 	bl	8002828 <HAL_ADC_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80018f0:	f000 f942 	bl	8001b78 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018f8:	2301      	movs	r3, #1
 80018fa:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	4619      	mov	r1, r3
 8001904:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_ADC1_Init+0x74>)
 8001906:	f001 f867 	bl	80029d8 <HAL_ADC_ConfigChannel>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001910:	f000 f932 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001914:	bf00      	nop
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20000704 	.word	0x20000704
 8001920:	40012400 	.word	0x40012400

08001924 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001928:	4b12      	ldr	r3, [pc, #72]	; (8001974 <MX_I2C1_Init+0x50>)
 800192a:	4a13      	ldr	r2, [pc, #76]	; (8001978 <MX_I2C1_Init+0x54>)
 800192c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800192e:	4b11      	ldr	r3, [pc, #68]	; (8001974 <MX_I2C1_Init+0x50>)
 8001930:	4a12      	ldr	r2, [pc, #72]	; (800197c <MX_I2C1_Init+0x58>)
 8001932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <MX_I2C1_Init+0x50>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <MX_I2C1_Init+0x50>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <MX_I2C1_Init+0x50>)
 8001942:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001946:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001948:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <MX_I2C1_Init+0x50>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <MX_I2C1_Init+0x50>)
 8001950:	2200      	movs	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001954:	4b07      	ldr	r3, [pc, #28]	; (8001974 <MX_I2C1_Init+0x50>)
 8001956:	2200      	movs	r2, #0
 8001958:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <MX_I2C1_Init+0x50>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <MX_I2C1_Init+0x50>)
 8001962:	f001 fc1b 	bl	800319c <HAL_I2C_Init>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800196c:	f000 f904 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20000630 	.word	0x20000630
 8001978:	40005400 	.word	0x40005400
 800197c:	00061a80 	.word	0x00061a80

08001980 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	605a      	str	r2, [r3, #4]
 8001990:	609a      	str	r2, [r3, #8]
 8001992:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001994:	463b      	mov	r3, r7
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800199c:	4b1d      	ldr	r3, [pc, #116]	; (8001a14 <MX_TIM3_Init+0x94>)
 800199e:	4a1e      	ldr	r2, [pc, #120]	; (8001a18 <MX_TIM3_Init+0x98>)
 80019a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40000;
 80019a2:	4b1c      	ldr	r3, [pc, #112]	; (8001a14 <MX_TIM3_Init+0x94>)
 80019a4:	f649 4240 	movw	r2, #40000	; 0x9c40
 80019a8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <MX_TIM3_Init+0x94>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000;
 80019b0:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <MX_TIM3_Init+0x94>)
 80019b2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80019b6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b8:	4b16      	ldr	r3, [pc, #88]	; (8001a14 <MX_TIM3_Init+0x94>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019be:	4b15      	ldr	r3, [pc, #84]	; (8001a14 <MX_TIM3_Init+0x94>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019c4:	4813      	ldr	r0, [pc, #76]	; (8001a14 <MX_TIM3_Init+0x94>)
 80019c6:	f003 fc3f 	bl	8005248 <HAL_TIM_Base_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80019d0:	f000 f8d2 	bl	8001b78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019da:	f107 0308 	add.w	r3, r7, #8
 80019de:	4619      	mov	r1, r3
 80019e0:	480c      	ldr	r0, [pc, #48]	; (8001a14 <MX_TIM3_Init+0x94>)
 80019e2:	f003 fd87 	bl	80054f4 <HAL_TIM_ConfigClockSource>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d001      	beq.n	80019f0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80019ec:	f000 f8c4 	bl	8001b78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f0:	2300      	movs	r3, #0
 80019f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	4619      	mov	r1, r3
 80019fc:	4805      	ldr	r0, [pc, #20]	; (8001a14 <MX_TIM3_Init+0x94>)
 80019fe:	f003 ff4d 	bl	800589c <HAL_TIMEx_MasterConfigSynchronization>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001a08:	f000 f8b6 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a0c:	bf00      	nop
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	200006c4 	.word	0x200006c4
 8001a18:	40000400 	.word	0x40000400

08001a1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a22:	4a12      	ldr	r2, [pc, #72]	; (8001a6c <MX_USART1_UART_Init+0x50>)
 8001a24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a2e:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a34:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a40:	4b09      	ldr	r3, [pc, #36]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a42:	220c      	movs	r2, #12
 8001a44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_USART1_UART_Init+0x4c>)
 8001a54:	f003 ff78 	bl	8005948 <HAL_UART_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a5e:	f000 f88b 	bl	8001b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	2000073c 	.word	0x2000073c
 8001a6c:	40013800 	.word	0x40013800

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b088      	sub	sp, #32
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 0310 	add.w	r3, r7, #16
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a84:	4b38      	ldr	r3, [pc, #224]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001a86:	699b      	ldr	r3, [r3, #24]
 8001a88:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001a8a:	f043 0310 	orr.w	r3, r3, #16
 8001a8e:	6193      	str	r3, [r2, #24]
 8001a90:	4b35      	ldr	r3, [pc, #212]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001a92:	699b      	ldr	r3, [r3, #24]
 8001a94:	f003 0310 	and.w	r3, r3, #16
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a9c:	4b32      	ldr	r3, [pc, #200]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001a9e:	699b      	ldr	r3, [r3, #24]
 8001aa0:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001aa2:	f043 0320 	orr.w	r3, r3, #32
 8001aa6:	6193      	str	r3, [r2, #24]
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	60bb      	str	r3, [r7, #8]
 8001ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab4:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001ab6:	699b      	ldr	r3, [r3, #24]
 8001ab8:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001aba:	f043 0304 	orr.w	r3, r3, #4
 8001abe:	6193      	str	r3, [r2, #24]
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	607b      	str	r3, [r7, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	4a25      	ldr	r2, [pc, #148]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001ad2:	f043 0308 	orr.w	r3, r3, #8
 8001ad6:	6193      	str	r3, [r2, #24]
 8001ad8:	4b23      	ldr	r3, [pc, #140]	; (8001b68 <MX_GPIO_Init+0xf8>)
 8001ada:	699b      	ldr	r3, [r3, #24]
 8001adc:	f003 0308 	and.w	r3, r3, #8
 8001ae0:	603b      	str	r3, [r7, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_15, GPIO_PIN_RESET);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f248 0102 	movw	r1, #32770	; 0x8002
 8001aea:	4820      	ldr	r0, [pc, #128]	; (8001b6c <MX_GPIO_Init+0xfc>)
 8001aec:	f001 fb25 	bl	800313a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2118      	movs	r1, #24
 8001af4:	481e      	ldr	r0, [pc, #120]	; (8001b70 <MX_GPIO_Init+0x100>)
 8001af6:	f001 fb20 	bl	800313a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001afa:	f248 0302 	movw	r3, #32770	; 0x8002
 8001afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4619      	mov	r1, r3
 8001b12:	4816      	ldr	r0, [pc, #88]	; (8001b6c <MX_GPIO_Init+0xfc>)
 8001b14:	f001 f9a0 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b1e:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <MX_GPIO_Init+0x104>)
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4810      	ldr	r0, [pc, #64]	; (8001b70 <MX_GPIO_Init+0x100>)
 8001b2e:	f001 f993 	bl	8002e58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001b32:	2318      	movs	r3, #24
 8001b34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b36:	2301      	movs	r3, #1
 8001b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0310 	add.w	r3, r7, #16
 8001b46:	4619      	mov	r1, r3
 8001b48:	4809      	ldr	r0, [pc, #36]	; (8001b70 <MX_GPIO_Init+0x100>)
 8001b4a:	f001 f985 	bl	8002e58 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	2028      	movs	r0, #40	; 0x28
 8001b54:	f001 f949 	bl	8002dea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b58:	2028      	movs	r0, #40	; 0x28
 8001b5a:	f001 f962 	bl	8002e22 <HAL_NVIC_EnableIRQ>

}
 8001b5e:	bf00      	nop
 8001b60:	3720      	adds	r7, #32
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	40010c00 	.word	0x40010c00
 8001b74:	10110000 	.word	0x10110000

08001b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr

08001b84 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001b8a:	f000 fb67 	bl	800225c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001b8e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001b92:	2201      	movs	r2, #1
 8001b94:	2178      	movs	r1, #120	; 0x78
 8001b96:	485b      	ldr	r0, [pc, #364]	; (8001d04 <SSD1306_Init+0x180>)
 8001b98:	f002 f98a 	bl	8003eb0 <HAL_I2C_IsDeviceReady>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e0a9      	b.n	8001cfa <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001ba6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001baa:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bac:	e002      	b.n	8001bb4 <SSD1306_Init+0x30>
		p--;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f9      	bne.n	8001bae <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001bba:	22ae      	movs	r2, #174	; 0xae
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2078      	movs	r0, #120	; 0x78
 8001bc0:	f000 fba8 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	2078      	movs	r0, #120	; 0x78
 8001bca:	f000 fba3 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001bce:	2210      	movs	r2, #16
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2078      	movs	r0, #120	; 0x78
 8001bd4:	f000 fb9e 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001bd8:	22b0      	movs	r2, #176	; 0xb0
 8001bda:	2100      	movs	r1, #0
 8001bdc:	2078      	movs	r0, #120	; 0x78
 8001bde:	f000 fb99 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001be2:	22c8      	movs	r2, #200	; 0xc8
 8001be4:	2100      	movs	r1, #0
 8001be6:	2078      	movs	r0, #120	; 0x78
 8001be8:	f000 fb94 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001bec:	2200      	movs	r2, #0
 8001bee:	2100      	movs	r1, #0
 8001bf0:	2078      	movs	r0, #120	; 0x78
 8001bf2:	f000 fb8f 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2078      	movs	r0, #120	; 0x78
 8001bfc:	f000 fb8a 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001c00:	2240      	movs	r2, #64	; 0x40
 8001c02:	2100      	movs	r1, #0
 8001c04:	2078      	movs	r0, #120	; 0x78
 8001c06:	f000 fb85 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001c0a:	2281      	movs	r2, #129	; 0x81
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	2078      	movs	r0, #120	; 0x78
 8001c10:	f000 fb80 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001c14:	22ff      	movs	r2, #255	; 0xff
 8001c16:	2100      	movs	r1, #0
 8001c18:	2078      	movs	r0, #120	; 0x78
 8001c1a:	f000 fb7b 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001c1e:	22a1      	movs	r2, #161	; 0xa1
 8001c20:	2100      	movs	r1, #0
 8001c22:	2078      	movs	r0, #120	; 0x78
 8001c24:	f000 fb76 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001c28:	22a6      	movs	r2, #166	; 0xa6
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	2078      	movs	r0, #120	; 0x78
 8001c2e:	f000 fb71 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001c32:	22a8      	movs	r2, #168	; 0xa8
 8001c34:	2100      	movs	r1, #0
 8001c36:	2078      	movs	r0, #120	; 0x78
 8001c38:	f000 fb6c 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001c3c:	223f      	movs	r2, #63	; 0x3f
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2078      	movs	r0, #120	; 0x78
 8001c42:	f000 fb67 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001c46:	22a4      	movs	r2, #164	; 0xa4
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2078      	movs	r0, #120	; 0x78
 8001c4c:	f000 fb62 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001c50:	22d3      	movs	r2, #211	; 0xd3
 8001c52:	2100      	movs	r1, #0
 8001c54:	2078      	movs	r0, #120	; 0x78
 8001c56:	f000 fb5d 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	2078      	movs	r0, #120	; 0x78
 8001c60:	f000 fb58 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001c64:	22d5      	movs	r2, #213	; 0xd5
 8001c66:	2100      	movs	r1, #0
 8001c68:	2078      	movs	r0, #120	; 0x78
 8001c6a:	f000 fb53 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001c6e:	22f0      	movs	r2, #240	; 0xf0
 8001c70:	2100      	movs	r1, #0
 8001c72:	2078      	movs	r0, #120	; 0x78
 8001c74:	f000 fb4e 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001c78:	22d9      	movs	r2, #217	; 0xd9
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	2078      	movs	r0, #120	; 0x78
 8001c7e:	f000 fb49 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001c82:	2222      	movs	r2, #34	; 0x22
 8001c84:	2100      	movs	r1, #0
 8001c86:	2078      	movs	r0, #120	; 0x78
 8001c88:	f000 fb44 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001c8c:	22da      	movs	r2, #218	; 0xda
 8001c8e:	2100      	movs	r1, #0
 8001c90:	2078      	movs	r0, #120	; 0x78
 8001c92:	f000 fb3f 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001c96:	2212      	movs	r2, #18
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2078      	movs	r0, #120	; 0x78
 8001c9c:	f000 fb3a 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001ca0:	22db      	movs	r2, #219	; 0xdb
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	2078      	movs	r0, #120	; 0x78
 8001ca6:	f000 fb35 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001caa:	2220      	movs	r2, #32
 8001cac:	2100      	movs	r1, #0
 8001cae:	2078      	movs	r0, #120	; 0x78
 8001cb0:	f000 fb30 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001cb4:	228d      	movs	r2, #141	; 0x8d
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	2078      	movs	r0, #120	; 0x78
 8001cba:	f000 fb2b 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001cbe:	2214      	movs	r2, #20
 8001cc0:	2100      	movs	r1, #0
 8001cc2:	2078      	movs	r0, #120	; 0x78
 8001cc4:	f000 fb26 	bl	8002314 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001cc8:	22af      	movs	r2, #175	; 0xaf
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2078      	movs	r0, #120	; 0x78
 8001cce:	f000 fb21 	bl	8002314 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001cd2:	222e      	movs	r2, #46	; 0x2e
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	2078      	movs	r0, #120	; 0x78
 8001cd8:	f000 fb1c 	bl	8002314 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001cdc:	2000      	movs	r0, #0
 8001cde:	f000 f843 	bl	8001d68 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001ce2:	f000 f813 	bl	8001d0c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <SSD1306_Init+0x184>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <SSD1306_Init+0x184>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <SSD1306_Init+0x184>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001cf8:	2301      	movs	r3, #1
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000630 	.word	0x20000630
 8001d08:	20000608 	.word	0x20000608

08001d0c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001d12:	2300      	movs	r3, #0
 8001d14:	71fb      	strb	r3, [r7, #7]
 8001d16:	e01d      	b.n	8001d54 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	3b50      	subs	r3, #80	; 0x50
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	461a      	mov	r2, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	2078      	movs	r0, #120	; 0x78
 8001d24:	f000 faf6 	bl	8002314 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2078      	movs	r0, #120	; 0x78
 8001d2e:	f000 faf1 	bl	8002314 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001d32:	2210      	movs	r2, #16
 8001d34:	2100      	movs	r1, #0
 8001d36:	2078      	movs	r0, #120	; 0x78
 8001d38:	f000 faec 	bl	8002314 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	01db      	lsls	r3, r3, #7
 8001d40:	4a08      	ldr	r2, [pc, #32]	; (8001d64 <SSD1306_UpdateScreen+0x58>)
 8001d42:	441a      	add	r2, r3
 8001d44:	2380      	movs	r3, #128	; 0x80
 8001d46:	2140      	movs	r1, #64	; 0x40
 8001d48:	2078      	movs	r0, #120	; 0x78
 8001d4a:	f000 fa9b 	bl	8002284 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001d4e:	79fb      	ldrb	r3, [r7, #7]
 8001d50:	3301      	adds	r3, #1
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	2b07      	cmp	r3, #7
 8001d58:	d9de      	bls.n	8001d18 <SSD1306_UpdateScreen+0xc>
	}
}
 8001d5a:	bf00      	nop
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20000208 	.word	0x20000208

08001d68 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d101      	bne.n	8001d7c <SSD1306_Fill+0x14>
 8001d78:	2300      	movs	r3, #0
 8001d7a:	e000      	b.n	8001d7e <SSD1306_Fill+0x16>
 8001d7c:	23ff      	movs	r3, #255	; 0xff
 8001d7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d82:	4619      	mov	r1, r3
 8001d84:	4803      	ldr	r0, [pc, #12]	; (8001d94 <SSD1306_Fill+0x2c>)
 8001d86:	f003 ff31 	bl	8005bec <memset>
}
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000208 	.word	0x20000208

08001d98 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	80fb      	strh	r3, [r7, #6]
 8001da2:	460b      	mov	r3, r1
 8001da4:	80bb      	strh	r3, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	70fb      	strb	r3, [r7, #3]
	if (
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	2b7f      	cmp	r3, #127	; 0x7f
 8001dae:	d848      	bhi.n	8001e42 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001db0:	88bb      	ldrh	r3, [r7, #4]
 8001db2:	2b3f      	cmp	r3, #63	; 0x3f
 8001db4:	d845      	bhi.n	8001e42 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001db6:	4b25      	ldr	r3, [pc, #148]	; (8001e4c <SSD1306_DrawPixel+0xb4>)
 8001db8:	791b      	ldrb	r3, [r3, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d006      	beq.n	8001dcc <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001dcc:	78fb      	ldrb	r3, [r7, #3]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d11a      	bne.n	8001e08 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001dd2:	88fa      	ldrh	r2, [r7, #6]
 8001dd4:	88bb      	ldrh	r3, [r7, #4]
 8001dd6:	08db      	lsrs	r3, r3, #3
 8001dd8:	b298      	uxth	r0, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	01db      	lsls	r3, r3, #7
 8001dde:	4413      	add	r3, r2
 8001de0:	4a1b      	ldr	r2, [pc, #108]	; (8001e50 <SSD1306_DrawPixel+0xb8>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	b25a      	sxtb	r2, r3
 8001de6:	88bb      	ldrh	r3, [r7, #4]
 8001de8:	f003 0307 	and.w	r3, r3, #7
 8001dec:	2101      	movs	r1, #1
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	b25b      	sxtb	r3, r3
 8001df4:	4313      	orrs	r3, r2
 8001df6:	b259      	sxtb	r1, r3
 8001df8:	88fa      	ldrh	r2, [r7, #6]
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	01db      	lsls	r3, r3, #7
 8001dfe:	4413      	add	r3, r2
 8001e00:	b2c9      	uxtb	r1, r1
 8001e02:	4a13      	ldr	r2, [pc, #76]	; (8001e50 <SSD1306_DrawPixel+0xb8>)
 8001e04:	54d1      	strb	r1, [r2, r3]
 8001e06:	e01d      	b.n	8001e44 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001e08:	88fa      	ldrh	r2, [r7, #6]
 8001e0a:	88bb      	ldrh	r3, [r7, #4]
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	b298      	uxth	r0, r3
 8001e10:	4603      	mov	r3, r0
 8001e12:	01db      	lsls	r3, r3, #7
 8001e14:	4413      	add	r3, r2
 8001e16:	4a0e      	ldr	r2, [pc, #56]	; (8001e50 <SSD1306_DrawPixel+0xb8>)
 8001e18:	5cd3      	ldrb	r3, [r2, r3]
 8001e1a:	b25a      	sxtb	r2, r3
 8001e1c:	88bb      	ldrh	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	2101      	movs	r1, #1
 8001e24:	fa01 f303 	lsl.w	r3, r1, r3
 8001e28:	b25b      	sxtb	r3, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	b25b      	sxtb	r3, r3
 8001e2e:	4013      	ands	r3, r2
 8001e30:	b259      	sxtb	r1, r3
 8001e32:	88fa      	ldrh	r2, [r7, #6]
 8001e34:	4603      	mov	r3, r0
 8001e36:	01db      	lsls	r3, r3, #7
 8001e38:	4413      	add	r3, r2
 8001e3a:	b2c9      	uxtb	r1, r1
 8001e3c:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <SSD1306_DrawPixel+0xb8>)
 8001e3e:	54d1      	strb	r1, [r2, r3]
 8001e40:	e000      	b.n	8001e44 <SSD1306_DrawPixel+0xac>
		return;
 8001e42:	bf00      	nop
	}
}
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	20000608 	.word	0x20000608
 8001e50:	20000208 	.word	0x20000208

08001e54 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	460a      	mov	r2, r1
 8001e5e:	80fb      	strh	r3, [r7, #6]
 8001e60:	4613      	mov	r3, r2
 8001e62:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001e64:	4a05      	ldr	r2, [pc, #20]	; (8001e7c <SSD1306_GotoXY+0x28>)
 8001e66:	88fb      	ldrh	r3, [r7, #6]
 8001e68:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <SSD1306_GotoXY+0x28>)
 8001e6c:	88bb      	ldrh	r3, [r7, #4]
 8001e6e:	8053      	strh	r3, [r2, #2]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	20000608 	.word	0x20000608

08001e80 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	6039      	str	r1, [r7, #0]
 8001e8a:	71fb      	strb	r3, [r7, #7]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001e90:	4b3a      	ldr	r3, [pc, #232]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001e92:	881b      	ldrh	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
	if (
 8001e9c:	2b7f      	cmp	r3, #127	; 0x7f
 8001e9e:	dc07      	bgt.n	8001eb0 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001ea0:	4b36      	ldr	r3, [pc, #216]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001ea2:	885b      	ldrh	r3, [r3, #2]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	785b      	ldrb	r3, [r3, #1]
 8001eaa:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001eac:	2b3f      	cmp	r3, #63	; 0x3f
 8001eae:	dd01      	ble.n	8001eb4 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	e05e      	b.n	8001f72 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	e04b      	b.n	8001f52 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	3b20      	subs	r3, #32
 8001ec2:	6839      	ldr	r1, [r7, #0]
 8001ec4:	7849      	ldrb	r1, [r1, #1]
 8001ec6:	fb01 f303 	mul.w	r3, r1, r3
 8001eca:	4619      	mov	r1, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	440b      	add	r3, r1
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	881b      	ldrh	r3, [r3, #0]
 8001ed6:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
 8001edc:	e030      	b.n	8001f40 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001ede:	68fa      	ldr	r2, [r7, #12]
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d010      	beq.n	8001f10 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001eee:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001ef0:	881a      	ldrh	r2, [r3, #0]
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b298      	uxth	r0, r3
 8001efa:	4b20      	ldr	r3, [pc, #128]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001efc:	885a      	ldrh	r2, [r3, #2]
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	4413      	add	r3, r2
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	79ba      	ldrb	r2, [r7, #6]
 8001f08:	4619      	mov	r1, r3
 8001f0a:	f7ff ff45 	bl	8001d98 <SSD1306_DrawPixel>
 8001f0e:	e014      	b.n	8001f3a <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001f12:	881a      	ldrh	r2, [r3, #0]
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	b298      	uxth	r0, r3
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001f1e:	885a      	ldrh	r2, [r3, #2]
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	4413      	add	r3, r2
 8001f26:	b299      	uxth	r1, r3
 8001f28:	79bb      	ldrb	r3, [r7, #6]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	f7ff ff2f 	bl	8001d98 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d3c8      	bcc.n	8001ede <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	461a      	mov	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d3ad      	bcc.n	8001eba <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001f5e:	4b07      	ldr	r3, [pc, #28]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001f60:	881a      	ldrh	r2, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	b29b      	uxth	r3, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	4b03      	ldr	r3, [pc, #12]	; (8001f7c <SSD1306_Putc+0xfc>)
 8001f6e:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001f70:	79fb      	ldrb	r3, [r7, #7]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000608 	.word	0x20000608

08001f80 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	60f8      	str	r0, [r7, #12]
 8001f88:	60b9      	str	r1, [r7, #8]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001f8e:	e012      	b.n	8001fb6 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	79fa      	ldrb	r2, [r7, #7]
 8001f96:	68b9      	ldr	r1, [r7, #8]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff71 	bl	8001e80 <SSD1306_Putc>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d002      	beq.n	8001fb0 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	e008      	b.n	8001fc2 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1e8      	bne.n	8001f90 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	781b      	ldrb	r3, [r3, #0]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001fca:	b590      	push	{r4, r7, lr}
 8001fcc:	b087      	sub	sp, #28
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	4608      	mov	r0, r1
 8001fd4:	4611      	mov	r1, r2
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	4623      	mov	r3, r4
 8001fda:	80fb      	strh	r3, [r7, #6]
 8001fdc:	4603      	mov	r3, r0
 8001fde:	80bb      	strh	r3, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	807b      	strh	r3, [r7, #2]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001fe8:	88fb      	ldrh	r3, [r7, #6]
 8001fea:	2b7f      	cmp	r3, #127	; 0x7f
 8001fec:	d901      	bls.n	8001ff2 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001fee:	237f      	movs	r3, #127	; 0x7f
 8001ff0:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ff6:	d901      	bls.n	8001ffc <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001ff8:	237f      	movs	r3, #127	; 0x7f
 8001ffa:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001ffc:	88bb      	ldrh	r3, [r7, #4]
 8001ffe:	2b3f      	cmp	r3, #63	; 0x3f
 8002000:	d901      	bls.n	8002006 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8002002:	233f      	movs	r3, #63	; 0x3f
 8002004:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8002006:	883b      	ldrh	r3, [r7, #0]
 8002008:	2b3f      	cmp	r3, #63	; 0x3f
 800200a:	d901      	bls.n	8002010 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 800200c:	233f      	movs	r3, #63	; 0x3f
 800200e:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8002010:	88fa      	ldrh	r2, [r7, #6]
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	429a      	cmp	r2, r3
 8002016:	d205      	bcs.n	8002024 <SSD1306_DrawLine+0x5a>
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	b29b      	uxth	r3, r3
 8002020:	b21b      	sxth	r3, r3
 8002022:	e004      	b.n	800202e <SSD1306_DrawLine+0x64>
 8002024:	88fa      	ldrh	r2, [r7, #6]
 8002026:	887b      	ldrh	r3, [r7, #2]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	b29b      	uxth	r3, r3
 800202c:	b21b      	sxth	r3, r3
 800202e:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8002030:	88ba      	ldrh	r2, [r7, #4]
 8002032:	883b      	ldrh	r3, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d205      	bcs.n	8002044 <SSD1306_DrawLine+0x7a>
 8002038:	883a      	ldrh	r2, [r7, #0]
 800203a:	88bb      	ldrh	r3, [r7, #4]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	b29b      	uxth	r3, r3
 8002040:	b21b      	sxth	r3, r3
 8002042:	e004      	b.n	800204e <SSD1306_DrawLine+0x84>
 8002044:	88ba      	ldrh	r2, [r7, #4]
 8002046:	883b      	ldrh	r3, [r7, #0]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	b29b      	uxth	r3, r3
 800204c:	b21b      	sxth	r3, r3
 800204e:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8002050:	88fa      	ldrh	r2, [r7, #6]
 8002052:	887b      	ldrh	r3, [r7, #2]
 8002054:	429a      	cmp	r2, r3
 8002056:	d201      	bcs.n	800205c <SSD1306_DrawLine+0x92>
 8002058:	2301      	movs	r3, #1
 800205a:	e001      	b.n	8002060 <SSD1306_DrawLine+0x96>
 800205c:	f04f 33ff 	mov.w	r3, #4294967295
 8002060:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8002062:	88ba      	ldrh	r2, [r7, #4]
 8002064:	883b      	ldrh	r3, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d201      	bcs.n	800206e <SSD1306_DrawLine+0xa4>
 800206a:	2301      	movs	r3, #1
 800206c:	e001      	b.n	8002072 <SSD1306_DrawLine+0xa8>
 800206e:	f04f 33ff 	mov.w	r3, #4294967295
 8002072:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8002074:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002078:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800207c:	429a      	cmp	r2, r3
 800207e:	dd06      	ble.n	800208e <SSD1306_DrawLine+0xc4>
 8002080:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002084:	0fda      	lsrs	r2, r3, #31
 8002086:	4413      	add	r3, r2
 8002088:	105b      	asrs	r3, r3, #1
 800208a:	b21b      	sxth	r3, r3
 800208c:	e006      	b.n	800209c <SSD1306_DrawLine+0xd2>
 800208e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002092:	425b      	negs	r3, r3
 8002094:	0fda      	lsrs	r2, r3, #31
 8002096:	4413      	add	r3, r2
 8002098:	105b      	asrs	r3, r3, #1
 800209a:	b21b      	sxth	r3, r3
 800209c:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800209e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d129      	bne.n	80020fa <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80020a6:	883a      	ldrh	r2, [r7, #0]
 80020a8:	88bb      	ldrh	r3, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d205      	bcs.n	80020ba <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80020ae:	883b      	ldrh	r3, [r7, #0]
 80020b0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80020b2:	88bb      	ldrh	r3, [r7, #4]
 80020b4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80020b6:	893b      	ldrh	r3, [r7, #8]
 80020b8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	88fb      	ldrh	r3, [r7, #6]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d205      	bcs.n	80020ce <SSD1306_DrawLine+0x104>
			tmp = x1;
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80020ca:	893b      	ldrh	r3, [r7, #8]
 80020cc:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80020ce:	88bb      	ldrh	r3, [r7, #4]
 80020d0:	82bb      	strh	r3, [r7, #20]
 80020d2:	e00c      	b.n	80020ee <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80020d4:	8ab9      	ldrh	r1, [r7, #20]
 80020d6:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80020da:	88fb      	ldrh	r3, [r7, #6]
 80020dc:	4618      	mov	r0, r3
 80020de:	f7ff fe5b 	bl	8001d98 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80020e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3301      	adds	r3, #1
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	82bb      	strh	r3, [r7, #20]
 80020ee:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80020f2:	883b      	ldrh	r3, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	dded      	ble.n	80020d4 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80020f8:	e05f      	b.n	80021ba <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80020fa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d129      	bne.n	8002156 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8002102:	883a      	ldrh	r2, [r7, #0]
 8002104:	88bb      	ldrh	r3, [r7, #4]
 8002106:	429a      	cmp	r2, r3
 8002108:	d205      	bcs.n	8002116 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800210a:	883b      	ldrh	r3, [r7, #0]
 800210c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800210e:	88bb      	ldrh	r3, [r7, #4]
 8002110:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8002112:	893b      	ldrh	r3, [r7, #8]
 8002114:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8002116:	887a      	ldrh	r2, [r7, #2]
 8002118:	88fb      	ldrh	r3, [r7, #6]
 800211a:	429a      	cmp	r2, r3
 800211c:	d205      	bcs.n	800212a <SSD1306_DrawLine+0x160>
			tmp = x1;
 800211e:	887b      	ldrh	r3, [r7, #2]
 8002120:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8002122:	88fb      	ldrh	r3, [r7, #6]
 8002124:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8002126:	893b      	ldrh	r3, [r7, #8]
 8002128:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800212a:	88fb      	ldrh	r3, [r7, #6]
 800212c:	82bb      	strh	r3, [r7, #20]
 800212e:	e00c      	b.n	800214a <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8002130:	8abb      	ldrh	r3, [r7, #20]
 8002132:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8002136:	88b9      	ldrh	r1, [r7, #4]
 8002138:	4618      	mov	r0, r3
 800213a:	f7ff fe2d 	bl	8001d98 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 800213e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002142:	b29b      	uxth	r3, r3
 8002144:	3301      	adds	r3, #1
 8002146:	b29b      	uxth	r3, r3
 8002148:	82bb      	strh	r3, [r7, #20]
 800214a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800214e:	887b      	ldrh	r3, [r7, #2]
 8002150:	429a      	cmp	r2, r3
 8002152:	dded      	ble.n	8002130 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8002154:	e031      	b.n	80021ba <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 8002156:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800215a:	88b9      	ldrh	r1, [r7, #4]
 800215c:	88fb      	ldrh	r3, [r7, #6]
 800215e:	4618      	mov	r0, r3
 8002160:	f7ff fe1a 	bl	8001d98 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8002164:	88fa      	ldrh	r2, [r7, #6]
 8002166:	887b      	ldrh	r3, [r7, #2]
 8002168:	429a      	cmp	r2, r3
 800216a:	d103      	bne.n	8002174 <SSD1306_DrawLine+0x1aa>
 800216c:	88ba      	ldrh	r2, [r7, #4]
 800216e:	883b      	ldrh	r3, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d021      	beq.n	80021b8 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8002174:	8afb      	ldrh	r3, [r7, #22]
 8002176:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002178:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800217c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002180:	425b      	negs	r3, r3
 8002182:	429a      	cmp	r2, r3
 8002184:	dd08      	ble.n	8002198 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8002186:	8afa      	ldrh	r2, [r7, #22]
 8002188:	8a3b      	ldrh	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	b29b      	uxth	r3, r3
 800218e:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8002190:	89fa      	ldrh	r2, [r7, #14]
 8002192:	88fb      	ldrh	r3, [r7, #6]
 8002194:	4413      	add	r3, r2
 8002196:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002198:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800219c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dad8      	bge.n	8002156 <SSD1306_DrawLine+0x18c>
			err += dx;
 80021a4:	8afa      	ldrh	r2, [r7, #22]
 80021a6:	8a7b      	ldrh	r3, [r7, #18]
 80021a8:	4413      	add	r3, r2
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80021ae:	89ba      	ldrh	r2, [r7, #12]
 80021b0:	88bb      	ldrh	r3, [r7, #4]
 80021b2:	4413      	add	r3, r2
 80021b4:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80021b6:	e7ce      	b.n	8002156 <SSD1306_DrawLine+0x18c>
			break;
 80021b8:	bf00      	nop
		} 
	}
}
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd90      	pop	{r4, r7, pc}

080021c0 <SSD1306_DrawFilledRectangle>:
	SSD1306_DrawLine(x, y + h, x + w, y + h, c); /* Bottom line */
	SSD1306_DrawLine(x, y, x, y + h, c);         /* Left line */
	SSD1306_DrawLine(x + w, y, x + w, y + h, c); /* Right line */
}

void SSD1306_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, SSD1306_COLOR_t c) {
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b087      	sub	sp, #28
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	4604      	mov	r4, r0
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4623      	mov	r3, r4
 80021d0:	80fb      	strh	r3, [r7, #6]
 80021d2:	4603      	mov	r3, r0
 80021d4:	80bb      	strh	r3, [r7, #4]
 80021d6:	460b      	mov	r3, r1
 80021d8:	807b      	strh	r3, [r7, #2]
 80021da:	4613      	mov	r3, r2
 80021dc:	803b      	strh	r3, [r7, #0]
	uint8_t i;
	
	/* Check input parameters */
	if (
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	2b7f      	cmp	r3, #127	; 0x7f
 80021e2:	d836      	bhi.n	8002252 <SSD1306_DrawFilledRectangle+0x92>
		x >= SSD1306_WIDTH ||
 80021e4:	88bb      	ldrh	r3, [r7, #4]
 80021e6:	2b3f      	cmp	r3, #63	; 0x3f
 80021e8:	d833      	bhi.n	8002252 <SSD1306_DrawFilledRectangle+0x92>
		/* Return error */
		return;
	}
	
	/* Check width and height */
	if ((x + w) >= SSD1306_WIDTH) {
 80021ea:	88fa      	ldrh	r2, [r7, #6]
 80021ec:	887b      	ldrh	r3, [r7, #2]
 80021ee:	4413      	add	r3, r2
 80021f0:	2b7f      	cmp	r3, #127	; 0x7f
 80021f2:	dd03      	ble.n	80021fc <SSD1306_DrawFilledRectangle+0x3c>
		w = SSD1306_WIDTH - x;
 80021f4:	88fb      	ldrh	r3, [r7, #6]
 80021f6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80021fa:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= SSD1306_HEIGHT) {
 80021fc:	88ba      	ldrh	r2, [r7, #4]
 80021fe:	883b      	ldrh	r3, [r7, #0]
 8002200:	4413      	add	r3, r2
 8002202:	2b3f      	cmp	r3, #63	; 0x3f
 8002204:	dd03      	ble.n	800220e <SSD1306_DrawFilledRectangle+0x4e>
		h = SSD1306_HEIGHT - y;
 8002206:	88bb      	ldrh	r3, [r7, #4]
 8002208:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800220c:	803b      	strh	r3, [r7, #0]
	}
	
	/* Draw lines */
	for (i = 0; i <= h; i++) {
 800220e:	2300      	movs	r3, #0
 8002210:	73fb      	strb	r3, [r7, #15]
 8002212:	e018      	b.n	8002246 <SSD1306_DrawFilledRectangle+0x86>
		/* Draw lines */
		SSD1306_DrawLine(x, y + i, x + w, y + i, c);
 8002214:	7bfb      	ldrb	r3, [r7, #15]
 8002216:	b29a      	uxth	r2, r3
 8002218:	88bb      	ldrh	r3, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	b299      	uxth	r1, r3
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	887b      	ldrh	r3, [r7, #2]
 8002222:	4413      	add	r3, r2
 8002224:	b29c      	uxth	r4, r3
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	b29a      	uxth	r2, r3
 800222a:	88bb      	ldrh	r3, [r7, #4]
 800222c:	4413      	add	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	88f8      	ldrh	r0, [r7, #6]
 8002232:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	4613      	mov	r3, r2
 800223a:	4622      	mov	r2, r4
 800223c:	f7ff fec5 	bl	8001fca <SSD1306_DrawLine>
	for (i = 0; i <= h; i++) {
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	3301      	adds	r3, #1
 8002244:	73fb      	strb	r3, [r7, #15]
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	b29b      	uxth	r3, r3
 800224a:	883a      	ldrh	r2, [r7, #0]
 800224c:	429a      	cmp	r2, r3
 800224e:	d2e1      	bcs.n	8002214 <SSD1306_DrawFilledRectangle+0x54>
 8002250:	e000      	b.n	8002254 <SSD1306_DrawFilledRectangle+0x94>
		return;
 8002252:	bf00      	nop
	}
}
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	bd90      	pop	{r4, r7, pc}
	...

0800225c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <ssd1306_I2C_Init+0x24>)
 8002264:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002266:	e002      	b.n	800226e <ssd1306_I2C_Init+0x12>
		p--;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f9      	bne.n	8002268 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	0003d090 	.word	0x0003d090

08002284 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002284:	b590      	push	{r4, r7, lr}
 8002286:	b0c7      	sub	sp, #284	; 0x11c
 8002288:	af02      	add	r7, sp, #8
 800228a:	4604      	mov	r4, r0
 800228c:	4608      	mov	r0, r1
 800228e:	4639      	mov	r1, r7
 8002290:	600a      	str	r2, [r1, #0]
 8002292:	4619      	mov	r1, r3
 8002294:	1dfb      	adds	r3, r7, #7
 8002296:	4622      	mov	r2, r4
 8002298:	701a      	strb	r2, [r3, #0]
 800229a:	1dbb      	adds	r3, r7, #6
 800229c:	4602      	mov	r2, r0
 800229e:	701a      	strb	r2, [r3, #0]
 80022a0:	1d3b      	adds	r3, r7, #4
 80022a2:	460a      	mov	r2, r1
 80022a4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80022a6:	f107 030c 	add.w	r3, r7, #12
 80022aa:	1dba      	adds	r2, r7, #6
 80022ac:	7812      	ldrb	r2, [r2, #0]
 80022ae:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80022b0:	2300      	movs	r3, #0
 80022b2:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80022b6:	e010      	b.n	80022da <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 80022b8:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022bc:	463a      	mov	r2, r7
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	441a      	add	r2, r3
 80022c2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022c6:	3301      	adds	r3, #1
 80022c8:	7811      	ldrb	r1, [r2, #0]
 80022ca:	f107 020c 	add.w	r2, r7, #12
 80022ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80022d0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022d4:	3301      	adds	r3, #1
 80022d6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80022da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80022de:	b29b      	uxth	r3, r3
 80022e0:	1d3a      	adds	r2, r7, #4
 80022e2:	8812      	ldrh	r2, [r2, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d8e7      	bhi.n	80022b8 <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80022e8:	1dfb      	adds	r3, r7, #7
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	b299      	uxth	r1, r3
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	b298      	uxth	r0, r3
 80022f6:	f107 020c 	add.w	r2, r7, #12
 80022fa:	230a      	movs	r3, #10
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	4603      	mov	r3, r0
 8002300:	4803      	ldr	r0, [pc, #12]	; (8002310 <ssd1306_I2C_WriteMulti+0x8c>)
 8002302:	f001 f873 	bl	80033ec <HAL_I2C_Master_Transmit>
}
 8002306:	bf00      	nop
 8002308:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800230c:	46bd      	mov	sp, r7
 800230e:	bd90      	pop	{r4, r7, pc}
 8002310:	20000630 	.word	0x20000630

08002314 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af02      	add	r7, sp, #8
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	460b      	mov	r3, r1
 8002320:	71bb      	strb	r3, [r7, #6]
 8002322:	4613      	mov	r3, r2
 8002324:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800232a:	797b      	ldrb	r3, [r7, #5]
 800232c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800232e:	79fb      	ldrb	r3, [r7, #7]
 8002330:	b299      	uxth	r1, r3
 8002332:	f107 020c 	add.w	r2, r7, #12
 8002336:	230a      	movs	r3, #10
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	2302      	movs	r3, #2
 800233c:	4803      	ldr	r0, [pc, #12]	; (800234c <ssd1306_I2C_Write+0x38>)
 800233e:	f001 f855 	bl	80033ec <HAL_I2C_Master_Transmit>
}
 8002342:	bf00      	nop
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000630 	.word	0x20000630

08002350 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002356:	4b15      	ldr	r3, [pc, #84]	; (80023ac <HAL_MspInit+0x5c>)
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	4a14      	ldr	r2, [pc, #80]	; (80023ac <HAL_MspInit+0x5c>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6193      	str	r3, [r2, #24]
 8002362:	4b12      	ldr	r3, [pc, #72]	; (80023ac <HAL_MspInit+0x5c>)
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	4b0f      	ldr	r3, [pc, #60]	; (80023ac <HAL_MspInit+0x5c>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	4a0e      	ldr	r2, [pc, #56]	; (80023ac <HAL_MspInit+0x5c>)
 8002374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002378:	61d3      	str	r3, [r2, #28]
 800237a:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <HAL_MspInit+0x5c>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	607b      	str	r3, [r7, #4]
 8002384:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_MspInit+0x60>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <HAL_MspInit+0x60>)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bc80      	pop	{r7}
 80023aa:	4770      	bx	lr
 80023ac:	40021000 	.word	0x40021000
 80023b0:	40010000 	.word	0x40010000

080023b4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b088      	sub	sp, #32
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023bc:	f107 0310 	add.w	r3, r7, #16
 80023c0:	2200      	movs	r2, #0
 80023c2:	601a      	str	r2, [r3, #0]
 80023c4:	605a      	str	r2, [r3, #4]
 80023c6:	609a      	str	r2, [r3, #8]
 80023c8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a14      	ldr	r2, [pc, #80]	; (8002420 <HAL_ADC_MspInit+0x6c>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d121      	bne.n	8002418 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_ADC_MspInit+0x70>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a12      	ldr	r2, [pc, #72]	; (8002424 <HAL_ADC_MspInit+0x70>)
 80023da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b10      	ldr	r3, [pc, #64]	; (8002424 <HAL_ADC_MspInit+0x70>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <HAL_ADC_MspInit+0x70>)
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <HAL_ADC_MspInit+0x70>)
 80023f2:	f043 0304 	orr.w	r3, r3, #4
 80023f6:	6193      	str	r3, [r2, #24]
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <HAL_ADC_MspInit+0x70>)
 80023fa:	699b      	ldr	r3, [r3, #24]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002404:	2301      	movs	r3, #1
 8002406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002408:	2303      	movs	r3, #3
 800240a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240c:	f107 0310 	add.w	r3, r7, #16
 8002410:	4619      	mov	r1, r3
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <HAL_ADC_MspInit+0x74>)
 8002414:	f000 fd20 	bl	8002e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002418:	bf00      	nop
 800241a:	3720      	adds	r7, #32
 800241c:	46bd      	mov	sp, r7
 800241e:	bd80      	pop	{r7, pc}
 8002420:	40012400 	.word	0x40012400
 8002424:	40021000 	.word	0x40021000
 8002428:	40010800 	.word	0x40010800

0800242c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	2200      	movs	r2, #0
 800243a:	601a      	str	r2, [r3, #0]
 800243c:	605a      	str	r2, [r3, #4]
 800243e:	609a      	str	r2, [r3, #8]
 8002440:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a15      	ldr	r2, [pc, #84]	; (800249c <HAL_I2C_MspInit+0x70>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d123      	bne.n	8002494 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	4a13      	ldr	r2, [pc, #76]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 8002452:	f043 0308 	orr.w	r3, r3, #8
 8002456:	6193      	str	r3, [r2, #24]
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	60fb      	str	r3, [r7, #12]
 8002462:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002464:	23c0      	movs	r3, #192	; 0xc0
 8002466:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002468:	2312      	movs	r3, #18
 800246a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800246c:	2303      	movs	r3, #3
 800246e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002470:	f107 0310 	add.w	r3, r7, #16
 8002474:	4619      	mov	r1, r3
 8002476:	480b      	ldr	r0, [pc, #44]	; (80024a4 <HAL_I2C_MspInit+0x78>)
 8002478:	f000 fcee 	bl	8002e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 800247e:	69db      	ldr	r3, [r3, #28]
 8002480:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 8002482:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002486:	61d3      	str	r3, [r2, #28]
 8002488:	4b05      	ldr	r3, [pc, #20]	; (80024a0 <HAL_I2C_MspInit+0x74>)
 800248a:	69db      	ldr	r3, [r3, #28]
 800248c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002494:	bf00      	nop
 8002496:	3720      	adds	r7, #32
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40005400 	.word	0x40005400
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40010c00 	.word	0x40010c00

080024a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	; (80024ec <HAL_TIM_Base_MspInit+0x44>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d113      	bne.n	80024e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024ba:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <HAL_TIM_Base_MspInit+0x48>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <HAL_TIM_Base_MspInit+0x48>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	61d3      	str	r3, [r2, #28]
 80024c6:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <HAL_TIM_Base_MspInit+0x48>)
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80024d2:	2200      	movs	r2, #0
 80024d4:	2100      	movs	r1, #0
 80024d6:	201d      	movs	r0, #29
 80024d8:	f000 fc87 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024dc:	201d      	movs	r0, #29
 80024de:	f000 fca0 	bl	8002e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40021000 	.word	0x40021000

080024f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0310 	add.w	r3, r7, #16
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a1c      	ldr	r2, [pc, #112]	; (8002580 <HAL_UART_MspInit+0x8c>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d131      	bne.n	8002578 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_UART_MspInit+0x90>)
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_UART_MspInit+0x90>)
 800251a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251e:	6193      	str	r3, [r2, #24]
 8002520:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_UART_MspInit+0x90>)
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002528:	60fb      	str	r3, [r7, #12]
 800252a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252c:	4b15      	ldr	r3, [pc, #84]	; (8002584 <HAL_UART_MspInit+0x90>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <HAL_UART_MspInit+0x90>)
 8002532:	f043 0304 	orr.w	r3, r3, #4
 8002536:	6193      	str	r3, [r2, #24]
 8002538:	4b12      	ldr	r3, [pc, #72]	; (8002584 <HAL_UART_MspInit+0x90>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	60bb      	str	r3, [r7, #8]
 8002542:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002548:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800254a:	2302      	movs	r3, #2
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800254e:	2303      	movs	r3, #3
 8002550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	f107 0310 	add.w	r3, r7, #16
 8002556:	4619      	mov	r1, r3
 8002558:	480b      	ldr	r0, [pc, #44]	; (8002588 <HAL_UART_MspInit+0x94>)
 800255a:	f000 fc7d 	bl	8002e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800255e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256c:	f107 0310 	add.w	r3, r7, #16
 8002570:	4619      	mov	r1, r3
 8002572:	4805      	ldr	r0, [pc, #20]	; (8002588 <HAL_UART_MspInit+0x94>)
 8002574:	f000 fc70 	bl	8002e58 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002578:	bf00      	nop
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40013800 	.word	0x40013800
 8002584:	40021000 	.word	0x40021000
 8002588:	40010800 	.word	0x40010800

0800258c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002590:	bf00      	nop
 8002592:	46bd      	mov	sp, r7
 8002594:	bc80      	pop	{r7}
 8002596:	4770      	bx	lr

08002598 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800259c:	e7fe      	b.n	800259c <HardFault_Handler+0x4>

0800259e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800259e:	b480      	push	{r7}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025a2:	e7fe      	b.n	80025a2 <MemManage_Handler+0x4>

080025a4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025a4:	b480      	push	{r7}
 80025a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025a8:	e7fe      	b.n	80025a8 <BusFault_Handler+0x4>

080025aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025aa:	b480      	push	{r7}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025ae:	e7fe      	b.n	80025ae <UsageFault_Handler+0x4>

080025b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025b4:	bf00      	nop
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr

080025c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025cc:	bf00      	nop
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025d8:	f000 f8e8 	bl	80027ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025dc:	bf00      	nop
 80025de:	bd80      	pop	{r7, pc}

080025e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025e4:	4802      	ldr	r0, [pc, #8]	; (80025f0 <TIM3_IRQHandler+0x10>)
 80025e6:	f002 fe7d 	bl	80052e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	200006c4 	.word	0x200006c4

080025f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
//	for(int i=0;i<65535;i++);
	if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_13)==1);
 80025f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025fc:	4804      	ldr	r0, [pc, #16]	; (8002610 <EXTI15_10_IRQHandler+0x1c>)
 80025fe:	f000 fd85 	bl	800310c <HAL_GPIO_ReadPin>
//			    SSD1306_Puts("Light:", &Font_7x10, SSD1306_COLOR_WHITE);
//			    SSD1306_UpdateScreen();
//		}
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002602:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002606:	f000 fdb1 	bl	800316c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	40010c00 	.word	0x40010c00

08002614 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800261c:	4b11      	ldr	r3, [pc, #68]	; (8002664 <_sbrk+0x50>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d102      	bne.n	800262a <_sbrk+0x16>
		heap_end = &end;
 8002624:	4b0f      	ldr	r3, [pc, #60]	; (8002664 <_sbrk+0x50>)
 8002626:	4a10      	ldr	r2, [pc, #64]	; (8002668 <_sbrk+0x54>)
 8002628:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800262a:	4b0e      	ldr	r3, [pc, #56]	; (8002664 <_sbrk+0x50>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002630:	4b0c      	ldr	r3, [pc, #48]	; (8002664 <_sbrk+0x50>)
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	4413      	add	r3, r2
 8002638:	466a      	mov	r2, sp
 800263a:	4293      	cmp	r3, r2
 800263c:	d907      	bls.n	800264e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800263e:	f003 faab 	bl	8005b98 <__errno>
 8002642:	4602      	mov	r2, r0
 8002644:	230c      	movs	r3, #12
 8002646:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
 800264c:	e006      	b.n	800265c <_sbrk+0x48>
	}

	heap_end += incr;
 800264e:	4b05      	ldr	r3, [pc, #20]	; (8002664 <_sbrk+0x50>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4413      	add	r3, r2
 8002656:	4a03      	ldr	r2, [pc, #12]	; (8002664 <_sbrk+0x50>)
 8002658:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800265a:	68fb      	ldr	r3, [r7, #12]
}
 800265c:	4618      	mov	r0, r3
 800265e:	3710      	adds	r7, #16
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000610 	.word	0x20000610
 8002668:	20000808 	.word	0x20000808

0800266c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002670:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <SystemInit+0x5c>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <SystemInit+0x5c>)
 8002676:	f043 0301 	orr.w	r3, r3, #1
 800267a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <SystemInit+0x5c>)
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	4911      	ldr	r1, [pc, #68]	; (80026c8 <SystemInit+0x5c>)
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <SystemInit+0x60>)
 8002684:	4013      	ands	r3, r2
 8002686:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <SystemInit+0x5c>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0e      	ldr	r2, [pc, #56]	; (80026c8 <SystemInit+0x5c>)
 800268e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <SystemInit+0x5c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <SystemInit+0x5c>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <SystemInit+0x5c>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <SystemInit+0x5c>)
 80026aa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80026ae:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <SystemInit+0x5c>)
 80026b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80026b6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80026b8:	4b05      	ldr	r3, [pc, #20]	; (80026d0 <SystemInit+0x64>)
 80026ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026be:	609a      	str	r2, [r3, #8]
#endif 
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	40021000 	.word	0x40021000
 80026cc:	f8ff0000 	.word	0xf8ff0000
 80026d0:	e000ed00 	.word	0xe000ed00

080026d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80026d4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80026d6:	e003      	b.n	80026e0 <LoopCopyDataInit>

080026d8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80026da:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80026dc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80026de:	3104      	adds	r1, #4

080026e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80026e0:	480a      	ldr	r0, [pc, #40]	; (800270c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80026e2:	4b0b      	ldr	r3, [pc, #44]	; (8002710 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80026e4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80026e6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80026e8:	d3f6      	bcc.n	80026d8 <CopyDataInit>
  ldr r2, =_sbss
 80026ea:	4a0a      	ldr	r2, [pc, #40]	; (8002714 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80026ec:	e002      	b.n	80026f4 <LoopFillZerobss>

080026ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80026ee:	2300      	movs	r3, #0
  str r3, [r2], #4
 80026f0:	f842 3b04 	str.w	r3, [r2], #4

080026f4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80026f6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80026f8:	d3f9      	bcc.n	80026ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80026fa:	f7ff ffb7 	bl	800266c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80026fe:	f003 fa51 	bl	8005ba4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002702:	f7fe feef 	bl	80014e4 <main>
  bx lr
 8002706:	4770      	bx	lr
  ldr r3, =_sidata
 8002708:	08009260 	.word	0x08009260
  ldr r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002710:	200001e8 	.word	0x200001e8
  ldr r2, =_sbss
 8002714:	200001e8 	.word	0x200001e8
  ldr r3, = _ebss
 8002718:	20000808 	.word	0x20000808

0800271c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800271c:	e7fe      	b.n	800271c <ADC1_2_IRQHandler>
	...

08002720 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	; (8002748 <HAL_Init+0x28>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a07      	ldr	r2, [pc, #28]	; (8002748 <HAL_Init+0x28>)
 800272a:	f043 0310 	orr.w	r3, r3, #16
 800272e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f000 fb4f 	bl	8002dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002736:	2000      	movs	r0, #0
 8002738:	f000 f808 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800273c:	f7ff fe08 	bl	8002350 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40022000 	.word	0x40022000

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	; (80027a0 <HAL_InitTick+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_InitTick+0x58>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002762:	fbb3 f3f1 	udiv	r3, r3, r1
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fb67 	bl	8002e3e <HAL_SYSTICK_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00e      	b.n	8002798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80a      	bhi.n	8002796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f000 fb2f 	bl	8002dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278c:	4a06      	ldr	r2, [pc, #24]	; (80027a8 <HAL_InitTick+0x5c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000008 	.word	0x20000008
 80027a4:	20000010 	.word	0x20000010
 80027a8:	2000000c 	.word	0x2000000c

080027ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b0:	4b05      	ldr	r3, [pc, #20]	; (80027c8 <HAL_IncTick+0x1c>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b05      	ldr	r3, [pc, #20]	; (80027cc <HAL_IncTick+0x20>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	4a03      	ldr	r2, [pc, #12]	; (80027cc <HAL_IncTick+0x20>)
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bc80      	pop	{r7}
 80027c6:	4770      	bx	lr
 80027c8:	20000010 	.word	0x20000010
 80027cc:	20000800 	.word	0x20000800

080027d0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return uwTick;
 80027d4:	4b02      	ldr	r3, [pc, #8]	; (80027e0 <HAL_GetTick+0x10>)
 80027d6:	681b      	ldr	r3, [r3, #0]
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr
 80027e0:	20000800 	.word	0x20000800

080027e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027ec:	f7ff fff0 	bl	80027d0 <HAL_GetTick>
 80027f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fc:	d005      	beq.n	800280a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_Delay+0x40>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	461a      	mov	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800280a:	bf00      	nop
 800280c:	f7ff ffe0 	bl	80027d0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	429a      	cmp	r2, r3
 800281a:	d8f7      	bhi.n	800280c <HAL_Delay+0x28>
  {
  }
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20000010 	.word	0x20000010

08002828 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002830:	2300      	movs	r3, #0
 8002832:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e0be      	b.n	80029c8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	d109      	bne.n	800286c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fda4 	bl	80023b4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f9ab 	bl	8002bc8 <ADC_ConversionStop_Disable>
 8002872:	4603      	mov	r3, r0
 8002874:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	f003 0310 	and.w	r3, r3, #16
 800287e:	2b00      	cmp	r3, #0
 8002880:	f040 8099 	bne.w	80029b6 <HAL_ADC_Init+0x18e>
 8002884:	7dfb      	ldrb	r3, [r7, #23]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f040 8095 	bne.w	80029b6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002894:	f023 0302 	bic.w	r3, r3, #2
 8002898:	f043 0202 	orr.w	r2, r3, #2
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	7b1b      	ldrb	r3, [r3, #12]
 80028ae:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80028b0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028c0:	d003      	beq.n	80028ca <HAL_ADC_Init+0xa2>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d102      	bne.n	80028d0 <HAL_ADC_Init+0xa8>
 80028ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028ce:	e000      	b.n	80028d2 <HAL_ADC_Init+0xaa>
 80028d0:	2300      	movs	r3, #0
 80028d2:	693a      	ldr	r2, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7d1b      	ldrb	r3, [r3, #20]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d119      	bne.n	8002914 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7b1b      	ldrb	r3, [r3, #12]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	035a      	lsls	r2, r3, #13
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	e00b      	b.n	8002914 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	f043 0220 	orr.w	r2, r3, #32
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290c:	f043 0201 	orr.w	r2, r3, #1
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	430a      	orrs	r2, r1
 8002926:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	4b28      	ldr	r3, [pc, #160]	; (80029d0 <HAL_ADC_Init+0x1a8>)
 8002930:	4013      	ands	r3, r2
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	6812      	ldr	r2, [r2, #0]
 8002936:	68b9      	ldr	r1, [r7, #8]
 8002938:	430b      	orrs	r3, r1
 800293a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002944:	d003      	beq.n	800294e <HAL_ADC_Init+0x126>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d104      	bne.n	8002958 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	3b01      	subs	r3, #1
 8002954:	051b      	lsls	r3, r3, #20
 8002956:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	430a      	orrs	r2, r1
 800296a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	4b18      	ldr	r3, [pc, #96]	; (80029d4 <HAL_ADC_Init+0x1ac>)
 8002974:	4013      	ands	r3, r2
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	429a      	cmp	r2, r3
 800297a:	d10b      	bne.n	8002994 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2200      	movs	r2, #0
 8002980:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002986:	f023 0303 	bic.w	r3, r3, #3
 800298a:	f043 0201 	orr.w	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002992:	e018      	b.n	80029c6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	f023 0312 	bic.w	r3, r3, #18
 800299c:	f043 0210 	orr.w	r2, r3, #16
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80029b4:	e007      	b.n	80029c6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ba:	f043 0210 	orr.w	r2, r3, #16
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80029c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3718      	adds	r7, #24
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	ffe1f7fd 	.word	0xffe1f7fd
 80029d4:	ff1f0efe 	.word	0xff1f0efe

080029d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x20>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e0dc      	b.n	8002bb2 <HAL_ADC_ConfigChannel+0x1da>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b06      	cmp	r3, #6
 8002a06:	d81c      	bhi.n	8002a42 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685a      	ldr	r2, [r3, #4]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	3b05      	subs	r3, #5
 8002a1a:	221f      	movs	r2, #31
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	43db      	mvns	r3, r3
 8002a22:	4019      	ands	r1, r3
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	6818      	ldr	r0, [r3, #0]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	685a      	ldr	r2, [r3, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	3b05      	subs	r3, #5
 8002a34:	fa00 f203 	lsl.w	r2, r0, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	635a      	str	r2, [r3, #52]	; 0x34
 8002a40:	e03c      	b.n	8002abc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2b0c      	cmp	r3, #12
 8002a48:	d81c      	bhi.n	8002a84 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685a      	ldr	r2, [r3, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	3b23      	subs	r3, #35	; 0x23
 8002a5c:	221f      	movs	r2, #31
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	4019      	ands	r1, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	3b23      	subs	r3, #35	; 0x23
 8002a76:	fa00 f203 	lsl.w	r2, r0, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
 8002a82:	e01b      	b.n	8002abc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685a      	ldr	r2, [r3, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4413      	add	r3, r2
 8002a94:	3b41      	subs	r3, #65	; 0x41
 8002a96:	221f      	movs	r2, #31
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	4019      	ands	r1, r3
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4413      	add	r3, r2
 8002aae:	3b41      	subs	r3, #65	; 0x41
 8002ab0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b09      	cmp	r3, #9
 8002ac2:	d91c      	bls.n	8002afe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68d9      	ldr	r1, [r3, #12]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b1e      	subs	r3, #30
 8002ad6:	2207      	movs	r2, #7
 8002ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8002adc:	43db      	mvns	r3, r3
 8002ade:	4019      	ands	r1, r3
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	6898      	ldr	r0, [r3, #8]
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	4413      	add	r3, r2
 8002aee:	3b1e      	subs	r3, #30
 8002af0:	fa00 f203 	lsl.w	r2, r0, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	430a      	orrs	r2, r1
 8002afa:	60da      	str	r2, [r3, #12]
 8002afc:	e019      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6919      	ldr	r1, [r3, #16]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	2207      	movs	r2, #7
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	4019      	ands	r1, r3
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	6898      	ldr	r0, [r3, #8]
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4613      	mov	r3, r2
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	4413      	add	r3, r2
 8002b26:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2b10      	cmp	r3, #16
 8002b38:	d003      	beq.n	8002b42 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002b3e:	2b11      	cmp	r3, #17
 8002b40:	d132      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_ADC_ConfigChannel+0x1e4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d125      	bne.n	8002b98 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d126      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b68:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d11a      	bne.n	8002ba8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b72:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a13      	ldr	r2, [pc, #76]	; (8002bc4 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b78:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7c:	0c9a      	lsrs	r2, r3, #18
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	005b      	lsls	r3, r3, #1
 8002b86:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	3b01      	subs	r3, #1
 8002b8e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f9      	bne.n	8002b8a <HAL_ADC_ConfigChannel+0x1b2>
 8002b96:	e007      	b.n	8002ba8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	f043 0220 	orr.w	r2, r3, #32
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3714      	adds	r7, #20
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bc80      	pop	{r7}
 8002bba:	4770      	bx	lr
 8002bbc:	40012400 	.word	0x40012400
 8002bc0:	20000008 	.word	0x20000008
 8002bc4:	431bde83 	.word	0x431bde83

08002bc8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d127      	bne.n	8002c32 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f022 0201 	bic.w	r2, r2, #1
 8002bf0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bf2:	f7ff fded 	bl	80027d0 <HAL_GetTick>
 8002bf6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bf8:	e014      	b.n	8002c24 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bfa:	f7ff fde9 	bl	80027d0 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d90d      	bls.n	8002c24 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0c:	f043 0210 	orr.w	r2, r3, #16
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	f043 0201 	orr.w	r2, r3, #1
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e007      	b.n	8002c34 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d0e3      	beq.n	8002bfa <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c52:	68ba      	ldr	r2, [r7, #8]
 8002c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c58:	4013      	ands	r3, r2
 8002c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c6e:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <__NVIC_SetPriorityGrouping+0x44>)
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	60d3      	str	r3, [r2, #12]
}
 8002c74:	bf00      	nop
 8002c76:	3714      	adds	r7, #20
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bc80      	pop	{r7}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <__NVIC_GetPriorityGrouping+0x18>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	0a1b      	lsrs	r3, r3, #8
 8002c8e:	f003 0307 	and.w	r3, r3, #7
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	e000ed00 	.word	0xe000ed00

08002ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db0b      	blt.n	8002cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	f003 021f 	and.w	r2, r3, #31
 8002cb8:	4906      	ldr	r1, [pc, #24]	; (8002cd4 <__NVIC_EnableIRQ+0x34>)
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	095b      	lsrs	r3, r3, #5
 8002cc0:	2001      	movs	r0, #1
 8002cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cca:	bf00      	nop
 8002ccc:	370c      	adds	r7, #12
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	e000e100 	.word	0xe000e100

08002cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	4603      	mov	r3, r0
 8002ce0:	6039      	str	r1, [r7, #0]
 8002ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	db0a      	blt.n	8002d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	490c      	ldr	r1, [pc, #48]	; (8002d24 <__NVIC_SetPriority+0x4c>)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	0112      	lsls	r2, r2, #4
 8002cf8:	b2d2      	uxtb	r2, r2
 8002cfa:	440b      	add	r3, r1
 8002cfc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d00:	e00a      	b.n	8002d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	4908      	ldr	r1, [pc, #32]	; (8002d28 <__NVIC_SetPriority+0x50>)
 8002d08:	79fb      	ldrb	r3, [r7, #7]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	3b04      	subs	r3, #4
 8002d10:	0112      	lsls	r2, r2, #4
 8002d12:	b2d2      	uxtb	r2, r2
 8002d14:	440b      	add	r3, r1
 8002d16:	761a      	strb	r2, [r3, #24]
}
 8002d18:	bf00      	nop
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bc80      	pop	{r7}
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	e000e100 	.word	0xe000e100
 8002d28:	e000ed00 	.word	0xe000ed00

08002d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b089      	sub	sp, #36	; 0x24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f1c3 0307 	rsb	r3, r3, #7
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	bf28      	it	cs
 8002d4a:	2304      	movcs	r3, #4
 8002d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	3304      	adds	r3, #4
 8002d52:	2b06      	cmp	r3, #6
 8002d54:	d902      	bls.n	8002d5c <NVIC_EncodePriority+0x30>
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3b03      	subs	r3, #3
 8002d5a:	e000      	b.n	8002d5e <NVIC_EncodePriority+0x32>
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	f04f 32ff 	mov.w	r2, #4294967295
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	43da      	mvns	r2, r3
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	401a      	ands	r2, r3
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d74:	f04f 31ff 	mov.w	r1, #4294967295
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	43d9      	mvns	r1, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d84:	4313      	orrs	r3, r2
         );
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3724      	adds	r7, #36	; 0x24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr

08002d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da0:	d301      	bcc.n	8002da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00f      	b.n	8002dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da6:	4a0a      	ldr	r2, [pc, #40]	; (8002dd0 <SysTick_Config+0x40>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dae:	210f      	movs	r1, #15
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	f7ff ff90 	bl	8002cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <SysTick_Config+0x40>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <SysTick_Config+0x40>)
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	e000e010 	.word	0xe000e010

08002dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff2d 	bl	8002c3c <__NVIC_SetPriorityGrouping>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dfc:	f7ff ff42 	bl	8002c84 <__NVIC_GetPriorityGrouping>
 8002e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7ff ff90 	bl	8002d2c <NVIC_EncodePriority>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff5f 	bl	8002cd8 <__NVIC_SetPriority>
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff35 	bl	8002ca0 <__NVIC_EnableIRQ>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ffa2 	bl	8002d90 <SysTick_Config>
 8002e4c:	4603      	mov	r3, r0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b08b      	sub	sp, #44	; 0x2c
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e62:	2300      	movs	r3, #0
 8002e64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e66:	2300      	movs	r3, #0
 8002e68:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e6a:	e127      	b.n	80030bc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	69fb      	ldr	r3, [r7, #28]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	f040 8116 	bne.w	80030b6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b12      	cmp	r3, #18
 8002e90:	d034      	beq.n	8002efc <HAL_GPIO_Init+0xa4>
 8002e92:	2b12      	cmp	r3, #18
 8002e94:	d80d      	bhi.n	8002eb2 <HAL_GPIO_Init+0x5a>
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d02b      	beq.n	8002ef2 <HAL_GPIO_Init+0x9a>
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d804      	bhi.n	8002ea8 <HAL_GPIO_Init+0x50>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d031      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d01c      	beq.n	8002ee0 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ea6:	e048      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d043      	beq.n	8002f34 <HAL_GPIO_Init+0xdc>
 8002eac:	2b11      	cmp	r3, #17
 8002eae:	d01b      	beq.n	8002ee8 <HAL_GPIO_Init+0x90>
          break;
 8002eb0:	e043      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002eb2:	4a89      	ldr	r2, [pc, #548]	; (80030d8 <HAL_GPIO_Init+0x280>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d026      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
 8002eb8:	4a87      	ldr	r2, [pc, #540]	; (80030d8 <HAL_GPIO_Init+0x280>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d806      	bhi.n	8002ecc <HAL_GPIO_Init+0x74>
 8002ebe:	4a87      	ldr	r2, [pc, #540]	; (80030dc <HAL_GPIO_Init+0x284>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d020      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
 8002ec4:	4a86      	ldr	r2, [pc, #536]	; (80030e0 <HAL_GPIO_Init+0x288>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01d      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
          break;
 8002eca:	e036      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002ecc:	4a85      	ldr	r2, [pc, #532]	; (80030e4 <HAL_GPIO_Init+0x28c>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d019      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
 8002ed2:	4a85      	ldr	r2, [pc, #532]	; (80030e8 <HAL_GPIO_Init+0x290>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d016      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
 8002ed8:	4a84      	ldr	r2, [pc, #528]	; (80030ec <HAL_GPIO_Init+0x294>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_GPIO_Init+0xae>
          break;
 8002ede:	e02c      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	623b      	str	r3, [r7, #32]
          break;
 8002ee6:	e028      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	3304      	adds	r3, #4
 8002eee:	623b      	str	r3, [r7, #32]
          break;
 8002ef0:	e023      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	3308      	adds	r3, #8
 8002ef8:	623b      	str	r3, [r7, #32]
          break;
 8002efa:	e01e      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	330c      	adds	r3, #12
 8002f02:	623b      	str	r3, [r7, #32]
          break;
 8002f04:	e019      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f0e:	2304      	movs	r3, #4
 8002f10:	623b      	str	r3, [r7, #32]
          break;
 8002f12:	e012      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d105      	bne.n	8002f28 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	611a      	str	r2, [r3, #16]
          break;
 8002f26:	e008      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f28:	2308      	movs	r3, #8
 8002f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	615a      	str	r2, [r3, #20]
          break;
 8002f32:	e002      	b.n	8002f3a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f34:	2300      	movs	r3, #0
 8002f36:	623b      	str	r3, [r7, #32]
          break;
 8002f38:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2bff      	cmp	r3, #255	; 0xff
 8002f3e:	d801      	bhi.n	8002f44 <HAL_GPIO_Init+0xec>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	e001      	b.n	8002f48 <HAL_GPIO_Init+0xf0>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3304      	adds	r3, #4
 8002f48:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	2bff      	cmp	r3, #255	; 0xff
 8002f4e:	d802      	bhi.n	8002f56 <HAL_GPIO_Init+0xfe>
 8002f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	e002      	b.n	8002f5c <HAL_GPIO_Init+0x104>
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	3b08      	subs	r3, #8
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	210f      	movs	r1, #15
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	401a      	ands	r2, r3
 8002f6e:	6a39      	ldr	r1, [r7, #32]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	fa01 f303 	lsl.w	r3, r1, r3
 8002f76:	431a      	orrs	r2, r3
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 8096 	beq.w	80030b6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f8a:	4b59      	ldr	r3, [pc, #356]	; (80030f0 <HAL_GPIO_Init+0x298>)
 8002f8c:	699b      	ldr	r3, [r3, #24]
 8002f8e:	4a58      	ldr	r2, [pc, #352]	; (80030f0 <HAL_GPIO_Init+0x298>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6193      	str	r3, [r2, #24]
 8002f96:	4b56      	ldr	r3, [pc, #344]	; (80030f0 <HAL_GPIO_Init+0x298>)
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60bb      	str	r3, [r7, #8]
 8002fa0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fa2:	4a54      	ldr	r2, [pc, #336]	; (80030f4 <HAL_GPIO_Init+0x29c>)
 8002fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa6:	089b      	lsrs	r3, r3, #2
 8002fa8:	3302      	adds	r3, #2
 8002faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fae:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	f003 0303 	and.w	r3, r3, #3
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	220f      	movs	r2, #15
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a4b      	ldr	r2, [pc, #300]	; (80030f8 <HAL_GPIO_Init+0x2a0>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d013      	beq.n	8002ff6 <HAL_GPIO_Init+0x19e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4a      	ldr	r2, [pc, #296]	; (80030fc <HAL_GPIO_Init+0x2a4>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00d      	beq.n	8002ff2 <HAL_GPIO_Init+0x19a>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a49      	ldr	r2, [pc, #292]	; (8003100 <HAL_GPIO_Init+0x2a8>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <HAL_GPIO_Init+0x196>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a48      	ldr	r2, [pc, #288]	; (8003104 <HAL_GPIO_Init+0x2ac>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d101      	bne.n	8002fea <HAL_GPIO_Init+0x192>
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e006      	b.n	8002ff8 <HAL_GPIO_Init+0x1a0>
 8002fea:	2304      	movs	r3, #4
 8002fec:	e004      	b.n	8002ff8 <HAL_GPIO_Init+0x1a0>
 8002fee:	2302      	movs	r3, #2
 8002ff0:	e002      	b.n	8002ff8 <HAL_GPIO_Init+0x1a0>
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e000      	b.n	8002ff8 <HAL_GPIO_Init+0x1a0>
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	f002 0203 	and.w	r2, r2, #3
 8002ffe:	0092      	lsls	r2, r2, #2
 8003000:	4093      	lsls	r3, r2
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	4313      	orrs	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003008:	493a      	ldr	r1, [pc, #232]	; (80030f4 <HAL_GPIO_Init+0x29c>)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	089b      	lsrs	r3, r3, #2
 800300e:	3302      	adds	r3, #2
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d006      	beq.n	8003030 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003022:	4b39      	ldr	r3, [pc, #228]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	4938      	ldr	r1, [pc, #224]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
 800302e:	e006      	b.n	800303e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003030:	4b35      	ldr	r3, [pc, #212]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	43db      	mvns	r3, r3
 8003038:	4933      	ldr	r1, [pc, #204]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 800303a:	4013      	ands	r3, r2
 800303c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800304a:	4b2f      	ldr	r3, [pc, #188]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	492e      	ldr	r1, [pc, #184]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	604b      	str	r3, [r1, #4]
 8003056:	e006      	b.n	8003066 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003058:	4b2b      	ldr	r3, [pc, #172]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	43db      	mvns	r3, r3
 8003060:	4929      	ldr	r1, [pc, #164]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003062:	4013      	ands	r3, r2
 8003064:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003072:	4b25      	ldr	r3, [pc, #148]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	4924      	ldr	r1, [pc, #144]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	4313      	orrs	r3, r2
 800307c:	608b      	str	r3, [r1, #8]
 800307e:	e006      	b.n	800308e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003080:	4b21      	ldr	r3, [pc, #132]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	43db      	mvns	r3, r3
 8003088:	491f      	ldr	r1, [pc, #124]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 800308a:	4013      	ands	r3, r2
 800308c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d006      	beq.n	80030a8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800309a:	4b1b      	ldr	r3, [pc, #108]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	491a      	ldr	r1, [pc, #104]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60cb      	str	r3, [r1, #12]
 80030a6:	e006      	b.n	80030b6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030a8:	4b17      	ldr	r3, [pc, #92]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 80030aa:	68da      	ldr	r2, [r3, #12]
 80030ac:	69bb      	ldr	r3, [r7, #24]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	4915      	ldr	r1, [pc, #84]	; (8003108 <HAL_GPIO_Init+0x2b0>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	3301      	adds	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c2:	fa22 f303 	lsr.w	r3, r2, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f47f aed0 	bne.w	8002e6c <HAL_GPIO_Init+0x14>
  }
}
 80030cc:	bf00      	nop
 80030ce:	372c      	adds	r7, #44	; 0x2c
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	10210000 	.word	0x10210000
 80030dc:	10110000 	.word	0x10110000
 80030e0:	10120000 	.word	0x10120000
 80030e4:	10310000 	.word	0x10310000
 80030e8:	10320000 	.word	0x10320000
 80030ec:	10220000 	.word	0x10220000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40010800 	.word	0x40010800
 80030fc:	40010c00 	.word	0x40010c00
 8003100:	40011000 	.word	0x40011000
 8003104:	40011400 	.word	0x40011400
 8003108:	40010400 	.word	0x40010400

0800310c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689a      	ldr	r2, [r3, #8]
 800311c:	887b      	ldrh	r3, [r7, #2]
 800311e:	4013      	ands	r3, r2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d002      	beq.n	800312a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003124:	2301      	movs	r3, #1
 8003126:	73fb      	strb	r3, [r7, #15]
 8003128:	e001      	b.n	800312e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800312a:	2300      	movs	r3, #0
 800312c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800312e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003130:	4618      	mov	r0, r3
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	460b      	mov	r3, r1
 8003144:	807b      	strh	r3, [r7, #2]
 8003146:	4613      	mov	r3, r2
 8003148:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800314a:	787b      	ldrb	r3, [r7, #1]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d003      	beq.n	8003158 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003150:	887a      	ldrh	r2, [r7, #2]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003156:	e003      	b.n	8003160 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003158:	887b      	ldrh	r3, [r7, #2]
 800315a:	041a      	lsls	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	611a      	str	r2, [r3, #16]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	bc80      	pop	{r7}
 8003168:	4770      	bx	lr
	...

0800316c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	4603      	mov	r3, r0
 8003174:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003176:	4b08      	ldr	r3, [pc, #32]	; (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	88fb      	ldrh	r3, [r7, #6]
 800317c:	4013      	ands	r3, r2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d006      	beq.n	8003190 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003182:	4a05      	ldr	r2, [pc, #20]	; (8003198 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003188:	88fb      	ldrh	r3, [r7, #6]
 800318a:	4618      	mov	r0, r3
 800318c:	f7fe fb06 	bl	800179c <HAL_GPIO_EXTI_Callback>
  }
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40010400 	.word	0x40010400

0800319c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e10f      	b.n	80033ce <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff f932 	bl	800242c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2224      	movs	r2, #36	; 0x24
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031e0:	f001 ff36 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 80031e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4a7b      	ldr	r2, [pc, #492]	; (80033d8 <HAL_I2C_Init+0x23c>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d807      	bhi.n	8003200 <HAL_I2C_Init+0x64>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4a7a      	ldr	r2, [pc, #488]	; (80033dc <HAL_I2C_Init+0x240>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	bf94      	ite	ls
 80031f8:	2301      	movls	r3, #1
 80031fa:	2300      	movhi	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e006      	b.n	800320e <HAL_I2C_Init+0x72>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a77      	ldr	r2, [pc, #476]	; (80033e0 <HAL_I2C_Init+0x244>)
 8003204:	4293      	cmp	r3, r2
 8003206:	bf94      	ite	ls
 8003208:	2301      	movls	r3, #1
 800320a:	2300      	movhi	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0db      	b.n	80033ce <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4a72      	ldr	r2, [pc, #456]	; (80033e4 <HAL_I2C_Init+0x248>)
 800321a:	fba2 2303 	umull	r2, r3, r2, r3
 800321e:	0c9b      	lsrs	r3, r3, #18
 8003220:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	68ba      	ldr	r2, [r7, #8]
 8003232:	430a      	orrs	r2, r1
 8003234:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4a64      	ldr	r2, [pc, #400]	; (80033d8 <HAL_I2C_Init+0x23c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d802      	bhi.n	8003250 <HAL_I2C_Init+0xb4>
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3301      	adds	r3, #1
 800324e:	e009      	b.n	8003264 <HAL_I2C_Init+0xc8>
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	4a63      	ldr	r2, [pc, #396]	; (80033e8 <HAL_I2C_Init+0x24c>)
 800325c:	fba2 2303 	umull	r2, r3, r2, r3
 8003260:	099b      	lsrs	r3, r3, #6
 8003262:	3301      	adds	r3, #1
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	430b      	orrs	r3, r1
 800326a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003276:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4956      	ldr	r1, [pc, #344]	; (80033d8 <HAL_I2C_Init+0x23c>)
 8003280:	428b      	cmp	r3, r1
 8003282:	d80d      	bhi.n	80032a0 <HAL_I2C_Init+0x104>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1e59      	subs	r1, r3, #1
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003292:	3301      	adds	r3, #1
 8003294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003298:	2b04      	cmp	r3, #4
 800329a:	bf38      	it	cc
 800329c:	2304      	movcc	r3, #4
 800329e:	e04f      	b.n	8003340 <HAL_I2C_Init+0x1a4>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d111      	bne.n	80032cc <HAL_I2C_Init+0x130>
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	1e58      	subs	r0, r3, #1
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6859      	ldr	r1, [r3, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	440b      	add	r3, r1
 80032b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	bf0c      	ite	eq
 80032c4:	2301      	moveq	r3, #1
 80032c6:	2300      	movne	r3, #0
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	e012      	b.n	80032f2 <HAL_I2C_Init+0x156>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e58      	subs	r0, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	0099      	lsls	r1, r3, #2
 80032dc:	440b      	add	r3, r1
 80032de:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Init+0x15e>
 80032f6:	2301      	movs	r3, #1
 80032f8:	e022      	b.n	8003340 <HAL_I2C_Init+0x1a4>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10e      	bne.n	8003320 <HAL_I2C_Init+0x184>
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1e58      	subs	r0, r3, #1
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	460b      	mov	r3, r1
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	440b      	add	r3, r1
 8003310:	fbb0 f3f3 	udiv	r3, r0, r3
 8003314:	3301      	adds	r3, #1
 8003316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800331e:	e00f      	b.n	8003340 <HAL_I2C_Init+0x1a4>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	1e58      	subs	r0, r3, #1
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	440b      	add	r3, r1
 800332e:	0099      	lsls	r1, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	fbb0 f3f3 	udiv	r3, r0, r3
 8003336:	3301      	adds	r3, #1
 8003338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003340:	6879      	ldr	r1, [r7, #4]
 8003342:	6809      	ldr	r1, [r1, #0]
 8003344:	4313      	orrs	r3, r2
 8003346:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	69da      	ldr	r2, [r3, #28]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	431a      	orrs	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800336e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6911      	ldr	r1, [r2, #16]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68d2      	ldr	r2, [r2, #12]
 800337a:	4311      	orrs	r1, r2
 800337c:	687a      	ldr	r2, [r7, #4]
 800337e:	6812      	ldr	r2, [r2, #0]
 8003380:	430b      	orrs	r3, r1
 8003382:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	699b      	ldr	r3, [r3, #24]
 8003396:	431a      	orrs	r2, r3
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f042 0201 	orr.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2220      	movs	r2, #32
 80033ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	000186a0 	.word	0x000186a0
 80033dc:	001e847f 	.word	0x001e847f
 80033e0:	003d08ff 	.word	0x003d08ff
 80033e4:	431bde83 	.word	0x431bde83
 80033e8:	10624dd3 	.word	0x10624dd3

080033ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b088      	sub	sp, #32
 80033f0:	af02      	add	r7, sp, #8
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	461a      	mov	r2, r3
 80033f8:	460b      	mov	r3, r1
 80033fa:	817b      	strh	r3, [r7, #10]
 80033fc:	4613      	mov	r3, r2
 80033fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003400:	f7ff f9e6 	bl	80027d0 <HAL_GetTick>
 8003404:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800340c:	b2db      	uxtb	r3, r3
 800340e:	2b20      	cmp	r3, #32
 8003410:	f040 80e0 	bne.w	80035d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	9300      	str	r3, [sp, #0]
 8003418:	2319      	movs	r3, #25
 800341a:	2201      	movs	r2, #1
 800341c:	4970      	ldr	r1, [pc, #448]	; (80035e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800341e:	68f8      	ldr	r0, [r7, #12]
 8003420:	f001 f864 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
 800342c:	e0d3      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_I2C_Master_Transmit+0x50>
 8003438:	2302      	movs	r3, #2
 800343a:	e0cc      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0301 	and.w	r3, r3, #1
 800344e:	2b01      	cmp	r3, #1
 8003450:	d007      	beq.n	8003462 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f042 0201 	orr.w	r2, r2, #1
 8003460:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003470:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2221      	movs	r2, #33	; 0x21
 8003476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2210      	movs	r2, #16
 800347e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	893a      	ldrh	r2, [r7, #8]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003498:	b29a      	uxth	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a50      	ldr	r2, [pc, #320]	; (80035e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80034a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034a4:	8979      	ldrh	r1, [r7, #10]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	6a3a      	ldr	r2, [r7, #32]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fe22 	bl	80040f4 <I2C_MasterRequestWrite>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e08d      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034ba:	2300      	movs	r3, #0
 80034bc:	613b      	str	r3, [r7, #16]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	613b      	str	r3, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034d0:	e066      	b.n	80035a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	6a39      	ldr	r1, [r7, #32]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f001 f8de 	bl	8004698 <I2C_WaitOnTXEFlagUntilTimeout>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00d      	beq.n	80034fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d107      	bne.n	80034fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e06b      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	781a      	ldrb	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b04      	cmp	r3, #4
 800353a:	d11b      	bne.n	8003574 <HAL_I2C_Master_Transmit+0x188>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003540:	2b00      	cmp	r3, #0
 8003542:	d017      	beq.n	8003574 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3b01      	subs	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356c:	3b01      	subs	r3, #1
 800356e:	b29a      	uxth	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	6a39      	ldr	r1, [r7, #32]
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f001 f8ce 	bl	800471a <I2C_WaitOnBTFFlagUntilTimeout>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00d      	beq.n	80035a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003588:	2b04      	cmp	r3, #4
 800358a:	d107      	bne.n	800359c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e01a      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d194      	bne.n	80034d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e000      	b.n	80035d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	00100002 	.word	0x00100002
 80035e4:	ffff0000 	.word	0xffff0000

080035e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b08c      	sub	sp, #48	; 0x30
 80035ec:	af02      	add	r7, sp, #8
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607a      	str	r2, [r7, #4]
 80035f2:	461a      	mov	r2, r3
 80035f4:	460b      	mov	r3, r1
 80035f6:	817b      	strh	r3, [r7, #10]
 80035f8:	4613      	mov	r3, r2
 80035fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80035fc:	f7ff f8e8 	bl	80027d0 <HAL_GetTick>
 8003600:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003608:	b2db      	uxtb	r3, r3
 800360a:	2b20      	cmp	r3, #32
 800360c:	f040 8213 	bne.w	8003a36 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	9300      	str	r3, [sp, #0]
 8003614:	2319      	movs	r3, #25
 8003616:	2201      	movs	r2, #1
 8003618:	497e      	ldr	r1, [pc, #504]	; (8003814 <HAL_I2C_Master_Receive+0x22c>)
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 ff66 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003626:	2302      	movs	r3, #2
 8003628:	e206      	b.n	8003a38 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003630:	2b01      	cmp	r3, #1
 8003632:	d101      	bne.n	8003638 <HAL_I2C_Master_Receive+0x50>
 8003634:	2302      	movs	r3, #2
 8003636:	e1ff      	b.n	8003a38 <HAL_I2C_Master_Receive+0x450>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0301 	and.w	r3, r3, #1
 800364a:	2b01      	cmp	r3, #1
 800364c:	d007      	beq.n	800365e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f042 0201 	orr.w	r2, r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800366c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	2222      	movs	r2, #34	; 0x22
 8003672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2210      	movs	r2, #16
 800367a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	893a      	ldrh	r2, [r7, #8]
 800368e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003694:	b29a      	uxth	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a5e      	ldr	r2, [pc, #376]	; (8003818 <HAL_I2C_Master_Receive+0x230>)
 800369e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036a0:	8979      	ldrh	r1, [r7, #10]
 80036a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 fd9a 	bl	80041e0 <I2C_MasterRequestRead>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e1c0      	b.n	8003a38 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d113      	bne.n	80036e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036be:	2300      	movs	r3, #0
 80036c0:	623b      	str	r3, [r7, #32]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	623b      	str	r3, [r7, #32]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	623b      	str	r3, [r7, #32]
 80036d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e2:	601a      	str	r2, [r3, #0]
 80036e4:	e194      	b.n	8003a10 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d11d      	bne.n	800372a <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036fc:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036fe:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003700:	2300      	movs	r3, #0
 8003702:	61fb      	str	r3, [r7, #28]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	61fb      	str	r3, [r7, #28]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	61fb      	str	r3, [r7, #28]
 8003714:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003724:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003726:	b662      	cpsie	i
 8003728:	e172      	b.n	8003a10 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800372e:	2b02      	cmp	r3, #2
 8003730:	d11d      	bne.n	800376e <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003740:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003742:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003768:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800376a:	b662      	cpsie	i
 800376c:	e150      	b.n	8003a10 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800377c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800377e:	2300      	movs	r3, #0
 8003780:	617b      	str	r3, [r7, #20]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	617b      	str	r3, [r7, #20]
 8003792:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003794:	e13c      	b.n	8003a10 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800379a:	2b03      	cmp	r3, #3
 800379c:	f200 80f5 	bhi.w	800398a <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d123      	bne.n	80037f0 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037ac:	68f8      	ldr	r0, [r7, #12]
 80037ae:	f000 fff5 	bl	800479c <I2C_WaitOnRXNEFlagUntilTimeout>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e13d      	b.n	8003a38 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ee:	e10f      	b.n	8003a10 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d150      	bne.n	800389a <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037fe:	2200      	movs	r2, #0
 8003800:	4906      	ldr	r1, [pc, #24]	; (800381c <HAL_I2C_Master_Receive+0x234>)
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 fe72 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e112      	b.n	8003a38 <HAL_I2C_Master_Receive+0x450>
 8003812:	bf00      	nop
 8003814:	00100002 	.word	0x00100002
 8003818:	ffff0000 	.word	0xffff0000
 800381c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003820:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003830:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383c:	b2d2      	uxtb	r2, r2
 800383e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003844:	1c5a      	adds	r2, r3, #1
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003864:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	691a      	ldr	r2, [r3, #16]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003870:	b2d2      	uxtb	r2, r2
 8003872:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003882:	3b01      	subs	r3, #1
 8003884:	b29a      	uxth	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388e:	b29b      	uxth	r3, r3
 8003890:	3b01      	subs	r3, #1
 8003892:	b29a      	uxth	r2, r3
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003898:	e0ba      	b.n	8003a10 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800389a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389c:	9300      	str	r3, [sp, #0]
 800389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a0:	2200      	movs	r2, #0
 80038a2:	4967      	ldr	r1, [pc, #412]	; (8003a40 <HAL_I2C_Master_Receive+0x458>)
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fe21 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e0c1      	b.n	8003a38 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038c2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038c4:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	691a      	ldr	r2, [r3, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fe:	2200      	movs	r2, #0
 8003900:	494f      	ldr	r1, [pc, #316]	; (8003a40 <HAL_I2C_Master_Receive+0x458>)
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fdf2 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e092      	b.n	8003a38 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003920:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	691a      	ldr	r2, [r3, #16]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	b2d2      	uxtb	r2, r2
 800392e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	1c5a      	adds	r2, r3, #1
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800394a:	b29b      	uxth	r3, r3
 800394c:	3b01      	subs	r3, #1
 800394e:	b29a      	uxth	r2, r3
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003954:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	b2d2      	uxtb	r2, r2
 8003962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800397e:	b29b      	uxth	r3, r3
 8003980:	3b01      	subs	r3, #1
 8003982:	b29a      	uxth	r2, r3
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003988:	e042      	b.n	8003a10 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 ff04 	bl	800479c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e04c      	b.n	8003a38 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	691a      	ldr	r2, [r3, #16]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	f003 0304 	and.w	r3, r3, #4
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d118      	bne.n	8003a10 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	b2d2      	uxtb	r2, r2
 80039ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	1c5a      	adds	r2, r3, #1
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f47f aebe 	bne.w	8003796 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a32:	2300      	movs	r3, #0
 8003a34:	e000      	b.n	8003a38 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8003a36:	2302      	movs	r3, #2
  }
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3728      	adds	r7, #40	; 0x28
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	00010004 	.word	0x00010004

08003a44 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	; 0x30
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	4608      	mov	r0, r1
 8003a4e:	4611      	mov	r1, r2
 8003a50:	461a      	mov	r2, r3
 8003a52:	4603      	mov	r3, r0
 8003a54:	817b      	strh	r3, [r7, #10]
 8003a56:	460b      	mov	r3, r1
 8003a58:	813b      	strh	r3, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a5e:	f7fe feb7 	bl	80027d0 <HAL_GetTick>
 8003a62:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b20      	cmp	r3, #32
 8003a6e:	f040 8218 	bne.w	8003ea2 <HAL_I2C_Mem_Read+0x45e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	9300      	str	r3, [sp, #0]
 8003a76:	2319      	movs	r3, #25
 8003a78:	2201      	movs	r2, #1
 8003a7a:	4981      	ldr	r1, [pc, #516]	; (8003c80 <HAL_I2C_Mem_Read+0x23c>)
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 fd35 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e20b      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x460>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_I2C_Mem_Read+0x56>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e204      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x460>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0301 	and.w	r3, r3, #1
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d007      	beq.n	8003ac0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f042 0201 	orr.w	r2, r2, #1
 8003abe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ace:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2222      	movs	r2, #34	; 0x22
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2240      	movs	r2, #64	; 0x40
 8003adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4a61      	ldr	r2, [pc, #388]	; (8003c84 <HAL_I2C_Mem_Read+0x240>)
 8003b00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b02:	88f8      	ldrh	r0, [r7, #6]
 8003b04:	893a      	ldrh	r2, [r7, #8]
 8003b06:	8979      	ldrh	r1, [r7, #10]
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	9301      	str	r3, [sp, #4]
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	4603      	mov	r3, r0
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fc1a 	bl	800434c <I2C_RequestMemoryRead>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e1c0      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x460>
    }

    if (hi2c->XferSize == 0U)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d113      	bne.n	8003b52 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	623b      	str	r3, [r7, #32]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	e194      	b.n	8003e7c <HAL_I2C_Mem_Read+0x438>
    }
    else if (hi2c->XferSize == 1U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d11d      	bne.n	8003b96 <HAL_I2C_Mem_Read+0x152>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b68:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b6a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695b      	ldr	r3, [r3, #20]
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b90:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003b92:	b662      	cpsie	i
 8003b94:	e172      	b.n	8003e7c <HAL_I2C_Mem_Read+0x438>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	2b02      	cmp	r3, #2
 8003b9c:	d11d      	bne.n	8003bda <HAL_I2C_Mem_Read+0x196>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bae:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	695b      	ldr	r3, [r3, #20]
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	699b      	ldr	r3, [r3, #24]
 8003bc2:	61bb      	str	r3, [r7, #24]
 8003bc4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bd6:	b662      	cpsie	i
 8003bd8:	e150      	b.n	8003e7c <HAL_I2C_Mem_Read+0x438>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003be8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bea:	2300      	movs	r3, #0
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c00:	e13c      	b.n	8003e7c <HAL_I2C_Mem_Read+0x438>
    {
      if (hi2c->XferSize <= 3U)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c06:	2b03      	cmp	r3, #3
 8003c08:	f200 80f5 	bhi.w	8003df6 <HAL_I2C_Mem_Read+0x3b2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d123      	bne.n	8003c5c <HAL_I2C_Mem_Read+0x218>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f000 fdbf 	bl	800479c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d001      	beq.n	8003c28 <HAL_I2C_Mem_Read+0x1e4>
          {
            return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e13d      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691a      	ldr	r2, [r3, #16]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	1c5a      	adds	r2, r3, #1
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	3b01      	subs	r3, #1
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c5a:	e10f      	b.n	8003e7c <HAL_I2C_Mem_Read+0x438>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d150      	bne.n	8003d06 <HAL_I2C_Mem_Read+0x2c2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	9300      	str	r3, [sp, #0]
 8003c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	4906      	ldr	r1, [pc, #24]	; (8003c88 <HAL_I2C_Mem_Read+0x244>)
 8003c6e:	68f8      	ldr	r0, [r7, #12]
 8003c70:	f000 fc3c 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8003c74:	4603      	mov	r3, r0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d008      	beq.n	8003c8c <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e112      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x460>
 8003c7e:	bf00      	nop
 8003c80:	00100002 	.word	0x00100002
 8003c84:	ffff0000 	.word	0xffff0000
 8003c88:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003c8c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cd0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cdc:	b2d2      	uxtb	r2, r2
 8003cde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d04:	e0ba      	b.n	8003e7c <HAL_I2C_Mem_Read+0x438>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4967      	ldr	r1, [pc, #412]	; (8003eac <HAL_I2C_Mem_Read+0x468>)
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fbeb 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x2dc>
          {
            return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0c1      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d30:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	691a      	ldr	r2, [r3, #16]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d44:	1c5a      	adds	r2, r3, #1
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	9300      	str	r3, [sp, #0]
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	494f      	ldr	r1, [pc, #316]	; (8003eac <HAL_I2C_Mem_Read+0x468>)
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 fbbc 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d001      	beq.n	8003d7e <HAL_I2C_Mem_Read+0x33a>
          {
            return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e092      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x460>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d8c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	b2d2      	uxtb	r2, r2
 8003d9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003dc0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	691a      	ldr	r2, [r3, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	b2d2      	uxtb	r2, r2
 8003dce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd4:	1c5a      	adds	r2, r3, #1
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	3b01      	subs	r3, #1
 8003de0:	b29a      	uxth	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29a      	uxth	r2, r3
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003df4:	e042      	b.n	8003e7c <HAL_I2C_Mem_Read+0x438>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003df6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f000 fcce 	bl	800479c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d001      	beq.n	8003e0a <HAL_I2C_Mem_Read+0x3c6>
        {
          return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e04c      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x460>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	691a      	ldr	r2, [r3, #16]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1c:	1c5a      	adds	r2, r3, #1
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e26:	3b01      	subs	r3, #1
 8003e28:	b29a      	uxth	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e32:	b29b      	uxth	r3, r3
 8003e34:	3b01      	subs	r3, #1
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f003 0304 	and.w	r3, r3, #4
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d118      	bne.n	8003e7c <HAL_I2C_Mem_Read+0x438>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	691a      	ldr	r2, [r3, #16]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	b2d2      	uxtb	r2, r2
 8003e56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e66:	3b01      	subs	r3, #1
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	3b01      	subs	r3, #1
 8003e76:	b29a      	uxth	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f47f aebe 	bne.w	8003c02 <HAL_I2C_Mem_Read+0x1be>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2220      	movs	r2, #32
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e000      	b.n	8003ea4 <HAL_I2C_Mem_Read+0x460>
  }
  else
  {
    return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3728      	adds	r7, #40	; 0x28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	00010004 	.word	0x00010004

08003eb0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b08a      	sub	sp, #40	; 0x28
 8003eb4:	af02      	add	r7, sp, #8
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003ec0:	f7fe fc86 	bl	80027d0 <HAL_GetTick>
 8003ec4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b20      	cmp	r3, #32
 8003ed4:	f040 8105 	bne.w	80040e2 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	9300      	str	r3, [sp, #0]
 8003edc:	2319      	movs	r3, #25
 8003ede:	2201      	movs	r2, #1
 8003ee0:	4982      	ldr	r1, [pc, #520]	; (80040ec <HAL_I2C_IsDeviceReady+0x23c>)
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 fb02 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003eee:	2302      	movs	r3, #2
 8003ef0:	e0f8      	b.n	80040e4 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_I2C_IsDeviceReady+0x50>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e0f1      	b.n	80040e4 <HAL_I2C_IsDeviceReady+0x234>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b01      	cmp	r3, #1
 8003f14:	d007      	beq.n	8003f26 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2224      	movs	r2, #36	; 0x24
 8003f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2200      	movs	r2, #0
 8003f42:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a6a      	ldr	r2, [pc, #424]	; (80040f0 <HAL_I2C_IsDeviceReady+0x240>)
 8003f48:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f58:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fac0 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e0b6      	b.n	80040e4 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f76:	897b      	ldrh	r3, [r7, #10]
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f84:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003f86:	f7fe fc23 	bl	80027d0 <HAL_GetTick>
 8003f8a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	bf0c      	ite	eq
 8003f9a:	2301      	moveq	r3, #1
 8003f9c:	2300      	movne	r3, #0
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fb0:	bf0c      	ite	eq
 8003fb2:	2301      	moveq	r3, #1
 8003fb4:	2300      	movne	r3, #0
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003fba:	e025      	b.n	8004008 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003fbc:	f7fe fc08 	bl	80027d0 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d302      	bcc.n	8003fd2 <HAL_I2C_IsDeviceReady+0x122>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d103      	bne.n	8003fda <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	22a0      	movs	r2, #160	; 0xa0
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0302 	and.w	r3, r3, #2
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400e:	b2db      	uxtb	r3, r3
 8004010:	2ba0      	cmp	r3, #160	; 0xa0
 8004012:	d005      	beq.n	8004020 <HAL_I2C_IsDeviceReady+0x170>
 8004014:	7dfb      	ldrb	r3, [r7, #23]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <HAL_I2C_IsDeviceReady+0x170>
 800401a:	7dbb      	ldrb	r3, [r7, #22]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d0cd      	beq.n	8003fbc <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b02      	cmp	r3, #2
 8004034:	d129      	bne.n	800408a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681a      	ldr	r2, [r3, #0]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004044:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004046:	2300      	movs	r3, #0
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	2319      	movs	r3, #25
 8004062:	2201      	movs	r2, #1
 8004064:	4921      	ldr	r1, [pc, #132]	; (80040ec <HAL_I2C_IsDeviceReady+0x23c>)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fa40 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e036      	b.n	80040e4 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2220      	movs	r2, #32
 800407a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e02c      	b.n	80040e4 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004098:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040a2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	2319      	movs	r3, #25
 80040aa:	2201      	movs	r2, #1
 80040ac:	490f      	ldr	r1, [pc, #60]	; (80040ec <HAL_I2C_IsDeviceReady+0x23c>)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa1c 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e012      	b.n	80040e4 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80040be:	69bb      	ldr	r3, [r7, #24]
 80040c0:	3301      	adds	r3, #1
 80040c2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	f4ff af3e 	bcc.w	8003f4a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2220      	movs	r2, #32
 80040d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 80040e2:	2302      	movs	r3, #2
  }
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3720      	adds	r7, #32
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}
 80040ec:	00100002 	.word	0x00100002
 80040f0:	ffff0000 	.word	0xffff0000

080040f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	460b      	mov	r3, r1
 8004102:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d006      	beq.n	800411e <I2C_MasterRequestWrite+0x2a>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d003      	beq.n	800411e <I2C_MasterRequestWrite+0x2a>
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800411c:	d108      	bne.n	8004130 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e00b      	b.n	8004148 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	2b12      	cmp	r3, #18
 8004136:	d107      	bne.n	8004148 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004146:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f9c9 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e035      	b.n	80041d0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800416c:	d108      	bne.n	8004180 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800416e:	897b      	ldrh	r3, [r7, #10]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	461a      	mov	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800417c:	611a      	str	r2, [r3, #16]
 800417e:	e01b      	b.n	80041b8 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004180:	897b      	ldrh	r3, [r7, #10]
 8004182:	11db      	asrs	r3, r3, #7
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f003 0306 	and.w	r3, r3, #6
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f063 030f 	orn	r3, r3, #15
 8004190:	b2da      	uxtb	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	490e      	ldr	r1, [pc, #56]	; (80041d8 <I2C_MasterRequestWrite+0xe4>)
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f9fb 	bl	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e010      	b.n	80041d0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041ae:	897b      	ldrh	r3, [r7, #10]
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	4907      	ldr	r1, [pc, #28]	; (80041dc <I2C_MasterRequestWrite+0xe8>)
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f000 f9eb 	bl	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e000      	b.n	80041d0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80041ce:	2300      	movs	r3, #0
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3718      	adds	r7, #24
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	00010008 	.word	0x00010008
 80041dc:	00010002 	.word	0x00010002

080041e0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	607a      	str	r2, [r7, #4]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	460b      	mov	r3, r1
 80041ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004204:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b08      	cmp	r3, #8
 800420a:	d006      	beq.n	800421a <I2C_MasterRequestRead+0x3a>
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d003      	beq.n	800421a <I2C_MasterRequestRead+0x3a>
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004218:	d108      	bne.n	800422c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	e00b      	b.n	8004244 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	2b11      	cmp	r3, #17
 8004232:	d107      	bne.n	8004244 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004242:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f94b 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8004256:	4603      	mov	r3, r0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d001      	beq.n	8004260 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e06d      	b.n	800433c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004268:	d108      	bne.n	800427c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800426a:	897b      	ldrh	r3, [r7, #10]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	b2da      	uxtb	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	611a      	str	r2, [r3, #16]
 800427a:	e053      	b.n	8004324 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800427c:	897b      	ldrh	r3, [r7, #10]
 800427e:	11db      	asrs	r3, r3, #7
 8004280:	b2db      	uxtb	r3, r3
 8004282:	f003 0306 	and.w	r3, r3, #6
 8004286:	b2db      	uxtb	r3, r3
 8004288:	f063 030f 	orn	r3, r3, #15
 800428c:	b2da      	uxtb	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	492a      	ldr	r1, [pc, #168]	; (8004344 <I2C_MasterRequestRead+0x164>)
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 f97d 	bl	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e048      	b.n	800433c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042aa:	897b      	ldrh	r3, [r7, #10]
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	4923      	ldr	r1, [pc, #140]	; (8004348 <I2C_MasterRequestRead+0x168>)
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f96d 	bl	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e038      	b.n	800433c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042ca:	2300      	movs	r3, #0
 80042cc:	613b      	str	r3, [r7, #16]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	613b      	str	r3, [r7, #16]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	613b      	str	r3, [r7, #16]
 80042de:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f8f5 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e017      	b.n	800433c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800430c:	897b      	ldrh	r3, [r7, #10]
 800430e:	11db      	asrs	r3, r3, #7
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 0306 	and.w	r3, r3, #6
 8004316:	b2db      	uxtb	r3, r3
 8004318:	f063 030e 	orn	r3, r3, #14
 800431c:	b2da      	uxtb	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4907      	ldr	r1, [pc, #28]	; (8004348 <I2C_MasterRequestRead+0x168>)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f935 	bl	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3718      	adds	r7, #24
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	00010008 	.word	0x00010008
 8004348:	00010002 	.word	0x00010002

0800434c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b088      	sub	sp, #32
 8004350:	af02      	add	r7, sp, #8
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	4608      	mov	r0, r1
 8004356:	4611      	mov	r1, r2
 8004358:	461a      	mov	r2, r3
 800435a:	4603      	mov	r3, r0
 800435c:	817b      	strh	r3, [r7, #10]
 800435e:	460b      	mov	r3, r1
 8004360:	813b      	strh	r3, [r7, #8]
 8004362:	4613      	mov	r3, r2
 8004364:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004374:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004384:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	6a3b      	ldr	r3, [r7, #32]
 800438c:	2200      	movs	r2, #0
 800438e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f000 f8aa 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d001      	beq.n	80043a2 <I2C_RequestMemoryRead+0x56>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e09e      	b.n	80044e0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043a2:	897b      	ldrh	r3, [r7, #10]
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	461a      	mov	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	6a3a      	ldr	r2, [r7, #32]
 80043b6:	494c      	ldr	r1, [pc, #304]	; (80044e8 <I2C_RequestMemoryRead+0x19c>)
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 f8ee 	bl	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <I2C_RequestMemoryRead+0x7c>
  {
    return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e08b      	b.n	80044e0 <I2C_RequestMemoryRead+0x194>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	695b      	ldr	r3, [r3, #20]
 80043d2:	617b      	str	r3, [r7, #20]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e0:	6a39      	ldr	r1, [r7, #32]
 80043e2:	68f8      	ldr	r0, [r7, #12]
 80043e4:	f000 f958 	bl	8004698 <I2C_WaitOnTXEFlagUntilTimeout>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00d      	beq.n	800440a <I2C_RequestMemoryRead+0xbe>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	d107      	bne.n	8004406 <I2C_RequestMemoryRead+0xba>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004404:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e06a      	b.n	80044e0 <I2C_RequestMemoryRead+0x194>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800440a:	88fb      	ldrh	r3, [r7, #6]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d105      	bne.n	800441c <I2C_RequestMemoryRead+0xd0>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004410:	893b      	ldrh	r3, [r7, #8]
 8004412:	b2da      	uxtb	r2, r3
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	611a      	str	r2, [r3, #16]
 800441a:	e021      	b.n	8004460 <I2C_RequestMemoryRead+0x114>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800441c:	893b      	ldrh	r3, [r7, #8]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	b29b      	uxth	r3, r3
 8004422:	b2da      	uxtb	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800442a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442c:	6a39      	ldr	r1, [r7, #32]
 800442e:	68f8      	ldr	r0, [r7, #12]
 8004430:	f000 f932 	bl	8004698 <I2C_WaitOnTXEFlagUntilTimeout>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00d      	beq.n	8004456 <I2C_RequestMemoryRead+0x10a>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2b04      	cmp	r3, #4
 8004440:	d107      	bne.n	8004452 <I2C_RequestMemoryRead+0x106>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004450:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e044      	b.n	80044e0 <I2C_RequestMemoryRead+0x194>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004456:	893b      	ldrh	r3, [r7, #8]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004462:	6a39      	ldr	r1, [r7, #32]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f917 	bl	8004698 <I2C_WaitOnTXEFlagUntilTimeout>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00d      	beq.n	800448c <I2C_RequestMemoryRead+0x140>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	2b04      	cmp	r3, #4
 8004476:	d107      	bne.n	8004488 <I2C_RequestMemoryRead+0x13c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004486:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e029      	b.n	80044e0 <I2C_RequestMemoryRead+0x194>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800449a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	9300      	str	r3, [sp, #0]
 80044a0:	6a3b      	ldr	r3, [r7, #32]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f81f 	bl	80044ec <I2C_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <I2C_RequestMemoryRead+0x16c>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e013      	b.n	80044e0 <I2C_RequestMemoryRead+0x194>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044b8:	897b      	ldrh	r3, [r7, #10]
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	b2da      	uxtb	r2, r3
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ca:	6a3a      	ldr	r2, [r7, #32]
 80044cc:	4906      	ldr	r1, [pc, #24]	; (80044e8 <I2C_RequestMemoryRead+0x19c>)
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f000 f863 	bl	800459a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <I2C_RequestMemoryRead+0x192>
  {
    return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <I2C_RequestMemoryRead+0x194>
  }

  return HAL_OK;
 80044de:	2300      	movs	r3, #0
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}
 80044e8:	00010002 	.word	0x00010002

080044ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	60f8      	str	r0, [r7, #12]
 80044f4:	60b9      	str	r1, [r7, #8]
 80044f6:	603b      	str	r3, [r7, #0]
 80044f8:	4613      	mov	r3, r2
 80044fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044fc:	e025      	b.n	800454a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004504:	d021      	beq.n	800454a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004506:	f7fe f963 	bl	80027d0 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d302      	bcc.n	800451c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d116      	bne.n	800454a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004536:	f043 0220 	orr.w	r2, r3, #32
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e023      	b.n	8004592 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	0c1b      	lsrs	r3, r3, #16
 800454e:	b2db      	uxtb	r3, r3
 8004550:	2b01      	cmp	r3, #1
 8004552:	d10d      	bne.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	695b      	ldr	r3, [r3, #20]
 800455a:	43da      	mvns	r2, r3
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	4013      	ands	r3, r2
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	bf0c      	ite	eq
 8004566:	2301      	moveq	r3, #1
 8004568:	2300      	movne	r3, #0
 800456a:	b2db      	uxtb	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	e00c      	b.n	800458a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	43da      	mvns	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf0c      	ite	eq
 8004582:	2301      	moveq	r3, #1
 8004584:	2300      	movne	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	429a      	cmp	r2, r3
 800458e:	d0b6      	beq.n	80044fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	60f8      	str	r0, [r7, #12]
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	607a      	str	r2, [r7, #4]
 80045a6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045a8:	e051      	b.n	800464e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045b8:	d123      	bne.n	8004602 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045c8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045d2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2220      	movs	r2, #32
 80045de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	f043 0204 	orr.w	r2, r3, #4
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e046      	b.n	8004690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d021      	beq.n	800464e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800460a:	f7fe f8e1 	bl	80027d0 <HAL_GetTick>
 800460e:	4602      	mov	r2, r0
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	1ad3      	subs	r3, r2, r3
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	429a      	cmp	r2, r3
 8004618:	d302      	bcc.n	8004620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d116      	bne.n	800464e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f043 0220 	orr.w	r2, r3, #32
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e020      	b.n	8004690 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	d10c      	bne.n	8004672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	43da      	mvns	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	4013      	ands	r3, r2
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	bf14      	ite	ne
 800466a:	2301      	movne	r3, #1
 800466c:	2300      	moveq	r3, #0
 800466e:	b2db      	uxtb	r3, r3
 8004670:	e00b      	b.n	800468a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	699b      	ldr	r3, [r3, #24]
 8004678:	43da      	mvns	r2, r3
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	4013      	ands	r3, r2
 800467e:	b29b      	uxth	r3, r3
 8004680:	2b00      	cmp	r3, #0
 8004682:	bf14      	ite	ne
 8004684:	2301      	movne	r3, #1
 8004686:	2300      	moveq	r3, #0
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d18d      	bne.n	80045aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}

08004698 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046a4:	e02d      	b.n	8004702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046a6:	68f8      	ldr	r0, [r7, #12]
 80046a8:	f000 f8ce 	bl	8004848 <I2C_IsAcknowledgeFailed>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d001      	beq.n	80046b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e02d      	b.n	8004712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d021      	beq.n	8004702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fe f887 	bl	80027d0 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d116      	bne.n	8004702 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2200      	movs	r2, #0
 80046d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e007      	b.n	8004712 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800470c:	2b80      	cmp	r3, #128	; 0x80
 800470e:	d1ca      	bne.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004710:	2300      	movs	r3, #0
}
 8004712:	4618      	mov	r0, r3
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}

0800471a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800471a:	b580      	push	{r7, lr}
 800471c:	b084      	sub	sp, #16
 800471e:	af00      	add	r7, sp, #0
 8004720:	60f8      	str	r0, [r7, #12]
 8004722:	60b9      	str	r1, [r7, #8]
 8004724:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004726:	e02d      	b.n	8004784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 f88d 	bl	8004848 <I2C_IsAcknowledgeFailed>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e02d      	b.n	8004794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473e:	d021      	beq.n	8004784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004740:	f7fe f846 	bl	80027d0 <HAL_GetTick>
 8004744:	4602      	mov	r2, r0
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	68ba      	ldr	r2, [r7, #8]
 800474c:	429a      	cmp	r2, r3
 800474e:	d302      	bcc.n	8004756 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d116      	bne.n	8004784 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	2200      	movs	r2, #0
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2220      	movs	r2, #32
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004770:	f043 0220 	orr.w	r2, r3, #32
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e007      	b.n	8004794 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b04      	cmp	r3, #4
 8004790:	d1ca      	bne.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	3710      	adds	r7, #16
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047a8:	e042      	b.n	8004830 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	695b      	ldr	r3, [r3, #20]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b10      	cmp	r3, #16
 80047b6:	d119      	bne.n	80047ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0210 	mvn.w	r2, #16
 80047c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e029      	b.n	8004840 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ec:	f7fd fff0 	bl	80027d0 <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	1ad3      	subs	r3, r2, r3
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d302      	bcc.n	8004802 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d116      	bne.n	8004830 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2220      	movs	r2, #32
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481c:	f043 0220 	orr.w	r2, r3, #32
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2200      	movs	r2, #0
 8004828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e007      	b.n	8004840 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800483a:	2b40      	cmp	r3, #64	; 0x40
 800483c:	d1b5      	bne.n	80047aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004848:	b480      	push	{r7}
 800484a:	b083      	sub	sp, #12
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485e:	d11b      	bne.n	8004898 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004868:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004884:	f043 0204 	orr.w	r2, r3, #4
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004898:	2300      	movs	r3, #0
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	bc80      	pop	{r7}
 80048a2:	4770      	bx	lr

080048a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e26c      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0301 	and.w	r3, r3, #1
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8087 	beq.w	80049d2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80048c4:	4b92      	ldr	r3, [pc, #584]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b04      	cmp	r3, #4
 80048ce:	d00c      	beq.n	80048ea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80048d0:	4b8f      	ldr	r3, [pc, #572]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f003 030c 	and.w	r3, r3, #12
 80048d8:	2b08      	cmp	r3, #8
 80048da:	d112      	bne.n	8004902 <HAL_RCC_OscConfig+0x5e>
 80048dc:	4b8c      	ldr	r3, [pc, #560]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e8:	d10b      	bne.n	8004902 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ea:	4b89      	ldr	r3, [pc, #548]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d06c      	beq.n	80049d0 <HAL_RCC_OscConfig+0x12c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d168      	bne.n	80049d0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e246      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490a:	d106      	bne.n	800491a <HAL_RCC_OscConfig+0x76>
 800490c:	4b80      	ldr	r3, [pc, #512]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a7f      	ldr	r2, [pc, #508]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004912:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004916:	6013      	str	r3, [r2, #0]
 8004918:	e02e      	b.n	8004978 <HAL_RCC_OscConfig+0xd4>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d10c      	bne.n	800493c <HAL_RCC_OscConfig+0x98>
 8004922:	4b7b      	ldr	r3, [pc, #492]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a7a      	ldr	r2, [pc, #488]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492c:	6013      	str	r3, [r2, #0]
 800492e:	4b78      	ldr	r3, [pc, #480]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a77      	ldr	r2, [pc, #476]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004934:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e01d      	b.n	8004978 <HAL_RCC_OscConfig+0xd4>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0xbc>
 8004946:	4b72      	ldr	r3, [pc, #456]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a71      	ldr	r2, [pc, #452]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 800494c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b6f      	ldr	r3, [pc, #444]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a6e      	ldr	r2, [pc, #440]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e00b      	b.n	8004978 <HAL_RCC_OscConfig+0xd4>
 8004960:	4b6b      	ldr	r3, [pc, #428]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a6a      	ldr	r2, [pc, #424]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	4b68      	ldr	r3, [pc, #416]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a67      	ldr	r2, [pc, #412]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004972:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004976:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d013      	beq.n	80049a8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fd ff26 	bl	80027d0 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004988:	f7fd ff22 	bl	80027d0 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e1fa      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	4b5d      	ldr	r3, [pc, #372]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0xe4>
 80049a6:	e014      	b.n	80049d2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fd ff12 	bl	80027d0 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b0:	f7fd ff0e 	bl	80027d0 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	; 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e1e6      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c2:	4b53      	ldr	r3, [pc, #332]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0x10c>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d063      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049de:	4b4c      	ldr	r3, [pc, #304]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80049ea:	4b49      	ldr	r3, [pc, #292]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d11c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x18c>
 80049f6:	4b46      	ldr	r3, [pc, #280]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d116      	bne.n	8004a30 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	4b43      	ldr	r3, [pc, #268]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_RCC_OscConfig+0x176>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d001      	beq.n	8004a1a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e1ba      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1a:	4b3d      	ldr	r3, [pc, #244]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4939      	ldr	r1, [pc, #228]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2e:	e03a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d020      	beq.n	8004a7a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a38:	4b36      	ldr	r3, [pc, #216]	; (8004b14 <HAL_RCC_OscConfig+0x270>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fec7 	bl	80027d0 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a46:	f7fd fec3 	bl	80027d0 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e19b      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a58:	4b2d      	ldr	r3, [pc, #180]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a64:	4b2a      	ldr	r3, [pc, #168]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4927      	ldr	r1, [pc, #156]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]
 8004a78:	e015      	b.n	8004aa6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7a:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <HAL_RCC_OscConfig+0x270>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a80:	f7fd fea6 	bl	80027d0 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a88:	f7fd fea2 	bl	80027d0 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e17a      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9a:	4b1d      	ldr	r3, [pc, #116]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d03a      	beq.n	8004b28 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d019      	beq.n	8004aee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aba:	4b17      	ldr	r3, [pc, #92]	; (8004b18 <HAL_RCC_OscConfig+0x274>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac0:	f7fd fe86 	bl	80027d0 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac8:	f7fd fe82 	bl	80027d0 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e15a      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <HAL_RCC_OscConfig+0x26c>)
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004ae6:	2001      	movs	r0, #1
 8004ae8:	f000 fada 	bl	80050a0 <RCC_Delay>
 8004aec:	e01c      	b.n	8004b28 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004aee:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <HAL_RCC_OscConfig+0x274>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004af4:	f7fd fe6c 	bl	80027d0 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004afa:	e00f      	b.n	8004b1c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fd fe68 	bl	80027d0 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d908      	bls.n	8004b1c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e140      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
 8004b0e:	bf00      	nop
 8004b10:	40021000 	.word	0x40021000
 8004b14:	42420000 	.word	0x42420000
 8004b18:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b1c:	4b9e      	ldr	r3, [pc, #632]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1e9      	bne.n	8004afc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 80a6 	beq.w	8004c82 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b36:	2300      	movs	r3, #0
 8004b38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3a:	4b97      	ldr	r3, [pc, #604]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10d      	bne.n	8004b62 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b46:	4b94      	ldr	r3, [pc, #592]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	4a93      	ldr	r2, [pc, #588]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004b4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b50:	61d3      	str	r3, [r2, #28]
 8004b52:	4b91      	ldr	r3, [pc, #580]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	60bb      	str	r3, [r7, #8]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b62:	4b8e      	ldr	r3, [pc, #568]	; (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d118      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6e:	4b8b      	ldr	r3, [pc, #556]	; (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a8a      	ldr	r2, [pc, #552]	; (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b7a:	f7fd fe29 	bl	80027d0 <HAL_GetTick>
 8004b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b80:	e008      	b.n	8004b94 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b82:	f7fd fe25 	bl	80027d0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b64      	cmp	r3, #100	; 0x64
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e0fd      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b94:	4b81      	ldr	r3, [pc, #516]	; (8004d9c <HAL_RCC_OscConfig+0x4f8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d0f0      	beq.n	8004b82 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d106      	bne.n	8004bb6 <HAL_RCC_OscConfig+0x312>
 8004ba8:	4b7b      	ldr	r3, [pc, #492]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004baa:	6a1b      	ldr	r3, [r3, #32]
 8004bac:	4a7a      	ldr	r2, [pc, #488]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004bae:	f043 0301 	orr.w	r3, r3, #1
 8004bb2:	6213      	str	r3, [r2, #32]
 8004bb4:	e02d      	b.n	8004c12 <HAL_RCC_OscConfig+0x36e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d10c      	bne.n	8004bd8 <HAL_RCC_OscConfig+0x334>
 8004bbe:	4b76      	ldr	r3, [pc, #472]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004bc0:	6a1b      	ldr	r3, [r3, #32]
 8004bc2:	4a75      	ldr	r2, [pc, #468]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	6213      	str	r3, [r2, #32]
 8004bca:	4b73      	ldr	r3, [pc, #460]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	4a72      	ldr	r2, [pc, #456]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004bd0:	f023 0304 	bic.w	r3, r3, #4
 8004bd4:	6213      	str	r3, [r2, #32]
 8004bd6:	e01c      	b.n	8004c12 <HAL_RCC_OscConfig+0x36e>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	2b05      	cmp	r3, #5
 8004bde:	d10c      	bne.n	8004bfa <HAL_RCC_OscConfig+0x356>
 8004be0:	4b6d      	ldr	r3, [pc, #436]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004be2:	6a1b      	ldr	r3, [r3, #32]
 8004be4:	4a6c      	ldr	r2, [pc, #432]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004be6:	f043 0304 	orr.w	r3, r3, #4
 8004bea:	6213      	str	r3, [r2, #32]
 8004bec:	4b6a      	ldr	r3, [pc, #424]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	4a69      	ldr	r2, [pc, #420]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004bf2:	f043 0301 	orr.w	r3, r3, #1
 8004bf6:	6213      	str	r3, [r2, #32]
 8004bf8:	e00b      	b.n	8004c12 <HAL_RCC_OscConfig+0x36e>
 8004bfa:	4b67      	ldr	r3, [pc, #412]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004bfc:	6a1b      	ldr	r3, [r3, #32]
 8004bfe:	4a66      	ldr	r2, [pc, #408]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004c00:	f023 0301 	bic.w	r3, r3, #1
 8004c04:	6213      	str	r3, [r2, #32]
 8004c06:	4b64      	ldr	r3, [pc, #400]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004c08:	6a1b      	ldr	r3, [r3, #32]
 8004c0a:	4a63      	ldr	r2, [pc, #396]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004c0c:	f023 0304 	bic.w	r3, r3, #4
 8004c10:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d015      	beq.n	8004c46 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c1a:	f7fd fdd9 	bl	80027d0 <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c20:	e00a      	b.n	8004c38 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c22:	f7fd fdd5 	bl	80027d0 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d901      	bls.n	8004c38 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004c34:	2303      	movs	r3, #3
 8004c36:	e0ab      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c38:	4b57      	ldr	r3, [pc, #348]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004c3a:	6a1b      	ldr	r3, [r3, #32]
 8004c3c:	f003 0302 	and.w	r3, r3, #2
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d0ee      	beq.n	8004c22 <HAL_RCC_OscConfig+0x37e>
 8004c44:	e014      	b.n	8004c70 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c46:	f7fd fdc3 	bl	80027d0 <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c4c:	e00a      	b.n	8004c64 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4e:	f7fd fdbf 	bl	80027d0 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e095      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c64:	4b4c      	ldr	r3, [pc, #304]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	f003 0302 	and.w	r3, r3, #2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1ee      	bne.n	8004c4e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004c70:	7dfb      	ldrb	r3, [r7, #23]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d105      	bne.n	8004c82 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c76:	4b48      	ldr	r3, [pc, #288]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	4a47      	ldr	r2, [pc, #284]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004c7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c80:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	69db      	ldr	r3, [r3, #28]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	f000 8081 	beq.w	8004d8e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c8c:	4b42      	ldr	r3, [pc, #264]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f003 030c 	and.w	r3, r3, #12
 8004c94:	2b08      	cmp	r3, #8
 8004c96:	d061      	beq.n	8004d5c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d146      	bne.n	8004d2e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca0:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_RCC_OscConfig+0x4fc>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fd fd93 	bl	80027d0 <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cac:	e008      	b.n	8004cc0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cae:	f7fd fd8f 	bl	80027d0 <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	2b02      	cmp	r3, #2
 8004cba:	d901      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	e067      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004cc0:	4b35      	ldr	r3, [pc, #212]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f0      	bne.n	8004cae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6a1b      	ldr	r3, [r3, #32]
 8004cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd4:	d108      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004cd6:	4b30      	ldr	r3, [pc, #192]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	492d      	ldr	r1, [pc, #180]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a19      	ldr	r1, [r3, #32]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	4927      	ldr	r1, [pc, #156]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d00:	4b27      	ldr	r3, [pc, #156]	; (8004da0 <HAL_RCC_OscConfig+0x4fc>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d06:	f7fd fd63 	bl	80027d0 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d0c:	e008      	b.n	8004d20 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0e:	f7fd fd5f 	bl	80027d0 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e037      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004d20:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <HAL_RCC_OscConfig+0x46a>
 8004d2c:	e02f      	b.n	8004d8e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d2e:	4b1c      	ldr	r3, [pc, #112]	; (8004da0 <HAL_RCC_OscConfig+0x4fc>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d34:	f7fd fd4c 	bl	80027d0 <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d3a:	e008      	b.n	8004d4e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d3c:	f7fd fd48 	bl	80027d0 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e020      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004d4e:	4b12      	ldr	r3, [pc, #72]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d1f0      	bne.n	8004d3c <HAL_RCC_OscConfig+0x498>
 8004d5a:	e018      	b.n	8004d8e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e013      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d68:	4b0b      	ldr	r3, [pc, #44]	; (8004d98 <HAL_RCC_OscConfig+0x4f4>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6a1b      	ldr	r3, [r3, #32]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d106      	bne.n	8004d8a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d001      	beq.n	8004d8e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e000      	b.n	8004d90 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3718      	adds	r7, #24
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40007000 	.word	0x40007000
 8004da0:	42420060 	.word	0x42420060

08004da4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e0d0      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004db8:	4b6a      	ldr	r3, [pc, #424]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	683a      	ldr	r2, [r7, #0]
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d910      	bls.n	8004de8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc6:	4b67      	ldr	r3, [pc, #412]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 0207 	bic.w	r2, r3, #7
 8004dce:	4965      	ldr	r1, [pc, #404]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dd6:	4b63      	ldr	r3, [pc, #396]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0307 	and.w	r3, r3, #7
 8004dde:	683a      	ldr	r2, [r7, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d001      	beq.n	8004de8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0b8      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d020      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e00:	4b59      	ldr	r3, [pc, #356]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	4a58      	ldr	r2, [pc, #352]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e06:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004e0a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0308 	and.w	r3, r3, #8
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e18:	4b53      	ldr	r3, [pc, #332]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	4a52      	ldr	r2, [pc, #328]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e1e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004e22:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e24:	4b50      	ldr	r3, [pc, #320]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	494d      	ldr	r1, [pc, #308]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d040      	beq.n	8004ec4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4a:	4b47      	ldr	r3, [pc, #284]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d115      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e07f      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d107      	bne.n	8004e72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e62:	4b41      	ldr	r3, [pc, #260]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e073      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e72:	4b3d      	ldr	r3, [pc, #244]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e06b      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e82:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	f023 0203 	bic.w	r2, r3, #3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4936      	ldr	r1, [pc, #216]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e94:	f7fd fc9c 	bl	80027d0 <HAL_GetTick>
 8004e98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	e00a      	b.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e9c:	f7fd fc98 	bl	80027d0 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e053      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eb2:	4b2d      	ldr	r3, [pc, #180]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f003 020c 	and.w	r2, r3, #12
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d1eb      	bne.n	8004e9c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec4:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d210      	bcs.n	8004ef4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ed2:	4b24      	ldr	r3, [pc, #144]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f023 0207 	bic.w	r2, r3, #7
 8004eda:	4922      	ldr	r1, [pc, #136]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee2:	4b20      	ldr	r3, [pc, #128]	; (8004f64 <HAL_RCC_ClockConfig+0x1c0>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0307 	and.w	r3, r3, #7
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e032      	b.n	8004f5a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d008      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f00:	4b19      	ldr	r3, [pc, #100]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	4916      	ldr	r1, [pc, #88]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f003 0308 	and.w	r3, r3, #8
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f1e:	4b12      	ldr	r3, [pc, #72]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	490e      	ldr	r1, [pc, #56]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f32:	f000 f821 	bl	8004f78 <HAL_RCC_GetSysClockFreq>
 8004f36:	4601      	mov	r1, r0
 8004f38:	4b0b      	ldr	r3, [pc, #44]	; (8004f68 <HAL_RCC_ClockConfig+0x1c4>)
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	091b      	lsrs	r3, r3, #4
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	4a0a      	ldr	r2, [pc, #40]	; (8004f6c <HAL_RCC_ClockConfig+0x1c8>)
 8004f44:	5cd3      	ldrb	r3, [r2, r3]
 8004f46:	fa21 f303 	lsr.w	r3, r1, r3
 8004f4a:	4a09      	ldr	r2, [pc, #36]	; (8004f70 <HAL_RCC_ClockConfig+0x1cc>)
 8004f4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f4e:	4b09      	ldr	r3, [pc, #36]	; (8004f74 <HAL_RCC_ClockConfig+0x1d0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4618      	mov	r0, r3
 8004f54:	f7fd fbfa 	bl	800274c <HAL_InitTick>

  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3710      	adds	r7, #16
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40022000 	.word	0x40022000
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	08008fb8 	.word	0x08008fb8
 8004f70:	20000008 	.word	0x20000008
 8004f74:	2000000c 	.word	0x2000000c

08004f78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f78:	b490      	push	{r4, r7}
 8004f7a:	b08a      	sub	sp, #40	; 0x28
 8004f7c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004f7e:	4b2a      	ldr	r3, [pc, #168]	; (8005028 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f80:	1d3c      	adds	r4, r7, #4
 8004f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004f88:	4b28      	ldr	r3, [pc, #160]	; (800502c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f8a:	881b      	ldrh	r3, [r3, #0]
 8004f8c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	2300      	movs	r3, #0
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	2300      	movs	r3, #0
 8004f98:	627b      	str	r3, [r7, #36]	; 0x24
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004fa2:	4b23      	ldr	r3, [pc, #140]	; (8005030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	f003 030c 	and.w	r3, r3, #12
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d002      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fb2:	2b08      	cmp	r3, #8
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCC_GetSysClockFreq+0x46>
 8004fb6:	e02d      	b.n	8005014 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004fb8:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004fba:	623b      	str	r3, [r7, #32]
      break;
 8004fbc:	e02d      	b.n	800501a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	0c9b      	lsrs	r3, r3, #18
 8004fc2:	f003 030f 	and.w	r3, r3, #15
 8004fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fca:	4413      	add	r3, r2
 8004fcc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004fd0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d013      	beq.n	8005004 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004fdc:	4b14      	ldr	r3, [pc, #80]	; (8005030 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	0c5b      	lsrs	r3, r3, #17
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004fea:	4413      	add	r3, r2
 8004fec:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004ff0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	4a0f      	ldr	r2, [pc, #60]	; (8005034 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004ff6:	fb02 f203 	mul.w	r2, r2, r3
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005000:	627b      	str	r3, [r7, #36]	; 0x24
 8005002:	e004      	b.n	800500e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	4a0c      	ldr	r2, [pc, #48]	; (8005038 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005008:	fb02 f303 	mul.w	r3, r2, r3
 800500c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	623b      	str	r3, [r7, #32]
      break;
 8005012:	e002      	b.n	800501a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005014:	4b07      	ldr	r3, [pc, #28]	; (8005034 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005016:	623b      	str	r3, [r7, #32]
      break;
 8005018:	bf00      	nop
    }
  }
  return sysclockfreq;
 800501a:	6a3b      	ldr	r3, [r7, #32]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3728      	adds	r7, #40	; 0x28
 8005020:	46bd      	mov	sp, r7
 8005022:	bc90      	pop	{r4, r7}
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	08008838 	.word	0x08008838
 800502c:	08008848 	.word	0x08008848
 8005030:	40021000 	.word	0x40021000
 8005034:	007a1200 	.word	0x007a1200
 8005038:	003d0900 	.word	0x003d0900

0800503c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800503c:	b480      	push	{r7}
 800503e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005040:	4b02      	ldr	r3, [pc, #8]	; (800504c <HAL_RCC_GetHCLKFreq+0x10>)
 8005042:	681b      	ldr	r3, [r3, #0]
}
 8005044:	4618      	mov	r0, r3
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr
 800504c:	20000008 	.word	0x20000008

08005050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005054:	f7ff fff2 	bl	800503c <HAL_RCC_GetHCLKFreq>
 8005058:	4601      	mov	r1, r0
 800505a:	4b05      	ldr	r3, [pc, #20]	; (8005070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	4a03      	ldr	r2, [pc, #12]	; (8005074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005066:	5cd3      	ldrb	r3, [r2, r3]
 8005068:	fa21 f303 	lsr.w	r3, r1, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40021000 	.word	0x40021000
 8005074:	08008fc8 	.word	0x08008fc8

08005078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800507c:	f7ff ffde 	bl	800503c <HAL_RCC_GetHCLKFreq>
 8005080:	4601      	mov	r1, r0
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	0adb      	lsrs	r3, r3, #11
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	4a03      	ldr	r2, [pc, #12]	; (800509c <HAL_RCC_GetPCLK2Freq+0x24>)
 800508e:	5cd3      	ldrb	r3, [r2, r3]
 8005090:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40021000 	.word	0x40021000
 800509c:	08008fc8 	.word	0x08008fc8

080050a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80050a8:	4b0a      	ldr	r3, [pc, #40]	; (80050d4 <RCC_Delay+0x34>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a0a      	ldr	r2, [pc, #40]	; (80050d8 <RCC_Delay+0x38>)
 80050ae:	fba2 2303 	umull	r2, r3, r2, r3
 80050b2:	0a5b      	lsrs	r3, r3, #9
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	fb02 f303 	mul.w	r3, r2, r3
 80050ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80050bc:	bf00      	nop
  }
  while (Delay --);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	1e5a      	subs	r2, r3, #1
 80050c2:	60fa      	str	r2, [r7, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1f9      	bne.n	80050bc <RCC_Delay+0x1c>
}
 80050c8:	bf00      	nop
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	20000008 	.word	0x20000008
 80050d8:	10624dd3 	.word	0x10624dd3

080050dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]
 80050e8:	2300      	movs	r3, #0
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d07d      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80050f8:	2300      	movs	r3, #0
 80050fa:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050fc:	4b4f      	ldr	r3, [pc, #316]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10d      	bne.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005108:	4b4c      	ldr	r3, [pc, #304]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	4a4b      	ldr	r2, [pc, #300]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800510e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005112:	61d3      	str	r3, [r2, #28]
 8005114:	4b49      	ldr	r3, [pc, #292]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005116:	69db      	ldr	r3, [r3, #28]
 8005118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005120:	2301      	movs	r3, #1
 8005122:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005124:	4b46      	ldr	r3, [pc, #280]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800512c:	2b00      	cmp	r3, #0
 800512e:	d118      	bne.n	8005162 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005130:	4b43      	ldr	r3, [pc, #268]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a42      	ldr	r2, [pc, #264]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800513a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800513c:	f7fd fb48 	bl	80027d0 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005142:	e008      	b.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005144:	f7fd fb44 	bl	80027d0 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d901      	bls.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e06d      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005156:	4b3a      	ldr	r3, [pc, #232]	; (8005240 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515e:	2b00      	cmp	r3, #0
 8005160:	d0f0      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005162:	4b36      	ldr	r3, [pc, #216]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d02e      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	429a      	cmp	r2, r3
 800517e:	d027      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005180:	4b2e      	ldr	r3, [pc, #184]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005182:	6a1b      	ldr	r3, [r3, #32]
 8005184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005188:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800518a:	4b2e      	ldr	r3, [pc, #184]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800518c:	2201      	movs	r2, #1
 800518e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005190:	4b2c      	ldr	r3, [pc, #176]	; (8005244 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005192:	2200      	movs	r2, #0
 8005194:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005196:	4a29      	ldr	r2, [pc, #164]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d014      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051a6:	f7fd fb13 	bl	80027d0 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ac:	e00a      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ae:	f7fd fb0f 	bl	80027d0 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051bc:	4293      	cmp	r3, r2
 80051be:	d901      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e036      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051c4:	4b1d      	ldr	r3, [pc, #116]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f003 0302 	and.w	r3, r3, #2
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d0ee      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051d0:	4b1a      	ldr	r3, [pc, #104]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4917      	ldr	r1, [pc, #92]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80051e2:	7dfb      	ldrb	r3, [r7, #23]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d105      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051e8:	4b14      	ldr	r3, [pc, #80]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	4a13      	ldr	r2, [pc, #76]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80051ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0302 	and.w	r3, r3, #2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005200:	4b0e      	ldr	r3, [pc, #56]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	490b      	ldr	r1, [pc, #44]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800520e:	4313      	orrs	r3, r2
 8005210:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0310 	and.w	r3, r3, #16
 800521a:	2b00      	cmp	r3, #0
 800521c:	d008      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800521e:	4b07      	ldr	r3, [pc, #28]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	4904      	ldr	r1, [pc, #16]	; (800523c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800522c:	4313      	orrs	r3, r2
 800522e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3718      	adds	r7, #24
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	40021000 	.word	0x40021000
 8005240:	40007000 	.word	0x40007000
 8005244:	42420440 	.word	0x42420440

08005248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b082      	sub	sp, #8
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d101      	bne.n	800525a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e01d      	b.n	8005296 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d106      	bne.n	8005274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f7fd f91a 	bl	80024a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2202      	movs	r2, #2
 8005278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681a      	ldr	r2, [r3, #0]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	3304      	adds	r3, #4
 8005284:	4619      	mov	r1, r3
 8005286:	4610      	mov	r0, r2
 8005288:	f000 fa10 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005294:	2300      	movs	r3, #0
}
 8005296:	4618      	mov	r0, r3
 8005298:	3708      	adds	r7, #8
 800529a:	46bd      	mov	sp, r7
 800529c:	bd80      	pop	{r7, pc}

0800529e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800529e:	b480      	push	{r7}
 80052a0:	b085      	sub	sp, #20
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0307 	and.w	r3, r3, #7
 80052c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d007      	beq.n	80052d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	681a      	ldr	r2, [r3, #0]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0201 	orr.w	r2, r2, #1
 80052d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr

080052e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d122      	bne.n	8005340 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b02      	cmp	r3, #2
 8005306:	d11b      	bne.n	8005340 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0202 	mvn.w	r2, #2
 8005310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	f003 0303 	and.w	r3, r3, #3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d003      	beq.n	800532e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f9a4 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 800532c:	e005      	b.n	800533a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f997 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f9a6 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0304 	and.w	r3, r3, #4
 800534a:	2b04      	cmp	r3, #4
 800534c:	d122      	bne.n	8005394 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b04      	cmp	r3, #4
 800535a:	d11b      	bne.n	8005394 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0204 	mvn.w	r2, #4
 8005364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2202      	movs	r2, #2
 800536a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005376:	2b00      	cmp	r3, #0
 8005378:	d003      	beq.n	8005382 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f97a 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 8005380:	e005      	b.n	800538e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f96d 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f97c 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	f003 0308 	and.w	r3, r3, #8
 800539e:	2b08      	cmp	r3, #8
 80053a0:	d122      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	f003 0308 	and.w	r3, r3, #8
 80053ac:	2b08      	cmp	r3, #8
 80053ae:	d11b      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f06f 0208 	mvn.w	r2, #8
 80053b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2204      	movs	r2, #4
 80053be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	f003 0303 	and.w	r3, r3, #3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d003      	beq.n	80053d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f000 f950 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 80053d4:	e005      	b.n	80053e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f943 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 f952 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b10      	cmp	r3, #16
 80053f4:	d122      	bne.n	800543c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	f003 0310 	and.w	r3, r3, #16
 8005400:	2b10      	cmp	r3, #16
 8005402:	d11b      	bne.n	800543c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f06f 0210 	mvn.w	r2, #16
 800540c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2208      	movs	r2, #8
 8005412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69db      	ldr	r3, [r3, #28]
 800541a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800541e:	2b00      	cmp	r3, #0
 8005420:	d003      	beq.n	800542a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f926 	bl	8005674 <HAL_TIM_IC_CaptureCallback>
 8005428:	e005      	b.n	8005436 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f000 f919 	bl	8005662 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f928 	bl	8005686 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b01      	cmp	r3, #1
 8005448:	d10e      	bne.n	8005468 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b01      	cmp	r3, #1
 8005456:	d107      	bne.n	8005468 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f06f 0201 	mvn.w	r2, #1
 8005460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005462:	6878      	ldr	r0, [r7, #4]
 8005464:	f7fc f9b0 	bl	80017c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	691b      	ldr	r3, [r3, #16]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b80      	cmp	r3, #128	; 0x80
 8005474:	d10e      	bne.n	8005494 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005480:	2b80      	cmp	r3, #128	; 0x80
 8005482:	d107      	bne.n	8005494 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800548c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fa51 	bl	8005936 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d10e      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ac:	2b40      	cmp	r3, #64	; 0x40
 80054ae:	d107      	bne.n	80054c0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 f8ec 	bl	8005698 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	f003 0320 	and.w	r3, r3, #32
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	d10e      	bne.n	80054ec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b20      	cmp	r3, #32
 80054da:	d107      	bne.n	80054ec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f06f 0220 	mvn.w	r2, #32
 80054e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa1c 	bl	8005924 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80054ec:	bf00      	nop
 80054ee:	3708      	adds	r7, #8
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}

080054f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_TIM_ConfigClockSource+0x18>
 8005508:	2302      	movs	r3, #2
 800550a:	e0a6      	b.n	800565a <HAL_TIM_ConfigClockSource+0x166>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800552a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005532:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2b40      	cmp	r3, #64	; 0x40
 8005542:	d067      	beq.n	8005614 <HAL_TIM_ConfigClockSource+0x120>
 8005544:	2b40      	cmp	r3, #64	; 0x40
 8005546:	d80b      	bhi.n	8005560 <HAL_TIM_ConfigClockSource+0x6c>
 8005548:	2b10      	cmp	r3, #16
 800554a:	d073      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0x140>
 800554c:	2b10      	cmp	r3, #16
 800554e:	d802      	bhi.n	8005556 <HAL_TIM_ConfigClockSource+0x62>
 8005550:	2b00      	cmp	r3, #0
 8005552:	d06f      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005554:	e078      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005556:	2b20      	cmp	r3, #32
 8005558:	d06c      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0x140>
 800555a:	2b30      	cmp	r3, #48	; 0x30
 800555c:	d06a      	beq.n	8005634 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800555e:	e073      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005560:	2b70      	cmp	r3, #112	; 0x70
 8005562:	d00d      	beq.n	8005580 <HAL_TIM_ConfigClockSource+0x8c>
 8005564:	2b70      	cmp	r3, #112	; 0x70
 8005566:	d804      	bhi.n	8005572 <HAL_TIM_ConfigClockSource+0x7e>
 8005568:	2b50      	cmp	r3, #80	; 0x50
 800556a:	d033      	beq.n	80055d4 <HAL_TIM_ConfigClockSource+0xe0>
 800556c:	2b60      	cmp	r3, #96	; 0x60
 800556e:	d041      	beq.n	80055f4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005570:	e06a      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005576:	d066      	beq.n	8005646 <HAL_TIM_ConfigClockSource+0x152>
 8005578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800557c:	d017      	beq.n	80055ae <HAL_TIM_ConfigClockSource+0xba>
      break;
 800557e:	e063      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6818      	ldr	r0, [r3, #0]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	6899      	ldr	r1, [r3, #8]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	f000 f965 	bl	800585e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	609a      	str	r2, [r3, #8]
      break;
 80055ac:	e04c      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6818      	ldr	r0, [r3, #0]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	6899      	ldr	r1, [r3, #8]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f000 f94e 	bl	800585e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	689a      	ldr	r2, [r3, #8]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055d0:	609a      	str	r2, [r3, #8]
      break;
 80055d2:	e039      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	6859      	ldr	r1, [r3, #4]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	461a      	mov	r2, r3
 80055e2:	f000 f8c5 	bl	8005770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2150      	movs	r1, #80	; 0x50
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 f91c 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 80055f2:	e029      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	461a      	mov	r2, r3
 8005602:	f000 f8e3 	bl	80057cc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2160      	movs	r1, #96	; 0x60
 800560c:	4618      	mov	r0, r3
 800560e:	f000 f90c 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8005612:	e019      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6818      	ldr	r0, [r3, #0]
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	6859      	ldr	r1, [r3, #4]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	461a      	mov	r2, r3
 8005622:	f000 f8a5 	bl	8005770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2140      	movs	r1, #64	; 0x40
 800562c:	4618      	mov	r0, r3
 800562e:	f000 f8fc 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8005632:	e009      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f000 f8f3 	bl	800582a <TIM_ITRx_SetConfig>
      break;
 8005644:	e000      	b.n	8005648 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005658:	2300      	movs	r3, #0
}
 800565a:	4618      	mov	r0, r3
 800565c:	3710      	adds	r7, #16
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}

08005662 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005662:	b480      	push	{r7}
 8005664:	b083      	sub	sp, #12
 8005666:	af00      	add	r7, sp, #0
 8005668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	bc80      	pop	{r7}
 8005672:	4770      	bx	lr

08005674 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b083      	sub	sp, #12
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800567c:	bf00      	nop
 800567e:	370c      	adds	r7, #12
 8005680:	46bd      	mov	sp, r7
 8005682:	bc80      	pop	{r7}
 8005684:	4770      	bx	lr

08005686 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005686:	b480      	push	{r7}
 8005688:	b083      	sub	sp, #12
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	bc80      	pop	{r7}
 8005696:	4770      	bx	lr

08005698 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a0:	bf00      	nop
 80056a2:	370c      	adds	r7, #12
 80056a4:	46bd      	mov	sp, r7
 80056a6:	bc80      	pop	{r7}
 80056a8:	4770      	bx	lr
	...

080056ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a29      	ldr	r2, [pc, #164]	; (8005764 <TIM_Base_SetConfig+0xb8>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00b      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056ca:	d007      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a26      	ldr	r2, [pc, #152]	; (8005768 <TIM_Base_SetConfig+0xbc>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d003      	beq.n	80056dc <TIM_Base_SetConfig+0x30>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	4a25      	ldr	r2, [pc, #148]	; (800576c <TIM_Base_SetConfig+0xc0>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d108      	bne.n	80056ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a1c      	ldr	r2, [pc, #112]	; (8005764 <TIM_Base_SetConfig+0xb8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fc:	d007      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a19      	ldr	r2, [pc, #100]	; (8005768 <TIM_Base_SetConfig+0xbc>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a18      	ldr	r2, [pc, #96]	; (800576c <TIM_Base_SetConfig+0xc0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	695b      	ldr	r3, [r3, #20]
 800572a:	4313      	orrs	r3, r2
 800572c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	689a      	ldr	r2, [r3, #8]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a07      	ldr	r2, [pc, #28]	; (8005764 <TIM_Base_SetConfig+0xb8>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d103      	bne.n	8005754 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	615a      	str	r2, [r3, #20]
}
 800575a:	bf00      	nop
 800575c:	3714      	adds	r7, #20
 800575e:	46bd      	mov	sp, r7
 8005760:	bc80      	pop	{r7}
 8005762:	4770      	bx	lr
 8005764:	40012c00 	.word	0x40012c00
 8005768:	40000400 	.word	0x40000400
 800576c:	40000800 	.word	0x40000800

08005770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f023 0201 	bic.w	r2, r3, #1
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800579a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	f023 030a 	bic.w	r3, r3, #10
 80057ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	4313      	orrs	r3, r2
 80057b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	693a      	ldr	r2, [r7, #16]
 80057ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	697a      	ldr	r2, [r7, #20]
 80057c0:	621a      	str	r2, [r3, #32]
}
 80057c2:	bf00      	nop
 80057c4:	371c      	adds	r7, #28
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bc80      	pop	{r7}
 80057ca:	4770      	bx	lr

080057cc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6a1b      	ldr	r3, [r3, #32]
 80057dc:	f023 0210 	bic.w	r2, r3, #16
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057f6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	031b      	lsls	r3, r3, #12
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005808:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	693a      	ldr	r2, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	621a      	str	r2, [r3, #32]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	bc80      	pop	{r7}
 8005828:	4770      	bx	lr

0800582a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005840:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	4313      	orrs	r3, r2
 8005848:	f043 0307 	orr.w	r3, r3, #7
 800584c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	609a      	str	r2, [r3, #8]
}
 8005854:	bf00      	nop
 8005856:	3714      	adds	r7, #20
 8005858:	46bd      	mov	sp, r7
 800585a:	bc80      	pop	{r7}
 800585c:	4770      	bx	lr

0800585e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800585e:	b480      	push	{r7}
 8005860:	b087      	sub	sp, #28
 8005862:	af00      	add	r7, sp, #0
 8005864:	60f8      	str	r0, [r7, #12]
 8005866:	60b9      	str	r1, [r7, #8]
 8005868:	607a      	str	r2, [r7, #4]
 800586a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005878:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	021a      	lsls	r2, r3, #8
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	431a      	orrs	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	4313      	orrs	r3, r2
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	609a      	str	r2, [r3, #8]
}
 8005892:	bf00      	nop
 8005894:	371c      	adds	r7, #28
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d101      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e032      	b.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68fa      	ldr	r2, [r7, #12]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ec:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	68ba      	ldr	r2, [r7, #8]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68fa      	ldr	r2, [r7, #12]
 80058fe:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	bc80      	pop	{r7}
 8005922:	4770      	bx	lr

08005924 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	bc80      	pop	{r7}
 8005934:	4770      	bx	lr

08005936 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005936:	b480      	push	{r7}
 8005938:	b083      	sub	sp, #12
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	bc80      	pop	{r7}
 8005946:	4770      	bx	lr

08005948 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b082      	sub	sp, #8
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e03f      	b.n	80059da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005960:	b2db      	uxtb	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d106      	bne.n	8005974 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f7fc fdc0 	bl	80024f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2224      	movs	r2, #36	; 0x24
 8005978:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68da      	ldr	r2, [r3, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800598a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 f829 	bl	80059e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	691a      	ldr	r2, [r3, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2220      	movs	r2, #32
 80059cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a1e:	f023 030c 	bic.w	r3, r3, #12
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	68f9      	ldr	r1, [r7, #12]
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a52      	ldr	r2, [pc, #328]	; (8005b90 <UART_SetConfig+0x1ac>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d14e      	bne.n	8005aea <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a4c:	f7ff fb14 	bl	8005078 <HAL_RCC_GetPCLK2Freq>
 8005a50:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	009a      	lsls	r2, r3, #2
 8005a5c:	441a      	add	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a68:	4a4a      	ldr	r2, [pc, #296]	; (8005b94 <UART_SetConfig+0x1b0>)
 8005a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6e:	095b      	lsrs	r3, r3, #5
 8005a70:	0119      	lsls	r1, r3, #4
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	4613      	mov	r3, r2
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	4413      	add	r3, r2
 8005a7a:	009a      	lsls	r2, r3, #2
 8005a7c:	441a      	add	r2, r3
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a88:	4b42      	ldr	r3, [pc, #264]	; (8005b94 <UART_SetConfig+0x1b0>)
 8005a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8005a8e:	095b      	lsrs	r3, r3, #5
 8005a90:	2064      	movs	r0, #100	; 0x64
 8005a92:	fb00 f303 	mul.w	r3, r0, r3
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	011b      	lsls	r3, r3, #4
 8005a9a:	3332      	adds	r3, #50	; 0x32
 8005a9c:	4a3d      	ldr	r2, [pc, #244]	; (8005b94 <UART_SetConfig+0x1b0>)
 8005a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005aa8:	4419      	add	r1, r3
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	4613      	mov	r3, r2
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009a      	lsls	r2, r3, #2
 8005ab4:	441a      	add	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ac0:	4b34      	ldr	r3, [pc, #208]	; (8005b94 <UART_SetConfig+0x1b0>)
 8005ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8005ac6:	095b      	lsrs	r3, r3, #5
 8005ac8:	2064      	movs	r0, #100	; 0x64
 8005aca:	fb00 f303 	mul.w	r3, r0, r3
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	3332      	adds	r3, #50	; 0x32
 8005ad4:	4a2f      	ldr	r2, [pc, #188]	; (8005b94 <UART_SetConfig+0x1b0>)
 8005ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8005ada:	095b      	lsrs	r3, r3, #5
 8005adc:	f003 020f 	and.w	r2, r3, #15
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	440a      	add	r2, r1
 8005ae6:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005ae8:	e04d      	b.n	8005b86 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005aea:	f7ff fab1 	bl	8005050 <HAL_RCC_GetPCLK1Freq>
 8005aee:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	4613      	mov	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	4413      	add	r3, r2
 8005af8:	009a      	lsls	r2, r3, #2
 8005afa:	441a      	add	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b06:	4a23      	ldr	r2, [pc, #140]	; (8005b94 <UART_SetConfig+0x1b0>)
 8005b08:	fba2 2303 	umull	r2, r3, r2, r3
 8005b0c:	095b      	lsrs	r3, r3, #5
 8005b0e:	0119      	lsls	r1, r3, #4
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009a      	lsls	r2, r3, #2
 8005b1a:	441a      	add	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b26:	4b1b      	ldr	r3, [pc, #108]	; (8005b94 <UART_SetConfig+0x1b0>)
 8005b28:	fba3 0302 	umull	r0, r3, r3, r2
 8005b2c:	095b      	lsrs	r3, r3, #5
 8005b2e:	2064      	movs	r0, #100	; 0x64
 8005b30:	fb00 f303 	mul.w	r3, r0, r3
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	3332      	adds	r3, #50	; 0x32
 8005b3a:	4a16      	ldr	r2, [pc, #88]	; (8005b94 <UART_SetConfig+0x1b0>)
 8005b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b40:	095b      	lsrs	r3, r3, #5
 8005b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b46:	4419      	add	r1, r3
 8005b48:	68ba      	ldr	r2, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009a      	lsls	r2, r3, #2
 8005b52:	441a      	add	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <UART_SetConfig+0x1b0>)
 8005b60:	fba3 0302 	umull	r0, r3, r3, r2
 8005b64:	095b      	lsrs	r3, r3, #5
 8005b66:	2064      	movs	r0, #100	; 0x64
 8005b68:	fb00 f303 	mul.w	r3, r0, r3
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	3332      	adds	r3, #50	; 0x32
 8005b72:	4a08      	ldr	r2, [pc, #32]	; (8005b94 <UART_SetConfig+0x1b0>)
 8005b74:	fba2 2303 	umull	r2, r3, r2, r3
 8005b78:	095b      	lsrs	r3, r3, #5
 8005b7a:	f003 020f 	and.w	r2, r3, #15
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	440a      	add	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	40013800 	.word	0x40013800
 8005b94:	51eb851f 	.word	0x51eb851f

08005b98 <__errno>:
 8005b98:	4b01      	ldr	r3, [pc, #4]	; (8005ba0 <__errno+0x8>)
 8005b9a:	6818      	ldr	r0, [r3, #0]
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20000014 	.word	0x20000014

08005ba4 <__libc_init_array>:
 8005ba4:	b570      	push	{r4, r5, r6, lr}
 8005ba6:	2500      	movs	r5, #0
 8005ba8:	4e0c      	ldr	r6, [pc, #48]	; (8005bdc <__libc_init_array+0x38>)
 8005baa:	4c0d      	ldr	r4, [pc, #52]	; (8005be0 <__libc_init_array+0x3c>)
 8005bac:	1ba4      	subs	r4, r4, r6
 8005bae:	10a4      	asrs	r4, r4, #2
 8005bb0:	42a5      	cmp	r5, r4
 8005bb2:	d109      	bne.n	8005bc8 <__libc_init_array+0x24>
 8005bb4:	f002 fe10 	bl	80087d8 <_init>
 8005bb8:	2500      	movs	r5, #0
 8005bba:	4e0a      	ldr	r6, [pc, #40]	; (8005be4 <__libc_init_array+0x40>)
 8005bbc:	4c0a      	ldr	r4, [pc, #40]	; (8005be8 <__libc_init_array+0x44>)
 8005bbe:	1ba4      	subs	r4, r4, r6
 8005bc0:	10a4      	asrs	r4, r4, #2
 8005bc2:	42a5      	cmp	r5, r4
 8005bc4:	d105      	bne.n	8005bd2 <__libc_init_array+0x2e>
 8005bc6:	bd70      	pop	{r4, r5, r6, pc}
 8005bc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bcc:	4798      	blx	r3
 8005bce:	3501      	adds	r5, #1
 8005bd0:	e7ee      	b.n	8005bb0 <__libc_init_array+0xc>
 8005bd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bd6:	4798      	blx	r3
 8005bd8:	3501      	adds	r5, #1
 8005bda:	e7f2      	b.n	8005bc2 <__libc_init_array+0x1e>
 8005bdc:	08009258 	.word	0x08009258
 8005be0:	08009258 	.word	0x08009258
 8005be4:	08009258 	.word	0x08009258
 8005be8:	0800925c 	.word	0x0800925c

08005bec <memset>:
 8005bec:	4603      	mov	r3, r0
 8005bee:	4402      	add	r2, r0
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d100      	bne.n	8005bf6 <memset+0xa>
 8005bf4:	4770      	bx	lr
 8005bf6:	f803 1b01 	strb.w	r1, [r3], #1
 8005bfa:	e7f9      	b.n	8005bf0 <memset+0x4>

08005bfc <__cvt>:
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c02:	461e      	mov	r6, r3
 8005c04:	bfbb      	ittet	lt
 8005c06:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005c0a:	461e      	movlt	r6, r3
 8005c0c:	2300      	movge	r3, #0
 8005c0e:	232d      	movlt	r3, #45	; 0x2d
 8005c10:	b088      	sub	sp, #32
 8005c12:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c14:	e9dd 1a12 	ldrd	r1, sl, [sp, #72]	; 0x48
 8005c18:	f027 0720 	bic.w	r7, r7, #32
 8005c1c:	2f46      	cmp	r7, #70	; 0x46
 8005c1e:	4614      	mov	r4, r2
 8005c20:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005c22:	700b      	strb	r3, [r1, #0]
 8005c24:	d004      	beq.n	8005c30 <__cvt+0x34>
 8005c26:	2f45      	cmp	r7, #69	; 0x45
 8005c28:	d100      	bne.n	8005c2c <__cvt+0x30>
 8005c2a:	3501      	adds	r5, #1
 8005c2c:	2302      	movs	r3, #2
 8005c2e:	e000      	b.n	8005c32 <__cvt+0x36>
 8005c30:	2303      	movs	r3, #3
 8005c32:	aa07      	add	r2, sp, #28
 8005c34:	9204      	str	r2, [sp, #16]
 8005c36:	aa06      	add	r2, sp, #24
 8005c38:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005c3c:	e9cd 3500 	strd	r3, r5, [sp]
 8005c40:	4622      	mov	r2, r4
 8005c42:	4633      	mov	r3, r6
 8005c44:	f000 fcd8 	bl	80065f8 <_dtoa_r>
 8005c48:	2f47      	cmp	r7, #71	; 0x47
 8005c4a:	4680      	mov	r8, r0
 8005c4c:	d102      	bne.n	8005c54 <__cvt+0x58>
 8005c4e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005c50:	07db      	lsls	r3, r3, #31
 8005c52:	d526      	bpl.n	8005ca2 <__cvt+0xa6>
 8005c54:	2f46      	cmp	r7, #70	; 0x46
 8005c56:	eb08 0905 	add.w	r9, r8, r5
 8005c5a:	d111      	bne.n	8005c80 <__cvt+0x84>
 8005c5c:	f898 3000 	ldrb.w	r3, [r8]
 8005c60:	2b30      	cmp	r3, #48	; 0x30
 8005c62:	d10a      	bne.n	8005c7a <__cvt+0x7e>
 8005c64:	2200      	movs	r2, #0
 8005c66:	2300      	movs	r3, #0
 8005c68:	4620      	mov	r0, r4
 8005c6a:	4631      	mov	r1, r6
 8005c6c:	f7fa fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 8005c70:	b918      	cbnz	r0, 8005c7a <__cvt+0x7e>
 8005c72:	f1c5 0501 	rsb	r5, r5, #1
 8005c76:	f8ca 5000 	str.w	r5, [sl]
 8005c7a:	f8da 3000 	ldr.w	r3, [sl]
 8005c7e:	4499      	add	r9, r3
 8005c80:	2200      	movs	r2, #0
 8005c82:	2300      	movs	r3, #0
 8005c84:	4620      	mov	r0, r4
 8005c86:	4631      	mov	r1, r6
 8005c88:	f7fa fe8e 	bl	80009a8 <__aeabi_dcmpeq>
 8005c8c:	b938      	cbnz	r0, 8005c9e <__cvt+0xa2>
 8005c8e:	2230      	movs	r2, #48	; 0x30
 8005c90:	9b07      	ldr	r3, [sp, #28]
 8005c92:	454b      	cmp	r3, r9
 8005c94:	d205      	bcs.n	8005ca2 <__cvt+0xa6>
 8005c96:	1c59      	adds	r1, r3, #1
 8005c98:	9107      	str	r1, [sp, #28]
 8005c9a:	701a      	strb	r2, [r3, #0]
 8005c9c:	e7f8      	b.n	8005c90 <__cvt+0x94>
 8005c9e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005ca2:	4640      	mov	r0, r8
 8005ca4:	9b07      	ldr	r3, [sp, #28]
 8005ca6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005ca8:	eba3 0308 	sub.w	r3, r3, r8
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	b008      	add	sp, #32
 8005cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005cb4 <__exponent>:
 8005cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005cb6:	2900      	cmp	r1, #0
 8005cb8:	bfb4      	ite	lt
 8005cba:	232d      	movlt	r3, #45	; 0x2d
 8005cbc:	232b      	movge	r3, #43	; 0x2b
 8005cbe:	4604      	mov	r4, r0
 8005cc0:	bfb8      	it	lt
 8005cc2:	4249      	neglt	r1, r1
 8005cc4:	2909      	cmp	r1, #9
 8005cc6:	f804 2b02 	strb.w	r2, [r4], #2
 8005cca:	7043      	strb	r3, [r0, #1]
 8005ccc:	dd21      	ble.n	8005d12 <__exponent+0x5e>
 8005cce:	f10d 0307 	add.w	r3, sp, #7
 8005cd2:	461f      	mov	r7, r3
 8005cd4:	260a      	movs	r6, #10
 8005cd6:	fb91 f5f6 	sdiv	r5, r1, r6
 8005cda:	fb06 1115 	mls	r1, r6, r5, r1
 8005cde:	2d09      	cmp	r5, #9
 8005ce0:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8005ce4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ce8:	f103 32ff 	add.w	r2, r3, #4294967295
 8005cec:	4629      	mov	r1, r5
 8005cee:	dc09      	bgt.n	8005d04 <__exponent+0x50>
 8005cf0:	3130      	adds	r1, #48	; 0x30
 8005cf2:	3b02      	subs	r3, #2
 8005cf4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005cf8:	42bb      	cmp	r3, r7
 8005cfa:	4622      	mov	r2, r4
 8005cfc:	d304      	bcc.n	8005d08 <__exponent+0x54>
 8005cfe:	1a10      	subs	r0, r2, r0
 8005d00:	b003      	add	sp, #12
 8005d02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d04:	4613      	mov	r3, r2
 8005d06:	e7e6      	b.n	8005cd6 <__exponent+0x22>
 8005d08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d0c:	f804 2b01 	strb.w	r2, [r4], #1
 8005d10:	e7f2      	b.n	8005cf8 <__exponent+0x44>
 8005d12:	2330      	movs	r3, #48	; 0x30
 8005d14:	4419      	add	r1, r3
 8005d16:	7083      	strb	r3, [r0, #2]
 8005d18:	1d02      	adds	r2, r0, #4
 8005d1a:	70c1      	strb	r1, [r0, #3]
 8005d1c:	e7ef      	b.n	8005cfe <__exponent+0x4a>
	...

08005d20 <_printf_float>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	b091      	sub	sp, #68	; 0x44
 8005d26:	460c      	mov	r4, r1
 8005d28:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8005d2a:	4693      	mov	fp, r2
 8005d2c:	461e      	mov	r6, r3
 8005d2e:	4605      	mov	r5, r0
 8005d30:	f001 fa16 	bl	8007160 <_localeconv_r>
 8005d34:	6803      	ldr	r3, [r0, #0]
 8005d36:	4618      	mov	r0, r3
 8005d38:	9309      	str	r3, [sp, #36]	; 0x24
 8005d3a:	f7fa fa09 	bl	8000150 <strlen>
 8005d3e:	2300      	movs	r3, #0
 8005d40:	930e      	str	r3, [sp, #56]	; 0x38
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	900a      	str	r0, [sp, #40]	; 0x28
 8005d46:	3307      	adds	r3, #7
 8005d48:	f023 0307 	bic.w	r3, r3, #7
 8005d4c:	f103 0208 	add.w	r2, r3, #8
 8005d50:	f894 8018 	ldrb.w	r8, [r4, #24]
 8005d54:	f8d4 a000 	ldr.w	sl, [r4]
 8005d58:	603a      	str	r2, [r7, #0]
 8005d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005d62:	e9d4 7912 	ldrd	r7, r9, [r4, #72]	; 0x48
 8005d66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005d6a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d70:	4ba6      	ldr	r3, [pc, #664]	; (800600c <_printf_float+0x2ec>)
 8005d72:	4638      	mov	r0, r7
 8005d74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d76:	f7fa fe49 	bl	8000a0c <__aeabi_dcmpun>
 8005d7a:	bb68      	cbnz	r0, 8005dd8 <_printf_float+0xb8>
 8005d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d80:	4ba2      	ldr	r3, [pc, #648]	; (800600c <_printf_float+0x2ec>)
 8005d82:	4638      	mov	r0, r7
 8005d84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005d86:	f7fa fe23 	bl	80009d0 <__aeabi_dcmple>
 8005d8a:	bb28      	cbnz	r0, 8005dd8 <_printf_float+0xb8>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2300      	movs	r3, #0
 8005d90:	4638      	mov	r0, r7
 8005d92:	4649      	mov	r1, r9
 8005d94:	f7fa fe12 	bl	80009bc <__aeabi_dcmplt>
 8005d98:	b110      	cbz	r0, 8005da0 <_printf_float+0x80>
 8005d9a:	232d      	movs	r3, #45	; 0x2d
 8005d9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005da0:	4f9b      	ldr	r7, [pc, #620]	; (8006010 <_printf_float+0x2f0>)
 8005da2:	4b9c      	ldr	r3, [pc, #624]	; (8006014 <_printf_float+0x2f4>)
 8005da4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005da8:	bf98      	it	ls
 8005daa:	461f      	movls	r7, r3
 8005dac:	2303      	movs	r3, #3
 8005dae:	f04f 0900 	mov.w	r9, #0
 8005db2:	6123      	str	r3, [r4, #16]
 8005db4:	f02a 0304 	bic.w	r3, sl, #4
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	9600      	str	r6, [sp, #0]
 8005dbc:	465b      	mov	r3, fp
 8005dbe:	aa0f      	add	r2, sp, #60	; 0x3c
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	f000 f9e2 	bl	800618c <_printf_common>
 8005dc8:	3001      	adds	r0, #1
 8005dca:	f040 8090 	bne.w	8005eee <_printf_float+0x1ce>
 8005dce:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd2:	b011      	add	sp, #68	; 0x44
 8005dd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dd8:	463a      	mov	r2, r7
 8005dda:	464b      	mov	r3, r9
 8005ddc:	4638      	mov	r0, r7
 8005dde:	4649      	mov	r1, r9
 8005de0:	f7fa fe14 	bl	8000a0c <__aeabi_dcmpun>
 8005de4:	b110      	cbz	r0, 8005dec <_printf_float+0xcc>
 8005de6:	4f8c      	ldr	r7, [pc, #560]	; (8006018 <_printf_float+0x2f8>)
 8005de8:	4b8c      	ldr	r3, [pc, #560]	; (800601c <_printf_float+0x2fc>)
 8005dea:	e7db      	b.n	8005da4 <_printf_float+0x84>
 8005dec:	6863      	ldr	r3, [r4, #4]
 8005dee:	f44a 6280 	orr.w	r2, sl, #1024	; 0x400
 8005df2:	1c59      	adds	r1, r3, #1
 8005df4:	a80d      	add	r0, sp, #52	; 0x34
 8005df6:	a90e      	add	r1, sp, #56	; 0x38
 8005df8:	d140      	bne.n	8005e7c <_printf_float+0x15c>
 8005dfa:	2306      	movs	r3, #6
 8005dfc:	6063      	str	r3, [r4, #4]
 8005dfe:	f04f 0c00 	mov.w	ip, #0
 8005e02:	f10d 0333 	add.w	r3, sp, #51	; 0x33
 8005e06:	e9cd 2301 	strd	r2, r3, [sp, #4]
 8005e0a:	6863      	ldr	r3, [r4, #4]
 8005e0c:	6022      	str	r2, [r4, #0]
 8005e0e:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	463a      	mov	r2, r7
 8005e16:	464b      	mov	r3, r9
 8005e18:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f7ff feed 	bl	8005bfc <__cvt>
 8005e22:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8005e26:	2b47      	cmp	r3, #71	; 0x47
 8005e28:	4607      	mov	r7, r0
 8005e2a:	d109      	bne.n	8005e40 <_printf_float+0x120>
 8005e2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e2e:	1cd8      	adds	r0, r3, #3
 8005e30:	db02      	blt.n	8005e38 <_printf_float+0x118>
 8005e32:	6862      	ldr	r2, [r4, #4]
 8005e34:	4293      	cmp	r3, r2
 8005e36:	dd47      	ble.n	8005ec8 <_printf_float+0x1a8>
 8005e38:	f1a8 0802 	sub.w	r8, r8, #2
 8005e3c:	fa5f f888 	uxtb.w	r8, r8
 8005e40:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005e44:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005e46:	d824      	bhi.n	8005e92 <_printf_float+0x172>
 8005e48:	3901      	subs	r1, #1
 8005e4a:	4642      	mov	r2, r8
 8005e4c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005e50:	910d      	str	r1, [sp, #52]	; 0x34
 8005e52:	f7ff ff2f 	bl	8005cb4 <__exponent>
 8005e56:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e58:	4681      	mov	r9, r0
 8005e5a:	1813      	adds	r3, r2, r0
 8005e5c:	2a01      	cmp	r2, #1
 8005e5e:	6123      	str	r3, [r4, #16]
 8005e60:	dc02      	bgt.n	8005e68 <_printf_float+0x148>
 8005e62:	6822      	ldr	r2, [r4, #0]
 8005e64:	07d1      	lsls	r1, r2, #31
 8005e66:	d501      	bpl.n	8005e6c <_printf_float+0x14c>
 8005e68:	3301      	adds	r3, #1
 8005e6a:	6123      	str	r3, [r4, #16]
 8005e6c:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0a2      	beq.n	8005dba <_printf_float+0x9a>
 8005e74:	232d      	movs	r3, #45	; 0x2d
 8005e76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e7a:	e79e      	b.n	8005dba <_printf_float+0x9a>
 8005e7c:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8005e80:	f000 816e 	beq.w	8006160 <_printf_float+0x440>
 8005e84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005e88:	d1b9      	bne.n	8005dfe <_printf_float+0xde>
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1b7      	bne.n	8005dfe <_printf_float+0xde>
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e7b4      	b.n	8005dfc <_printf_float+0xdc>
 8005e92:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8005e96:	d119      	bne.n	8005ecc <_printf_float+0x1ac>
 8005e98:	2900      	cmp	r1, #0
 8005e9a:	6863      	ldr	r3, [r4, #4]
 8005e9c:	dd0c      	ble.n	8005eb8 <_printf_float+0x198>
 8005e9e:	6121      	str	r1, [r4, #16]
 8005ea0:	b913      	cbnz	r3, 8005ea8 <_printf_float+0x188>
 8005ea2:	6822      	ldr	r2, [r4, #0]
 8005ea4:	07d2      	lsls	r2, r2, #31
 8005ea6:	d502      	bpl.n	8005eae <_printf_float+0x18e>
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	440b      	add	r3, r1
 8005eac:	6123      	str	r3, [r4, #16]
 8005eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005eb0:	f04f 0900 	mov.w	r9, #0
 8005eb4:	65a3      	str	r3, [r4, #88]	; 0x58
 8005eb6:	e7d9      	b.n	8005e6c <_printf_float+0x14c>
 8005eb8:	b913      	cbnz	r3, 8005ec0 <_printf_float+0x1a0>
 8005eba:	6822      	ldr	r2, [r4, #0]
 8005ebc:	07d0      	lsls	r0, r2, #31
 8005ebe:	d501      	bpl.n	8005ec4 <_printf_float+0x1a4>
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	e7f3      	b.n	8005eac <_printf_float+0x18c>
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e7f1      	b.n	8005eac <_printf_float+0x18c>
 8005ec8:	f04f 0867 	mov.w	r8, #103	; 0x67
 8005ecc:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	db05      	blt.n	8005ee0 <_printf_float+0x1c0>
 8005ed4:	6822      	ldr	r2, [r4, #0]
 8005ed6:	6123      	str	r3, [r4, #16]
 8005ed8:	07d1      	lsls	r1, r2, #31
 8005eda:	d5e8      	bpl.n	8005eae <_printf_float+0x18e>
 8005edc:	3301      	adds	r3, #1
 8005ede:	e7e5      	b.n	8005eac <_printf_float+0x18c>
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	bfcc      	ite	gt
 8005ee4:	2301      	movgt	r3, #1
 8005ee6:	f1c3 0302 	rsble	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	e7de      	b.n	8005eac <_printf_float+0x18c>
 8005eee:	6823      	ldr	r3, [r4, #0]
 8005ef0:	055a      	lsls	r2, r3, #21
 8005ef2:	d407      	bmi.n	8005f04 <_printf_float+0x1e4>
 8005ef4:	6923      	ldr	r3, [r4, #16]
 8005ef6:	463a      	mov	r2, r7
 8005ef8:	4659      	mov	r1, fp
 8005efa:	4628      	mov	r0, r5
 8005efc:	47b0      	blx	r6
 8005efe:	3001      	adds	r0, #1
 8005f00:	d129      	bne.n	8005f56 <_printf_float+0x236>
 8005f02:	e764      	b.n	8005dce <_printf_float+0xae>
 8005f04:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8005f08:	f240 80d7 	bls.w	80060ba <_printf_float+0x39a>
 8005f0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005f10:	2200      	movs	r2, #0
 8005f12:	2300      	movs	r3, #0
 8005f14:	f7fa fd48 	bl	80009a8 <__aeabi_dcmpeq>
 8005f18:	b388      	cbz	r0, 8005f7e <_printf_float+0x25e>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	4a40      	ldr	r2, [pc, #256]	; (8006020 <_printf_float+0x300>)
 8005f1e:	4659      	mov	r1, fp
 8005f20:	4628      	mov	r0, r5
 8005f22:	47b0      	blx	r6
 8005f24:	3001      	adds	r0, #1
 8005f26:	f43f af52 	beq.w	8005dce <_printf_float+0xae>
 8005f2a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	db02      	blt.n	8005f38 <_printf_float+0x218>
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	07d8      	lsls	r0, r3, #31
 8005f36:	d50e      	bpl.n	8005f56 <_printf_float+0x236>
 8005f38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f3c:	4659      	mov	r1, fp
 8005f3e:	4628      	mov	r0, r5
 8005f40:	47b0      	blx	r6
 8005f42:	3001      	adds	r0, #1
 8005f44:	f43f af43 	beq.w	8005dce <_printf_float+0xae>
 8005f48:	2700      	movs	r7, #0
 8005f4a:	f104 081a 	add.w	r8, r4, #26
 8005f4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f50:	3b01      	subs	r3, #1
 8005f52:	42bb      	cmp	r3, r7
 8005f54:	dc09      	bgt.n	8005f6a <_printf_float+0x24a>
 8005f56:	6823      	ldr	r3, [r4, #0]
 8005f58:	079f      	lsls	r7, r3, #30
 8005f5a:	f100 80fd 	bmi.w	8006158 <_printf_float+0x438>
 8005f5e:	68e0      	ldr	r0, [r4, #12]
 8005f60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f62:	4298      	cmp	r0, r3
 8005f64:	bfb8      	it	lt
 8005f66:	4618      	movlt	r0, r3
 8005f68:	e733      	b.n	8005dd2 <_printf_float+0xb2>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	4659      	mov	r1, fp
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b0      	blx	r6
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f af2a 	beq.w	8005dce <_printf_float+0xae>
 8005f7a:	3701      	adds	r7, #1
 8005f7c:	e7e7      	b.n	8005f4e <_printf_float+0x22e>
 8005f7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	dc2b      	bgt.n	8005fdc <_printf_float+0x2bc>
 8005f84:	2301      	movs	r3, #1
 8005f86:	4a26      	ldr	r2, [pc, #152]	; (8006020 <_printf_float+0x300>)
 8005f88:	4659      	mov	r1, fp
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	47b0      	blx	r6
 8005f8e:	3001      	adds	r0, #1
 8005f90:	f43f af1d 	beq.w	8005dce <_printf_float+0xae>
 8005f94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f96:	b923      	cbnz	r3, 8005fa2 <_printf_float+0x282>
 8005f98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f9a:	b913      	cbnz	r3, 8005fa2 <_printf_float+0x282>
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	07d9      	lsls	r1, r3, #31
 8005fa0:	d5d9      	bpl.n	8005f56 <_printf_float+0x236>
 8005fa2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005fa6:	4659      	mov	r1, fp
 8005fa8:	4628      	mov	r0, r5
 8005faa:	47b0      	blx	r6
 8005fac:	3001      	adds	r0, #1
 8005fae:	f43f af0e 	beq.w	8005dce <_printf_float+0xae>
 8005fb2:	f04f 0800 	mov.w	r8, #0
 8005fb6:	f104 091a 	add.w	r9, r4, #26
 8005fba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fbc:	425b      	negs	r3, r3
 8005fbe:	4543      	cmp	r3, r8
 8005fc0:	dc01      	bgt.n	8005fc6 <_printf_float+0x2a6>
 8005fc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005fc4:	e797      	b.n	8005ef6 <_printf_float+0x1d6>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	464a      	mov	r2, r9
 8005fca:	4659      	mov	r1, fp
 8005fcc:	4628      	mov	r0, r5
 8005fce:	47b0      	blx	r6
 8005fd0:	3001      	adds	r0, #1
 8005fd2:	f43f aefc 	beq.w	8005dce <_printf_float+0xae>
 8005fd6:	f108 0801 	add.w	r8, r8, #1
 8005fda:	e7ee      	b.n	8005fba <_printf_float+0x29a>
 8005fdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	bfa8      	it	ge
 8005fe4:	461a      	movge	r2, r3
 8005fe6:	2a00      	cmp	r2, #0
 8005fe8:	4690      	mov	r8, r2
 8005fea:	dd07      	ble.n	8005ffc <_printf_float+0x2dc>
 8005fec:	4613      	mov	r3, r2
 8005fee:	4659      	mov	r1, fp
 8005ff0:	463a      	mov	r2, r7
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	47b0      	blx	r6
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	f43f aee9 	beq.w	8005dce <_printf_float+0xae>
 8005ffc:	f104 031a 	add.w	r3, r4, #26
 8006000:	f04f 0a00 	mov.w	sl, #0
 8006004:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8006008:	930b      	str	r3, [sp, #44]	; 0x2c
 800600a:	e015      	b.n	8006038 <_printf_float+0x318>
 800600c:	7fefffff 	.word	0x7fefffff
 8006010:	08008fd4 	.word	0x08008fd4
 8006014:	08008fd0 	.word	0x08008fd0
 8006018:	08008fdc 	.word	0x08008fdc
 800601c:	08008fd8 	.word	0x08008fd8
 8006020:	08008fe0 	.word	0x08008fe0
 8006024:	2301      	movs	r3, #1
 8006026:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006028:	4659      	mov	r1, fp
 800602a:	4628      	mov	r0, r5
 800602c:	47b0      	blx	r6
 800602e:	3001      	adds	r0, #1
 8006030:	f43f aecd 	beq.w	8005dce <_printf_float+0xae>
 8006034:	f10a 0a01 	add.w	sl, sl, #1
 8006038:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 800603c:	eba9 0308 	sub.w	r3, r9, r8
 8006040:	4553      	cmp	r3, sl
 8006042:	dcef      	bgt.n	8006024 <_printf_float+0x304>
 8006044:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006048:	429a      	cmp	r2, r3
 800604a:	444f      	add	r7, r9
 800604c:	db14      	blt.n	8006078 <_printf_float+0x358>
 800604e:	6823      	ldr	r3, [r4, #0]
 8006050:	07da      	lsls	r2, r3, #31
 8006052:	d411      	bmi.n	8006078 <_printf_float+0x358>
 8006054:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006056:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006058:	eba3 0209 	sub.w	r2, r3, r9
 800605c:	eba3 0901 	sub.w	r9, r3, r1
 8006060:	4591      	cmp	r9, r2
 8006062:	bfa8      	it	ge
 8006064:	4691      	movge	r9, r2
 8006066:	f1b9 0f00 	cmp.w	r9, #0
 800606a:	dc0d      	bgt.n	8006088 <_printf_float+0x368>
 800606c:	2700      	movs	r7, #0
 800606e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006072:	f104 081a 	add.w	r8, r4, #26
 8006076:	e018      	b.n	80060aa <_printf_float+0x38a>
 8006078:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800607c:	4659      	mov	r1, fp
 800607e:	4628      	mov	r0, r5
 8006080:	47b0      	blx	r6
 8006082:	3001      	adds	r0, #1
 8006084:	d1e6      	bne.n	8006054 <_printf_float+0x334>
 8006086:	e6a2      	b.n	8005dce <_printf_float+0xae>
 8006088:	464b      	mov	r3, r9
 800608a:	463a      	mov	r2, r7
 800608c:	4659      	mov	r1, fp
 800608e:	4628      	mov	r0, r5
 8006090:	47b0      	blx	r6
 8006092:	3001      	adds	r0, #1
 8006094:	d1ea      	bne.n	800606c <_printf_float+0x34c>
 8006096:	e69a      	b.n	8005dce <_printf_float+0xae>
 8006098:	2301      	movs	r3, #1
 800609a:	4642      	mov	r2, r8
 800609c:	4659      	mov	r1, fp
 800609e:	4628      	mov	r0, r5
 80060a0:	47b0      	blx	r6
 80060a2:	3001      	adds	r0, #1
 80060a4:	f43f ae93 	beq.w	8005dce <_printf_float+0xae>
 80060a8:	3701      	adds	r7, #1
 80060aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80060ae:	1a9b      	subs	r3, r3, r2
 80060b0:	eba3 0309 	sub.w	r3, r3, r9
 80060b4:	42bb      	cmp	r3, r7
 80060b6:	dcef      	bgt.n	8006098 <_printf_float+0x378>
 80060b8:	e74d      	b.n	8005f56 <_printf_float+0x236>
 80060ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060bc:	2a01      	cmp	r2, #1
 80060be:	dc01      	bgt.n	80060c4 <_printf_float+0x3a4>
 80060c0:	07db      	lsls	r3, r3, #31
 80060c2:	d538      	bpl.n	8006136 <_printf_float+0x416>
 80060c4:	2301      	movs	r3, #1
 80060c6:	463a      	mov	r2, r7
 80060c8:	4659      	mov	r1, fp
 80060ca:	4628      	mov	r0, r5
 80060cc:	47b0      	blx	r6
 80060ce:	3001      	adds	r0, #1
 80060d0:	f43f ae7d 	beq.w	8005dce <_printf_float+0xae>
 80060d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80060d8:	4659      	mov	r1, fp
 80060da:	4628      	mov	r0, r5
 80060dc:	47b0      	blx	r6
 80060de:	3001      	adds	r0, #1
 80060e0:	f107 0701 	add.w	r7, r7, #1
 80060e4:	f43f ae73 	beq.w	8005dce <_printf_float+0xae>
 80060e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80060ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80060ee:	2200      	movs	r2, #0
 80060f0:	f103 38ff 	add.w	r8, r3, #4294967295
 80060f4:	2300      	movs	r3, #0
 80060f6:	f7fa fc57 	bl	80009a8 <__aeabi_dcmpeq>
 80060fa:	b9c0      	cbnz	r0, 800612e <_printf_float+0x40e>
 80060fc:	4643      	mov	r3, r8
 80060fe:	463a      	mov	r2, r7
 8006100:	4659      	mov	r1, fp
 8006102:	4628      	mov	r0, r5
 8006104:	47b0      	blx	r6
 8006106:	3001      	adds	r0, #1
 8006108:	d10d      	bne.n	8006126 <_printf_float+0x406>
 800610a:	e660      	b.n	8005dce <_printf_float+0xae>
 800610c:	2301      	movs	r3, #1
 800610e:	4642      	mov	r2, r8
 8006110:	4659      	mov	r1, fp
 8006112:	4628      	mov	r0, r5
 8006114:	47b0      	blx	r6
 8006116:	3001      	adds	r0, #1
 8006118:	f43f ae59 	beq.w	8005dce <_printf_float+0xae>
 800611c:	3701      	adds	r7, #1
 800611e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006120:	3b01      	subs	r3, #1
 8006122:	42bb      	cmp	r3, r7
 8006124:	dcf2      	bgt.n	800610c <_printf_float+0x3ec>
 8006126:	464b      	mov	r3, r9
 8006128:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800612c:	e6e4      	b.n	8005ef8 <_printf_float+0x1d8>
 800612e:	2700      	movs	r7, #0
 8006130:	f104 081a 	add.w	r8, r4, #26
 8006134:	e7f3      	b.n	800611e <_printf_float+0x3fe>
 8006136:	2301      	movs	r3, #1
 8006138:	e7e1      	b.n	80060fe <_printf_float+0x3de>
 800613a:	2301      	movs	r3, #1
 800613c:	4642      	mov	r2, r8
 800613e:	4659      	mov	r1, fp
 8006140:	4628      	mov	r0, r5
 8006142:	47b0      	blx	r6
 8006144:	3001      	adds	r0, #1
 8006146:	f43f ae42 	beq.w	8005dce <_printf_float+0xae>
 800614a:	3701      	adds	r7, #1
 800614c:	68e3      	ldr	r3, [r4, #12]
 800614e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006150:	1a9b      	subs	r3, r3, r2
 8006152:	42bb      	cmp	r3, r7
 8006154:	dcf1      	bgt.n	800613a <_printf_float+0x41a>
 8006156:	e702      	b.n	8005f5e <_printf_float+0x23e>
 8006158:	2700      	movs	r7, #0
 800615a:	f104 0819 	add.w	r8, r4, #25
 800615e:	e7f5      	b.n	800614c <_printf_float+0x42c>
 8006160:	2b00      	cmp	r3, #0
 8006162:	f43f ae94 	beq.w	8005e8e <_printf_float+0x16e>
 8006166:	f04f 0c00 	mov.w	ip, #0
 800616a:	e9cd 1c05 	strd	r1, ip, [sp, #20]
 800616e:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8006172:	6022      	str	r2, [r4, #0]
 8006174:	e9cd 0803 	strd	r0, r8, [sp, #12]
 8006178:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800617c:	9300      	str	r3, [sp, #0]
 800617e:	463a      	mov	r2, r7
 8006180:	464b      	mov	r3, r9
 8006182:	4628      	mov	r0, r5
 8006184:	f7ff fd3a 	bl	8005bfc <__cvt>
 8006188:	4607      	mov	r7, r0
 800618a:	e64f      	b.n	8005e2c <_printf_float+0x10c>

0800618c <_printf_common>:
 800618c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006190:	4691      	mov	r9, r2
 8006192:	461f      	mov	r7, r3
 8006194:	688a      	ldr	r2, [r1, #8]
 8006196:	690b      	ldr	r3, [r1, #16]
 8006198:	4606      	mov	r6, r0
 800619a:	4293      	cmp	r3, r2
 800619c:	bfb8      	it	lt
 800619e:	4613      	movlt	r3, r2
 80061a0:	f8c9 3000 	str.w	r3, [r9]
 80061a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80061a8:	460c      	mov	r4, r1
 80061aa:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80061ae:	b112      	cbz	r2, 80061b6 <_printf_common+0x2a>
 80061b0:	3301      	adds	r3, #1
 80061b2:	f8c9 3000 	str.w	r3, [r9]
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	0699      	lsls	r1, r3, #26
 80061ba:	bf42      	ittt	mi
 80061bc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80061c0:	3302      	addmi	r3, #2
 80061c2:	f8c9 3000 	strmi.w	r3, [r9]
 80061c6:	6825      	ldr	r5, [r4, #0]
 80061c8:	f015 0506 	ands.w	r5, r5, #6
 80061cc:	d107      	bne.n	80061de <_printf_common+0x52>
 80061ce:	f104 0a19 	add.w	sl, r4, #25
 80061d2:	68e3      	ldr	r3, [r4, #12]
 80061d4:	f8d9 2000 	ldr.w	r2, [r9]
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	42ab      	cmp	r3, r5
 80061dc:	dc29      	bgt.n	8006232 <_printf_common+0xa6>
 80061de:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80061e2:	6822      	ldr	r2, [r4, #0]
 80061e4:	3300      	adds	r3, #0
 80061e6:	bf18      	it	ne
 80061e8:	2301      	movne	r3, #1
 80061ea:	0692      	lsls	r2, r2, #26
 80061ec:	d42e      	bmi.n	800624c <_printf_common+0xc0>
 80061ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061f2:	4639      	mov	r1, r7
 80061f4:	4630      	mov	r0, r6
 80061f6:	47c0      	blx	r8
 80061f8:	3001      	adds	r0, #1
 80061fa:	d021      	beq.n	8006240 <_printf_common+0xb4>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	68e5      	ldr	r5, [r4, #12]
 8006200:	f003 0306 	and.w	r3, r3, #6
 8006204:	2b04      	cmp	r3, #4
 8006206:	bf18      	it	ne
 8006208:	2500      	movne	r5, #0
 800620a:	f8d9 2000 	ldr.w	r2, [r9]
 800620e:	f04f 0900 	mov.w	r9, #0
 8006212:	bf08      	it	eq
 8006214:	1aad      	subeq	r5, r5, r2
 8006216:	68a3      	ldr	r3, [r4, #8]
 8006218:	6922      	ldr	r2, [r4, #16]
 800621a:	bf08      	it	eq
 800621c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006220:	4293      	cmp	r3, r2
 8006222:	bfc4      	itt	gt
 8006224:	1a9b      	subgt	r3, r3, r2
 8006226:	18ed      	addgt	r5, r5, r3
 8006228:	341a      	adds	r4, #26
 800622a:	454d      	cmp	r5, r9
 800622c:	d11a      	bne.n	8006264 <_printf_common+0xd8>
 800622e:	2000      	movs	r0, #0
 8006230:	e008      	b.n	8006244 <_printf_common+0xb8>
 8006232:	2301      	movs	r3, #1
 8006234:	4652      	mov	r2, sl
 8006236:	4639      	mov	r1, r7
 8006238:	4630      	mov	r0, r6
 800623a:	47c0      	blx	r8
 800623c:	3001      	adds	r0, #1
 800623e:	d103      	bne.n	8006248 <_printf_common+0xbc>
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006248:	3501      	adds	r5, #1
 800624a:	e7c2      	b.n	80061d2 <_printf_common+0x46>
 800624c:	2030      	movs	r0, #48	; 0x30
 800624e:	18e1      	adds	r1, r4, r3
 8006250:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800625a:	4422      	add	r2, r4
 800625c:	3302      	adds	r3, #2
 800625e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006262:	e7c4      	b.n	80061ee <_printf_common+0x62>
 8006264:	2301      	movs	r3, #1
 8006266:	4622      	mov	r2, r4
 8006268:	4639      	mov	r1, r7
 800626a:	4630      	mov	r0, r6
 800626c:	47c0      	blx	r8
 800626e:	3001      	adds	r0, #1
 8006270:	d0e6      	beq.n	8006240 <_printf_common+0xb4>
 8006272:	f109 0901 	add.w	r9, r9, #1
 8006276:	e7d8      	b.n	800622a <_printf_common+0x9e>

08006278 <_printf_i>:
 8006278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800627c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006280:	460c      	mov	r4, r1
 8006282:	7e09      	ldrb	r1, [r1, #24]
 8006284:	b085      	sub	sp, #20
 8006286:	296e      	cmp	r1, #110	; 0x6e
 8006288:	4617      	mov	r7, r2
 800628a:	4606      	mov	r6, r0
 800628c:	4698      	mov	r8, r3
 800628e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006290:	f000 80b3 	beq.w	80063fa <_printf_i+0x182>
 8006294:	d822      	bhi.n	80062dc <_printf_i+0x64>
 8006296:	2963      	cmp	r1, #99	; 0x63
 8006298:	d036      	beq.n	8006308 <_printf_i+0x90>
 800629a:	d80a      	bhi.n	80062b2 <_printf_i+0x3a>
 800629c:	2900      	cmp	r1, #0
 800629e:	f000 80b9 	beq.w	8006414 <_printf_i+0x19c>
 80062a2:	2958      	cmp	r1, #88	; 0x58
 80062a4:	f000 8083 	beq.w	80063ae <_printf_i+0x136>
 80062a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80062b0:	e032      	b.n	8006318 <_printf_i+0xa0>
 80062b2:	2964      	cmp	r1, #100	; 0x64
 80062b4:	d001      	beq.n	80062ba <_printf_i+0x42>
 80062b6:	2969      	cmp	r1, #105	; 0x69
 80062b8:	d1f6      	bne.n	80062a8 <_printf_i+0x30>
 80062ba:	6820      	ldr	r0, [r4, #0]
 80062bc:	6813      	ldr	r3, [r2, #0]
 80062be:	0605      	lsls	r5, r0, #24
 80062c0:	f103 0104 	add.w	r1, r3, #4
 80062c4:	d52a      	bpl.n	800631c <_printf_i+0xa4>
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	da03      	bge.n	80062d6 <_printf_i+0x5e>
 80062ce:	222d      	movs	r2, #45	; 0x2d
 80062d0:	425b      	negs	r3, r3
 80062d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80062d6:	486f      	ldr	r0, [pc, #444]	; (8006494 <_printf_i+0x21c>)
 80062d8:	220a      	movs	r2, #10
 80062da:	e039      	b.n	8006350 <_printf_i+0xd8>
 80062dc:	2973      	cmp	r1, #115	; 0x73
 80062de:	f000 809d 	beq.w	800641c <_printf_i+0x1a4>
 80062e2:	d808      	bhi.n	80062f6 <_printf_i+0x7e>
 80062e4:	296f      	cmp	r1, #111	; 0x6f
 80062e6:	d020      	beq.n	800632a <_printf_i+0xb2>
 80062e8:	2970      	cmp	r1, #112	; 0x70
 80062ea:	d1dd      	bne.n	80062a8 <_printf_i+0x30>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	f043 0320 	orr.w	r3, r3, #32
 80062f2:	6023      	str	r3, [r4, #0]
 80062f4:	e003      	b.n	80062fe <_printf_i+0x86>
 80062f6:	2975      	cmp	r1, #117	; 0x75
 80062f8:	d017      	beq.n	800632a <_printf_i+0xb2>
 80062fa:	2978      	cmp	r1, #120	; 0x78
 80062fc:	d1d4      	bne.n	80062a8 <_printf_i+0x30>
 80062fe:	2378      	movs	r3, #120	; 0x78
 8006300:	4865      	ldr	r0, [pc, #404]	; (8006498 <_printf_i+0x220>)
 8006302:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006306:	e055      	b.n	80063b4 <_printf_i+0x13c>
 8006308:	6813      	ldr	r3, [r2, #0]
 800630a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800630e:	1d19      	adds	r1, r3, #4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6011      	str	r1, [r2, #0]
 8006314:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006318:	2301      	movs	r3, #1
 800631a:	e08c      	b.n	8006436 <_printf_i+0x1be>
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006322:	6011      	str	r1, [r2, #0]
 8006324:	bf18      	it	ne
 8006326:	b21b      	sxthne	r3, r3
 8006328:	e7cf      	b.n	80062ca <_printf_i+0x52>
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	6825      	ldr	r5, [r4, #0]
 800632e:	1d18      	adds	r0, r3, #4
 8006330:	6010      	str	r0, [r2, #0]
 8006332:	0628      	lsls	r0, r5, #24
 8006334:	d501      	bpl.n	800633a <_printf_i+0xc2>
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	e002      	b.n	8006340 <_printf_i+0xc8>
 800633a:	0668      	lsls	r0, r5, #25
 800633c:	d5fb      	bpl.n	8006336 <_printf_i+0xbe>
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	296f      	cmp	r1, #111	; 0x6f
 8006342:	bf14      	ite	ne
 8006344:	220a      	movne	r2, #10
 8006346:	2208      	moveq	r2, #8
 8006348:	4852      	ldr	r0, [pc, #328]	; (8006494 <_printf_i+0x21c>)
 800634a:	2100      	movs	r1, #0
 800634c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006350:	6865      	ldr	r5, [r4, #4]
 8006352:	2d00      	cmp	r5, #0
 8006354:	60a5      	str	r5, [r4, #8]
 8006356:	f2c0 8095 	blt.w	8006484 <_printf_i+0x20c>
 800635a:	6821      	ldr	r1, [r4, #0]
 800635c:	f021 0104 	bic.w	r1, r1, #4
 8006360:	6021      	str	r1, [r4, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d13d      	bne.n	80063e2 <_printf_i+0x16a>
 8006366:	2d00      	cmp	r5, #0
 8006368:	f040 808e 	bne.w	8006488 <_printf_i+0x210>
 800636c:	4665      	mov	r5, ip
 800636e:	2a08      	cmp	r2, #8
 8006370:	d10b      	bne.n	800638a <_printf_i+0x112>
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	07db      	lsls	r3, r3, #31
 8006376:	d508      	bpl.n	800638a <_printf_i+0x112>
 8006378:	6923      	ldr	r3, [r4, #16]
 800637a:	6862      	ldr	r2, [r4, #4]
 800637c:	429a      	cmp	r2, r3
 800637e:	bfde      	ittt	le
 8006380:	2330      	movle	r3, #48	; 0x30
 8006382:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006386:	f105 35ff 	addle.w	r5, r5, #4294967295
 800638a:	ebac 0305 	sub.w	r3, ip, r5
 800638e:	6123      	str	r3, [r4, #16]
 8006390:	f8cd 8000 	str.w	r8, [sp]
 8006394:	463b      	mov	r3, r7
 8006396:	aa03      	add	r2, sp, #12
 8006398:	4621      	mov	r1, r4
 800639a:	4630      	mov	r0, r6
 800639c:	f7ff fef6 	bl	800618c <_printf_common>
 80063a0:	3001      	adds	r0, #1
 80063a2:	d14d      	bne.n	8006440 <_printf_i+0x1c8>
 80063a4:	f04f 30ff 	mov.w	r0, #4294967295
 80063a8:	b005      	add	sp, #20
 80063aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063ae:	4839      	ldr	r0, [pc, #228]	; (8006494 <_printf_i+0x21c>)
 80063b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80063b4:	6813      	ldr	r3, [r2, #0]
 80063b6:	6821      	ldr	r1, [r4, #0]
 80063b8:	1d1d      	adds	r5, r3, #4
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6015      	str	r5, [r2, #0]
 80063be:	060a      	lsls	r2, r1, #24
 80063c0:	d50b      	bpl.n	80063da <_printf_i+0x162>
 80063c2:	07ca      	lsls	r2, r1, #31
 80063c4:	bf44      	itt	mi
 80063c6:	f041 0120 	orrmi.w	r1, r1, #32
 80063ca:	6021      	strmi	r1, [r4, #0]
 80063cc:	b91b      	cbnz	r3, 80063d6 <_printf_i+0x15e>
 80063ce:	6822      	ldr	r2, [r4, #0]
 80063d0:	f022 0220 	bic.w	r2, r2, #32
 80063d4:	6022      	str	r2, [r4, #0]
 80063d6:	2210      	movs	r2, #16
 80063d8:	e7b7      	b.n	800634a <_printf_i+0xd2>
 80063da:	064d      	lsls	r5, r1, #25
 80063dc:	bf48      	it	mi
 80063de:	b29b      	uxthmi	r3, r3
 80063e0:	e7ef      	b.n	80063c2 <_printf_i+0x14a>
 80063e2:	4665      	mov	r5, ip
 80063e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80063e8:	fb02 3311 	mls	r3, r2, r1, r3
 80063ec:	5cc3      	ldrb	r3, [r0, r3]
 80063ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80063f2:	460b      	mov	r3, r1
 80063f4:	2900      	cmp	r1, #0
 80063f6:	d1f5      	bne.n	80063e4 <_printf_i+0x16c>
 80063f8:	e7b9      	b.n	800636e <_printf_i+0xf6>
 80063fa:	6813      	ldr	r3, [r2, #0]
 80063fc:	6825      	ldr	r5, [r4, #0]
 80063fe:	1d18      	adds	r0, r3, #4
 8006400:	6961      	ldr	r1, [r4, #20]
 8006402:	6010      	str	r0, [r2, #0]
 8006404:	0628      	lsls	r0, r5, #24
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	d501      	bpl.n	800640e <_printf_i+0x196>
 800640a:	6019      	str	r1, [r3, #0]
 800640c:	e002      	b.n	8006414 <_printf_i+0x19c>
 800640e:	066a      	lsls	r2, r5, #25
 8006410:	d5fb      	bpl.n	800640a <_printf_i+0x192>
 8006412:	8019      	strh	r1, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	4665      	mov	r5, ip
 8006418:	6123      	str	r3, [r4, #16]
 800641a:	e7b9      	b.n	8006390 <_printf_i+0x118>
 800641c:	6813      	ldr	r3, [r2, #0]
 800641e:	1d19      	adds	r1, r3, #4
 8006420:	6011      	str	r1, [r2, #0]
 8006422:	681d      	ldr	r5, [r3, #0]
 8006424:	6862      	ldr	r2, [r4, #4]
 8006426:	2100      	movs	r1, #0
 8006428:	4628      	mov	r0, r5
 800642a:	f000 feaf 	bl	800718c <memchr>
 800642e:	b108      	cbz	r0, 8006434 <_printf_i+0x1bc>
 8006430:	1b40      	subs	r0, r0, r5
 8006432:	6060      	str	r0, [r4, #4]
 8006434:	6863      	ldr	r3, [r4, #4]
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	2300      	movs	r3, #0
 800643a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643e:	e7a7      	b.n	8006390 <_printf_i+0x118>
 8006440:	6923      	ldr	r3, [r4, #16]
 8006442:	462a      	mov	r2, r5
 8006444:	4639      	mov	r1, r7
 8006446:	4630      	mov	r0, r6
 8006448:	47c0      	blx	r8
 800644a:	3001      	adds	r0, #1
 800644c:	d0aa      	beq.n	80063a4 <_printf_i+0x12c>
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	079b      	lsls	r3, r3, #30
 8006452:	d413      	bmi.n	800647c <_printf_i+0x204>
 8006454:	68e0      	ldr	r0, [r4, #12]
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	4298      	cmp	r0, r3
 800645a:	bfb8      	it	lt
 800645c:	4618      	movlt	r0, r3
 800645e:	e7a3      	b.n	80063a8 <_printf_i+0x130>
 8006460:	2301      	movs	r3, #1
 8006462:	464a      	mov	r2, r9
 8006464:	4639      	mov	r1, r7
 8006466:	4630      	mov	r0, r6
 8006468:	47c0      	blx	r8
 800646a:	3001      	adds	r0, #1
 800646c:	d09a      	beq.n	80063a4 <_printf_i+0x12c>
 800646e:	3501      	adds	r5, #1
 8006470:	68e3      	ldr	r3, [r4, #12]
 8006472:	9a03      	ldr	r2, [sp, #12]
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	42ab      	cmp	r3, r5
 8006478:	dcf2      	bgt.n	8006460 <_printf_i+0x1e8>
 800647a:	e7eb      	b.n	8006454 <_printf_i+0x1dc>
 800647c:	2500      	movs	r5, #0
 800647e:	f104 0919 	add.w	r9, r4, #25
 8006482:	e7f5      	b.n	8006470 <_printf_i+0x1f8>
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1ac      	bne.n	80063e2 <_printf_i+0x16a>
 8006488:	7803      	ldrb	r3, [r0, #0]
 800648a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800648e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006492:	e76c      	b.n	800636e <_printf_i+0xf6>
 8006494:	08008fe2 	.word	0x08008fe2
 8006498:	08008ff3 	.word	0x08008ff3

0800649c <siprintf>:
 800649c:	b40e      	push	{r1, r2, r3}
 800649e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064a2:	b500      	push	{lr}
 80064a4:	b09c      	sub	sp, #112	; 0x70
 80064a6:	ab1d      	add	r3, sp, #116	; 0x74
 80064a8:	9002      	str	r0, [sp, #8]
 80064aa:	9006      	str	r0, [sp, #24]
 80064ac:	9107      	str	r1, [sp, #28]
 80064ae:	9104      	str	r1, [sp, #16]
 80064b0:	4808      	ldr	r0, [pc, #32]	; (80064d4 <siprintf+0x38>)
 80064b2:	4909      	ldr	r1, [pc, #36]	; (80064d8 <siprintf+0x3c>)
 80064b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064b8:	9105      	str	r1, [sp, #20]
 80064ba:	6800      	ldr	r0, [r0, #0]
 80064bc:	a902      	add	r1, sp, #8
 80064be:	9301      	str	r3, [sp, #4]
 80064c0:	f001 fa68 	bl	8007994 <_svfiprintf_r>
 80064c4:	2200      	movs	r2, #0
 80064c6:	9b02      	ldr	r3, [sp, #8]
 80064c8:	701a      	strb	r2, [r3, #0]
 80064ca:	b01c      	add	sp, #112	; 0x70
 80064cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d0:	b003      	add	sp, #12
 80064d2:	4770      	bx	lr
 80064d4:	20000014 	.word	0x20000014
 80064d8:	ffff0208 	.word	0xffff0208

080064dc <quorem>:
 80064dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064e0:	6903      	ldr	r3, [r0, #16]
 80064e2:	690c      	ldr	r4, [r1, #16]
 80064e4:	4680      	mov	r8, r0
 80064e6:	42a3      	cmp	r3, r4
 80064e8:	f2c0 8084 	blt.w	80065f4 <quorem+0x118>
 80064ec:	3c01      	subs	r4, #1
 80064ee:	f101 0714 	add.w	r7, r1, #20
 80064f2:	f100 0614 	add.w	r6, r0, #20
 80064f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80064fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80064fe:	3501      	adds	r5, #1
 8006500:	fbb0 f5f5 	udiv	r5, r0, r5
 8006504:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006508:	eb06 030c 	add.w	r3, r6, ip
 800650c:	eb07 090c 	add.w	r9, r7, ip
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	b39d      	cbz	r5, 800657c <quorem+0xa0>
 8006514:	f04f 0a00 	mov.w	sl, #0
 8006518:	4638      	mov	r0, r7
 800651a:	46b6      	mov	lr, r6
 800651c:	46d3      	mov	fp, sl
 800651e:	f850 2b04 	ldr.w	r2, [r0], #4
 8006522:	b293      	uxth	r3, r2
 8006524:	fb05 a303 	mla	r3, r5, r3, sl
 8006528:	0c12      	lsrs	r2, r2, #16
 800652a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800652e:	fb05 a202 	mla	r2, r5, r2, sl
 8006532:	b29b      	uxth	r3, r3
 8006534:	ebab 0303 	sub.w	r3, fp, r3
 8006538:	f8de b000 	ldr.w	fp, [lr]
 800653c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006540:	fa1f fb8b 	uxth.w	fp, fp
 8006544:	445b      	add	r3, fp
 8006546:	fa1f fb82 	uxth.w	fp, r2
 800654a:	f8de 2000 	ldr.w	r2, [lr]
 800654e:	4581      	cmp	r9, r0
 8006550:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006558:	b29b      	uxth	r3, r3
 800655a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800655e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006562:	f84e 3b04 	str.w	r3, [lr], #4
 8006566:	d2da      	bcs.n	800651e <quorem+0x42>
 8006568:	f856 300c 	ldr.w	r3, [r6, ip]
 800656c:	b933      	cbnz	r3, 800657c <quorem+0xa0>
 800656e:	9b01      	ldr	r3, [sp, #4]
 8006570:	3b04      	subs	r3, #4
 8006572:	429e      	cmp	r6, r3
 8006574:	461a      	mov	r2, r3
 8006576:	d331      	bcc.n	80065dc <quorem+0x100>
 8006578:	f8c8 4010 	str.w	r4, [r8, #16]
 800657c:	4640      	mov	r0, r8
 800657e:	f001 f833 	bl	80075e8 <__mcmp>
 8006582:	2800      	cmp	r0, #0
 8006584:	db26      	blt.n	80065d4 <quorem+0xf8>
 8006586:	4630      	mov	r0, r6
 8006588:	f04f 0c00 	mov.w	ip, #0
 800658c:	3501      	adds	r5, #1
 800658e:	f857 1b04 	ldr.w	r1, [r7], #4
 8006592:	f8d0 e000 	ldr.w	lr, [r0]
 8006596:	b28b      	uxth	r3, r1
 8006598:	ebac 0303 	sub.w	r3, ip, r3
 800659c:	fa1f f28e 	uxth.w	r2, lr
 80065a0:	4413      	add	r3, r2
 80065a2:	0c0a      	lsrs	r2, r1, #16
 80065a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80065a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065b2:	45b9      	cmp	r9, r7
 80065b4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80065b8:	f840 3b04 	str.w	r3, [r0], #4
 80065bc:	d2e7      	bcs.n	800658e <quorem+0xb2>
 80065be:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80065c2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80065c6:	b92a      	cbnz	r2, 80065d4 <quorem+0xf8>
 80065c8:	3b04      	subs	r3, #4
 80065ca:	429e      	cmp	r6, r3
 80065cc:	461a      	mov	r2, r3
 80065ce:	d30b      	bcc.n	80065e8 <quorem+0x10c>
 80065d0:	f8c8 4010 	str.w	r4, [r8, #16]
 80065d4:	4628      	mov	r0, r5
 80065d6:	b003      	add	sp, #12
 80065d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065dc:	6812      	ldr	r2, [r2, #0]
 80065de:	3b04      	subs	r3, #4
 80065e0:	2a00      	cmp	r2, #0
 80065e2:	d1c9      	bne.n	8006578 <quorem+0x9c>
 80065e4:	3c01      	subs	r4, #1
 80065e6:	e7c4      	b.n	8006572 <quorem+0x96>
 80065e8:	6812      	ldr	r2, [r2, #0]
 80065ea:	3b04      	subs	r3, #4
 80065ec:	2a00      	cmp	r2, #0
 80065ee:	d1ef      	bne.n	80065d0 <quorem+0xf4>
 80065f0:	3c01      	subs	r4, #1
 80065f2:	e7ea      	b.n	80065ca <quorem+0xee>
 80065f4:	2000      	movs	r0, #0
 80065f6:	e7ee      	b.n	80065d6 <quorem+0xfa>

080065f8 <_dtoa_r>:
 80065f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065fc:	4616      	mov	r6, r2
 80065fe:	461f      	mov	r7, r3
 8006600:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006602:	b095      	sub	sp, #84	; 0x54
 8006604:	4604      	mov	r4, r0
 8006606:	f8dd 8084 	ldr.w	r8, [sp, #132]	; 0x84
 800660a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800660e:	b93d      	cbnz	r5, 8006620 <_dtoa_r+0x28>
 8006610:	2010      	movs	r0, #16
 8006612:	f000 fdb3 	bl	800717c <malloc>
 8006616:	6260      	str	r0, [r4, #36]	; 0x24
 8006618:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800661c:	6005      	str	r5, [r0, #0]
 800661e:	60c5      	str	r5, [r0, #12]
 8006620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006622:	6819      	ldr	r1, [r3, #0]
 8006624:	b151      	cbz	r1, 800663c <_dtoa_r+0x44>
 8006626:	685a      	ldr	r2, [r3, #4]
 8006628:	2301      	movs	r3, #1
 800662a:	4093      	lsls	r3, r2
 800662c:	604a      	str	r2, [r1, #4]
 800662e:	608b      	str	r3, [r1, #8]
 8006630:	4620      	mov	r0, r4
 8006632:	f000 fdf8 	bl	8007226 <_Bfree>
 8006636:	2200      	movs	r2, #0
 8006638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800663a:	601a      	str	r2, [r3, #0]
 800663c:	1e3b      	subs	r3, r7, #0
 800663e:	bfaf      	iteee	ge
 8006640:	2300      	movge	r3, #0
 8006642:	2201      	movlt	r2, #1
 8006644:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006648:	9303      	strlt	r3, [sp, #12]
 800664a:	bfac      	ite	ge
 800664c:	f8c8 3000 	strge.w	r3, [r8]
 8006650:	f8c8 2000 	strlt.w	r2, [r8]
 8006654:	4bae      	ldr	r3, [pc, #696]	; (8006910 <_dtoa_r+0x318>)
 8006656:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800665a:	ea33 0308 	bics.w	r3, r3, r8
 800665e:	d11b      	bne.n	8006698 <_dtoa_r+0xa0>
 8006660:	f242 730f 	movw	r3, #9999	; 0x270f
 8006664:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006666:	6013      	str	r3, [r2, #0]
 8006668:	9b02      	ldr	r3, [sp, #8]
 800666a:	b923      	cbnz	r3, 8006676 <_dtoa_r+0x7e>
 800666c:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006670:	2800      	cmp	r0, #0
 8006672:	f000 8545 	beq.w	8007100 <_dtoa_r+0xb08>
 8006676:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006678:	b953      	cbnz	r3, 8006690 <_dtoa_r+0x98>
 800667a:	4ba6      	ldr	r3, [pc, #664]	; (8006914 <_dtoa_r+0x31c>)
 800667c:	e021      	b.n	80066c2 <_dtoa_r+0xca>
 800667e:	4ba6      	ldr	r3, [pc, #664]	; (8006918 <_dtoa_r+0x320>)
 8006680:	9306      	str	r3, [sp, #24]
 8006682:	3308      	adds	r3, #8
 8006684:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	9806      	ldr	r0, [sp, #24]
 800668a:	b015      	add	sp, #84	; 0x54
 800668c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006690:	4ba0      	ldr	r3, [pc, #640]	; (8006914 <_dtoa_r+0x31c>)
 8006692:	9306      	str	r3, [sp, #24]
 8006694:	3303      	adds	r3, #3
 8006696:	e7f5      	b.n	8006684 <_dtoa_r+0x8c>
 8006698:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800669c:	2200      	movs	r2, #0
 800669e:	2300      	movs	r3, #0
 80066a0:	4630      	mov	r0, r6
 80066a2:	4639      	mov	r1, r7
 80066a4:	f7fa f980 	bl	80009a8 <__aeabi_dcmpeq>
 80066a8:	4682      	mov	sl, r0
 80066aa:	b160      	cbz	r0, 80066c6 <_dtoa_r+0xce>
 80066ac:	2301      	movs	r3, #1
 80066ae:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80066b0:	6013      	str	r3, [r2, #0]
 80066b2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 8520 	beq.w	80070fa <_dtoa_r+0xb02>
 80066ba:	4b98      	ldr	r3, [pc, #608]	; (800691c <_dtoa_r+0x324>)
 80066bc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	3b01      	subs	r3, #1
 80066c2:	9306      	str	r3, [sp, #24]
 80066c4:	e7e0      	b.n	8006688 <_dtoa_r+0x90>
 80066c6:	ab12      	add	r3, sp, #72	; 0x48
 80066c8:	9301      	str	r3, [sp, #4]
 80066ca:	ab13      	add	r3, sp, #76	; 0x4c
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	4632      	mov	r2, r6
 80066d0:	463b      	mov	r3, r7
 80066d2:	4620      	mov	r0, r4
 80066d4:	f001 f800 	bl	80076d8 <__d2b>
 80066d8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80066dc:	4683      	mov	fp, r0
 80066de:	2d00      	cmp	r5, #0
 80066e0:	d07d      	beq.n	80067de <_dtoa_r+0x1e6>
 80066e2:	46b0      	mov	r8, r6
 80066e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066e8:	f043 597f 	orr.w	r9, r3, #1069547520	; 0x3fc00000
 80066ec:	f449 1940 	orr.w	r9, r9, #3145728	; 0x300000
 80066f0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80066f4:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80066f8:	2200      	movs	r2, #0
 80066fa:	4b89      	ldr	r3, [pc, #548]	; (8006920 <_dtoa_r+0x328>)
 80066fc:	4640      	mov	r0, r8
 80066fe:	4649      	mov	r1, r9
 8006700:	f7f9 fd32 	bl	8000168 <__aeabi_dsub>
 8006704:	a37c      	add	r3, pc, #496	; (adr r3, 80068f8 <_dtoa_r+0x300>)
 8006706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800670a:	f7f9 fee5 	bl	80004d8 <__aeabi_dmul>
 800670e:	a37c      	add	r3, pc, #496	; (adr r3, 8006900 <_dtoa_r+0x308>)
 8006710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006714:	f7f9 fd2a 	bl	800016c <__adddf3>
 8006718:	4606      	mov	r6, r0
 800671a:	4628      	mov	r0, r5
 800671c:	460f      	mov	r7, r1
 800671e:	f7f9 fe71 	bl	8000404 <__aeabi_i2d>
 8006722:	a379      	add	r3, pc, #484	; (adr r3, 8006908 <_dtoa_r+0x310>)
 8006724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006728:	f7f9 fed6 	bl	80004d8 <__aeabi_dmul>
 800672c:	4602      	mov	r2, r0
 800672e:	460b      	mov	r3, r1
 8006730:	4630      	mov	r0, r6
 8006732:	4639      	mov	r1, r7
 8006734:	f7f9 fd1a 	bl	800016c <__adddf3>
 8006738:	4606      	mov	r6, r0
 800673a:	460f      	mov	r7, r1
 800673c:	f7fa f97c 	bl	8000a38 <__aeabi_d2iz>
 8006740:	2200      	movs	r2, #0
 8006742:	4682      	mov	sl, r0
 8006744:	2300      	movs	r3, #0
 8006746:	4630      	mov	r0, r6
 8006748:	4639      	mov	r1, r7
 800674a:	f7fa f937 	bl	80009bc <__aeabi_dcmplt>
 800674e:	b148      	cbz	r0, 8006764 <_dtoa_r+0x16c>
 8006750:	4650      	mov	r0, sl
 8006752:	f7f9 fe57 	bl	8000404 <__aeabi_i2d>
 8006756:	4632      	mov	r2, r6
 8006758:	463b      	mov	r3, r7
 800675a:	f7fa f925 	bl	80009a8 <__aeabi_dcmpeq>
 800675e:	b908      	cbnz	r0, 8006764 <_dtoa_r+0x16c>
 8006760:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006764:	f1ba 0f16 	cmp.w	sl, #22
 8006768:	d85a      	bhi.n	8006820 <_dtoa_r+0x228>
 800676a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800676e:	496d      	ldr	r1, [pc, #436]	; (8006924 <_dtoa_r+0x32c>)
 8006770:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006774:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006778:	f7fa f93e 	bl	80009f8 <__aeabi_dcmpgt>
 800677c:	2800      	cmp	r0, #0
 800677e:	d051      	beq.n	8006824 <_dtoa_r+0x22c>
 8006780:	2300      	movs	r3, #0
 8006782:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006786:	930d      	str	r3, [sp, #52]	; 0x34
 8006788:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800678a:	1b5d      	subs	r5, r3, r5
 800678c:	1e6b      	subs	r3, r5, #1
 800678e:	9307      	str	r3, [sp, #28]
 8006790:	bf43      	ittte	mi
 8006792:	2300      	movmi	r3, #0
 8006794:	f1c5 0901 	rsbmi	r9, r5, #1
 8006798:	9307      	strmi	r3, [sp, #28]
 800679a:	f04f 0900 	movpl.w	r9, #0
 800679e:	f1ba 0f00 	cmp.w	sl, #0
 80067a2:	db41      	blt.n	8006828 <_dtoa_r+0x230>
 80067a4:	9b07      	ldr	r3, [sp, #28]
 80067a6:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80067aa:	4453      	add	r3, sl
 80067ac:	9307      	str	r3, [sp, #28]
 80067ae:	2300      	movs	r3, #0
 80067b0:	9308      	str	r3, [sp, #32]
 80067b2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067b4:	2b09      	cmp	r3, #9
 80067b6:	f200 808f 	bhi.w	80068d8 <_dtoa_r+0x2e0>
 80067ba:	2b05      	cmp	r3, #5
 80067bc:	bfc4      	itt	gt
 80067be:	3b04      	subgt	r3, #4
 80067c0:	931e      	strgt	r3, [sp, #120]	; 0x78
 80067c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80067c4:	bfc8      	it	gt
 80067c6:	2500      	movgt	r5, #0
 80067c8:	f1a3 0302 	sub.w	r3, r3, #2
 80067cc:	bfd8      	it	le
 80067ce:	2501      	movle	r5, #1
 80067d0:	2b03      	cmp	r3, #3
 80067d2:	f200 808d 	bhi.w	80068f0 <_dtoa_r+0x2f8>
 80067d6:	e8df f003 	tbb	[pc, r3]
 80067da:	7d7b      	.short	0x7d7b
 80067dc:	6f2f      	.short	0x6f2f
 80067de:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80067e2:	441d      	add	r5, r3
 80067e4:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80067e8:	2820      	cmp	r0, #32
 80067ea:	dd13      	ble.n	8006814 <_dtoa_r+0x21c>
 80067ec:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80067f0:	9b02      	ldr	r3, [sp, #8]
 80067f2:	fa08 f800 	lsl.w	r8, r8, r0
 80067f6:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80067fa:	fa23 f000 	lsr.w	r0, r3, r0
 80067fe:	ea48 0000 	orr.w	r0, r8, r0
 8006802:	f7f9 fdef 	bl	80003e4 <__aeabi_ui2d>
 8006806:	2301      	movs	r3, #1
 8006808:	4680      	mov	r8, r0
 800680a:	f1a1 79f8 	sub.w	r9, r1, #32505856	; 0x1f00000
 800680e:	3d01      	subs	r5, #1
 8006810:	9310      	str	r3, [sp, #64]	; 0x40
 8006812:	e771      	b.n	80066f8 <_dtoa_r+0x100>
 8006814:	9b02      	ldr	r3, [sp, #8]
 8006816:	f1c0 0020 	rsb	r0, r0, #32
 800681a:	fa03 f000 	lsl.w	r0, r3, r0
 800681e:	e7f0      	b.n	8006802 <_dtoa_r+0x20a>
 8006820:	2301      	movs	r3, #1
 8006822:	e7b0      	b.n	8006786 <_dtoa_r+0x18e>
 8006824:	900d      	str	r0, [sp, #52]	; 0x34
 8006826:	e7af      	b.n	8006788 <_dtoa_r+0x190>
 8006828:	f1ca 0300 	rsb	r3, sl, #0
 800682c:	9308      	str	r3, [sp, #32]
 800682e:	2300      	movs	r3, #0
 8006830:	eba9 090a 	sub.w	r9, r9, sl
 8006834:	930c      	str	r3, [sp, #48]	; 0x30
 8006836:	e7bc      	b.n	80067b2 <_dtoa_r+0x1ba>
 8006838:	2301      	movs	r3, #1
 800683a:	9309      	str	r3, [sp, #36]	; 0x24
 800683c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800683e:	2b00      	cmp	r3, #0
 8006840:	dd74      	ble.n	800692c <_dtoa_r+0x334>
 8006842:	4698      	mov	r8, r3
 8006844:	9304      	str	r3, [sp, #16]
 8006846:	2200      	movs	r2, #0
 8006848:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800684a:	6072      	str	r2, [r6, #4]
 800684c:	2204      	movs	r2, #4
 800684e:	f102 0014 	add.w	r0, r2, #20
 8006852:	4298      	cmp	r0, r3
 8006854:	6871      	ldr	r1, [r6, #4]
 8006856:	d96e      	bls.n	8006936 <_dtoa_r+0x33e>
 8006858:	4620      	mov	r0, r4
 800685a:	f000 fcb0 	bl	80071be <_Balloc>
 800685e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006860:	6030      	str	r0, [r6, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f1b8 0f0e 	cmp.w	r8, #14
 8006868:	9306      	str	r3, [sp, #24]
 800686a:	f200 80ed 	bhi.w	8006a48 <_dtoa_r+0x450>
 800686e:	2d00      	cmp	r5, #0
 8006870:	f000 80ea 	beq.w	8006a48 <_dtoa_r+0x450>
 8006874:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006878:	f1ba 0f00 	cmp.w	sl, #0
 800687c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8006880:	dd77      	ble.n	8006972 <_dtoa_r+0x37a>
 8006882:	4a28      	ldr	r2, [pc, #160]	; (8006924 <_dtoa_r+0x32c>)
 8006884:	f00a 030f 	and.w	r3, sl, #15
 8006888:	ea4f 162a 	mov.w	r6, sl, asr #4
 800688c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006890:	06f0      	lsls	r0, r6, #27
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800689a:	d568      	bpl.n	800696e <_dtoa_r+0x376>
 800689c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80068a0:	4b21      	ldr	r3, [pc, #132]	; (8006928 <_dtoa_r+0x330>)
 80068a2:	2503      	movs	r5, #3
 80068a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80068a8:	f7f9 ff40 	bl	800072c <__aeabi_ddiv>
 80068ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068b0:	f006 060f 	and.w	r6, r6, #15
 80068b4:	4f1c      	ldr	r7, [pc, #112]	; (8006928 <_dtoa_r+0x330>)
 80068b6:	e04f      	b.n	8006958 <_dtoa_r+0x360>
 80068b8:	2301      	movs	r3, #1
 80068ba:	9309      	str	r3, [sp, #36]	; 0x24
 80068bc:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80068be:	4453      	add	r3, sl
 80068c0:	f103 0801 	add.w	r8, r3, #1
 80068c4:	9304      	str	r3, [sp, #16]
 80068c6:	4643      	mov	r3, r8
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	bfb8      	it	lt
 80068cc:	2301      	movlt	r3, #1
 80068ce:	e7ba      	b.n	8006846 <_dtoa_r+0x24e>
 80068d0:	2300      	movs	r3, #0
 80068d2:	e7b2      	b.n	800683a <_dtoa_r+0x242>
 80068d4:	2300      	movs	r3, #0
 80068d6:	e7f0      	b.n	80068ba <_dtoa_r+0x2c2>
 80068d8:	2501      	movs	r5, #1
 80068da:	2300      	movs	r3, #0
 80068dc:	9509      	str	r5, [sp, #36]	; 0x24
 80068de:	931e      	str	r3, [sp, #120]	; 0x78
 80068e0:	f04f 33ff 	mov.w	r3, #4294967295
 80068e4:	2200      	movs	r2, #0
 80068e6:	9304      	str	r3, [sp, #16]
 80068e8:	4698      	mov	r8, r3
 80068ea:	2312      	movs	r3, #18
 80068ec:	921f      	str	r2, [sp, #124]	; 0x7c
 80068ee:	e7aa      	b.n	8006846 <_dtoa_r+0x24e>
 80068f0:	2301      	movs	r3, #1
 80068f2:	9309      	str	r3, [sp, #36]	; 0x24
 80068f4:	e7f4      	b.n	80068e0 <_dtoa_r+0x2e8>
 80068f6:	bf00      	nop
 80068f8:	636f4361 	.word	0x636f4361
 80068fc:	3fd287a7 	.word	0x3fd287a7
 8006900:	8b60c8b3 	.word	0x8b60c8b3
 8006904:	3fc68a28 	.word	0x3fc68a28
 8006908:	509f79fb 	.word	0x509f79fb
 800690c:	3fd34413 	.word	0x3fd34413
 8006910:	7ff00000 	.word	0x7ff00000
 8006914:	0800900d 	.word	0x0800900d
 8006918:	08009004 	.word	0x08009004
 800691c:	08008fe1 	.word	0x08008fe1
 8006920:	3ff80000 	.word	0x3ff80000
 8006924:	08009040 	.word	0x08009040
 8006928:	08009018 	.word	0x08009018
 800692c:	2301      	movs	r3, #1
 800692e:	9304      	str	r3, [sp, #16]
 8006930:	4698      	mov	r8, r3
 8006932:	461a      	mov	r2, r3
 8006934:	e7da      	b.n	80068ec <_dtoa_r+0x2f4>
 8006936:	3101      	adds	r1, #1
 8006938:	6071      	str	r1, [r6, #4]
 800693a:	0052      	lsls	r2, r2, #1
 800693c:	e787      	b.n	800684e <_dtoa_r+0x256>
 800693e:	07f1      	lsls	r1, r6, #31
 8006940:	d508      	bpl.n	8006954 <_dtoa_r+0x35c>
 8006942:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800694a:	f7f9 fdc5 	bl	80004d8 <__aeabi_dmul>
 800694e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006952:	3501      	adds	r5, #1
 8006954:	1076      	asrs	r6, r6, #1
 8006956:	3708      	adds	r7, #8
 8006958:	2e00      	cmp	r6, #0
 800695a:	d1f0      	bne.n	800693e <_dtoa_r+0x346>
 800695c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006960:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006964:	f7f9 fee2 	bl	800072c <__aeabi_ddiv>
 8006968:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800696c:	e01b      	b.n	80069a6 <_dtoa_r+0x3ae>
 800696e:	2502      	movs	r5, #2
 8006970:	e7a0      	b.n	80068b4 <_dtoa_r+0x2bc>
 8006972:	f000 80a4 	beq.w	8006abe <_dtoa_r+0x4c6>
 8006976:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800697a:	f1ca 0600 	rsb	r6, sl, #0
 800697e:	4ba0      	ldr	r3, [pc, #640]	; (8006c00 <_dtoa_r+0x608>)
 8006980:	f006 020f 	and.w	r2, r6, #15
 8006984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800698c:	f7f9 fda4 	bl	80004d8 <__aeabi_dmul>
 8006990:	2502      	movs	r5, #2
 8006992:	2300      	movs	r3, #0
 8006994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006998:	4f9a      	ldr	r7, [pc, #616]	; (8006c04 <_dtoa_r+0x60c>)
 800699a:	1136      	asrs	r6, r6, #4
 800699c:	2e00      	cmp	r6, #0
 800699e:	f040 8083 	bne.w	8006aa8 <_dtoa_r+0x4b0>
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e0      	bne.n	8006968 <_dtoa_r+0x370>
 80069a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 808a 	beq.w	8006ac2 <_dtoa_r+0x4ca>
 80069ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069b2:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80069b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069ba:	2200      	movs	r2, #0
 80069bc:	4b92      	ldr	r3, [pc, #584]	; (8006c08 <_dtoa_r+0x610>)
 80069be:	f7f9 fffd 	bl	80009bc <__aeabi_dcmplt>
 80069c2:	2800      	cmp	r0, #0
 80069c4:	d07d      	beq.n	8006ac2 <_dtoa_r+0x4ca>
 80069c6:	f1b8 0f00 	cmp.w	r8, #0
 80069ca:	d07a      	beq.n	8006ac2 <_dtoa_r+0x4ca>
 80069cc:	9b04      	ldr	r3, [sp, #16]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	dd36      	ble.n	8006a40 <_dtoa_r+0x448>
 80069d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80069d6:	2200      	movs	r2, #0
 80069d8:	4b8c      	ldr	r3, [pc, #560]	; (8006c0c <_dtoa_r+0x614>)
 80069da:	f7f9 fd7d 	bl	80004d8 <__aeabi_dmul>
 80069de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069e2:	9e04      	ldr	r6, [sp, #16]
 80069e4:	f10a 37ff 	add.w	r7, sl, #4294967295
 80069e8:	3501      	adds	r5, #1
 80069ea:	4628      	mov	r0, r5
 80069ec:	f7f9 fd0a 	bl	8000404 <__aeabi_i2d>
 80069f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069f4:	f7f9 fd70 	bl	80004d8 <__aeabi_dmul>
 80069f8:	2200      	movs	r2, #0
 80069fa:	4b85      	ldr	r3, [pc, #532]	; (8006c10 <_dtoa_r+0x618>)
 80069fc:	f7f9 fbb6 	bl	800016c <__adddf3>
 8006a00:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8006a04:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006a08:	950b      	str	r5, [sp, #44]	; 0x2c
 8006a0a:	2e00      	cmp	r6, #0
 8006a0c:	d15c      	bne.n	8006ac8 <_dtoa_r+0x4d0>
 8006a0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a12:	2200      	movs	r2, #0
 8006a14:	4b7f      	ldr	r3, [pc, #508]	; (8006c14 <_dtoa_r+0x61c>)
 8006a16:	f7f9 fba7 	bl	8000168 <__aeabi_dsub>
 8006a1a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a1c:	462b      	mov	r3, r5
 8006a1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a22:	f7f9 ffe9 	bl	80009f8 <__aeabi_dcmpgt>
 8006a26:	2800      	cmp	r0, #0
 8006a28:	f040 8281 	bne.w	8006f2e <_dtoa_r+0x936>
 8006a2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a32:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8006a36:	f7f9 ffc1 	bl	80009bc <__aeabi_dcmplt>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f040 8275 	bne.w	8006f2a <_dtoa_r+0x932>
 8006a40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f2c0 814b 	blt.w	8006ce6 <_dtoa_r+0x6ee>
 8006a50:	f1ba 0f0e 	cmp.w	sl, #14
 8006a54:	f300 8147 	bgt.w	8006ce6 <_dtoa_r+0x6ee>
 8006a58:	4b69      	ldr	r3, [pc, #420]	; (8006c00 <_dtoa_r+0x608>)
 8006a5a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8006a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a66:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	f280 80d7 	bge.w	8006c1c <_dtoa_r+0x624>
 8006a6e:	f1b8 0f00 	cmp.w	r8, #0
 8006a72:	f300 80d3 	bgt.w	8006c1c <_dtoa_r+0x624>
 8006a76:	f040 8257 	bne.w	8006f28 <_dtoa_r+0x930>
 8006a7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	4b64      	ldr	r3, [pc, #400]	; (8006c14 <_dtoa_r+0x61c>)
 8006a82:	f7f9 fd29 	bl	80004d8 <__aeabi_dmul>
 8006a86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a8a:	f7f9 ffab 	bl	80009e4 <__aeabi_dcmpge>
 8006a8e:	4646      	mov	r6, r8
 8006a90:	4647      	mov	r7, r8
 8006a92:	2800      	cmp	r0, #0
 8006a94:	f040 822d 	bne.w	8006ef2 <_dtoa_r+0x8fa>
 8006a98:	9b06      	ldr	r3, [sp, #24]
 8006a9a:	9a06      	ldr	r2, [sp, #24]
 8006a9c:	1c5d      	adds	r5, r3, #1
 8006a9e:	2331      	movs	r3, #49	; 0x31
 8006aa0:	f10a 0a01 	add.w	sl, sl, #1
 8006aa4:	7013      	strb	r3, [r2, #0]
 8006aa6:	e228      	b.n	8006efa <_dtoa_r+0x902>
 8006aa8:	07f2      	lsls	r2, r6, #31
 8006aaa:	d505      	bpl.n	8006ab8 <_dtoa_r+0x4c0>
 8006aac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ab0:	f7f9 fd12 	bl	80004d8 <__aeabi_dmul>
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	3501      	adds	r5, #1
 8006ab8:	1076      	asrs	r6, r6, #1
 8006aba:	3708      	adds	r7, #8
 8006abc:	e76e      	b.n	800699c <_dtoa_r+0x3a4>
 8006abe:	2502      	movs	r5, #2
 8006ac0:	e771      	b.n	80069a6 <_dtoa_r+0x3ae>
 8006ac2:	4657      	mov	r7, sl
 8006ac4:	4646      	mov	r6, r8
 8006ac6:	e790      	b.n	80069ea <_dtoa_r+0x3f2>
 8006ac8:	4b4d      	ldr	r3, [pc, #308]	; (8006c00 <_dtoa_r+0x608>)
 8006aca:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006ace:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d048      	beq.n	8006b6a <_dtoa_r+0x572>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	460b      	mov	r3, r1
 8006adc:	2000      	movs	r0, #0
 8006ade:	494e      	ldr	r1, [pc, #312]	; (8006c18 <_dtoa_r+0x620>)
 8006ae0:	f7f9 fe24 	bl	800072c <__aeabi_ddiv>
 8006ae4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006ae8:	f7f9 fb3e 	bl	8000168 <__aeabi_dsub>
 8006aec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006af0:	9d06      	ldr	r5, [sp, #24]
 8006af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006af6:	f7f9 ff9f 	bl	8000a38 <__aeabi_d2iz>
 8006afa:	9011      	str	r0, [sp, #68]	; 0x44
 8006afc:	f7f9 fc82 	bl	8000404 <__aeabi_i2d>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b08:	f7f9 fb2e 	bl	8000168 <__aeabi_dsub>
 8006b0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b12:	3330      	adds	r3, #48	; 0x30
 8006b14:	f805 3b01 	strb.w	r3, [r5], #1
 8006b18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b1c:	f7f9 ff4e 	bl	80009bc <__aeabi_dcmplt>
 8006b20:	2800      	cmp	r0, #0
 8006b22:	d163      	bne.n	8006bec <_dtoa_r+0x5f4>
 8006b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b28:	2000      	movs	r0, #0
 8006b2a:	4937      	ldr	r1, [pc, #220]	; (8006c08 <_dtoa_r+0x610>)
 8006b2c:	f7f9 fb1c 	bl	8000168 <__aeabi_dsub>
 8006b30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b34:	f7f9 ff42 	bl	80009bc <__aeabi_dcmplt>
 8006b38:	2800      	cmp	r0, #0
 8006b3a:	f040 80b5 	bne.w	8006ca8 <_dtoa_r+0x6b0>
 8006b3e:	9b06      	ldr	r3, [sp, #24]
 8006b40:	1aeb      	subs	r3, r5, r3
 8006b42:	429e      	cmp	r6, r3
 8006b44:	f77f af7c 	ble.w	8006a40 <_dtoa_r+0x448>
 8006b48:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	4b2f      	ldr	r3, [pc, #188]	; (8006c0c <_dtoa_r+0x614>)
 8006b50:	f7f9 fcc2 	bl	80004d8 <__aeabi_dmul>
 8006b54:	2200      	movs	r2, #0
 8006b56:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b5a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b5e:	4b2b      	ldr	r3, [pc, #172]	; (8006c0c <_dtoa_r+0x614>)
 8006b60:	f7f9 fcba 	bl	80004d8 <__aeabi_dmul>
 8006b64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b68:	e7c3      	b.n	8006af2 <_dtoa_r+0x4fa>
 8006b6a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006b6e:	f7f9 fcb3 	bl	80004d8 <__aeabi_dmul>
 8006b72:	9b06      	ldr	r3, [sp, #24]
 8006b74:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8006b78:	199d      	adds	r5, r3, r6
 8006b7a:	461e      	mov	r6, r3
 8006b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b80:	f7f9 ff5a 	bl	8000a38 <__aeabi_d2iz>
 8006b84:	9011      	str	r0, [sp, #68]	; 0x44
 8006b86:	f7f9 fc3d 	bl	8000404 <__aeabi_i2d>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b92:	f7f9 fae9 	bl	8000168 <__aeabi_dsub>
 8006b96:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b9c:	3330      	adds	r3, #48	; 0x30
 8006b9e:	f806 3b01 	strb.w	r3, [r6], #1
 8006ba2:	42ae      	cmp	r6, r5
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	d124      	bne.n	8006bf4 <_dtoa_r+0x5fc>
 8006baa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bae:	4b1a      	ldr	r3, [pc, #104]	; (8006c18 <_dtoa_r+0x620>)
 8006bb0:	f7f9 fadc 	bl	800016c <__adddf3>
 8006bb4:	4602      	mov	r2, r0
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bbc:	f7f9 ff1c 	bl	80009f8 <__aeabi_dcmpgt>
 8006bc0:	2800      	cmp	r0, #0
 8006bc2:	d171      	bne.n	8006ca8 <_dtoa_r+0x6b0>
 8006bc4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006bc8:	2000      	movs	r0, #0
 8006bca:	4913      	ldr	r1, [pc, #76]	; (8006c18 <_dtoa_r+0x620>)
 8006bcc:	f7f9 facc 	bl	8000168 <__aeabi_dsub>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	460b      	mov	r3, r1
 8006bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bd8:	f7f9 fef0 	bl	80009bc <__aeabi_dcmplt>
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	f43f af2f 	beq.w	8006a40 <_dtoa_r+0x448>
 8006be2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006be6:	1e6a      	subs	r2, r5, #1
 8006be8:	2b30      	cmp	r3, #48	; 0x30
 8006bea:	d001      	beq.n	8006bf0 <_dtoa_r+0x5f8>
 8006bec:	46ba      	mov	sl, r7
 8006bee:	e04a      	b.n	8006c86 <_dtoa_r+0x68e>
 8006bf0:	4615      	mov	r5, r2
 8006bf2:	e7f6      	b.n	8006be2 <_dtoa_r+0x5ea>
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <_dtoa_r+0x614>)
 8006bf6:	f7f9 fc6f 	bl	80004d8 <__aeabi_dmul>
 8006bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bfe:	e7bd      	b.n	8006b7c <_dtoa_r+0x584>
 8006c00:	08009040 	.word	0x08009040
 8006c04:	08009018 	.word	0x08009018
 8006c08:	3ff00000 	.word	0x3ff00000
 8006c0c:	40240000 	.word	0x40240000
 8006c10:	401c0000 	.word	0x401c0000
 8006c14:	40140000 	.word	0x40140000
 8006c18:	3fe00000 	.word	0x3fe00000
 8006c1c:	9d06      	ldr	r5, [sp, #24]
 8006c1e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c26:	4630      	mov	r0, r6
 8006c28:	4639      	mov	r1, r7
 8006c2a:	f7f9 fd7f 	bl	800072c <__aeabi_ddiv>
 8006c2e:	f7f9 ff03 	bl	8000a38 <__aeabi_d2iz>
 8006c32:	4681      	mov	r9, r0
 8006c34:	f7f9 fbe6 	bl	8000404 <__aeabi_i2d>
 8006c38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c3c:	f7f9 fc4c 	bl	80004d8 <__aeabi_dmul>
 8006c40:	4602      	mov	r2, r0
 8006c42:	460b      	mov	r3, r1
 8006c44:	4630      	mov	r0, r6
 8006c46:	4639      	mov	r1, r7
 8006c48:	f7f9 fa8e 	bl	8000168 <__aeabi_dsub>
 8006c4c:	f109 0630 	add.w	r6, r9, #48	; 0x30
 8006c50:	f805 6b01 	strb.w	r6, [r5], #1
 8006c54:	9e06      	ldr	r6, [sp, #24]
 8006c56:	4602      	mov	r2, r0
 8006c58:	1bae      	subs	r6, r5, r6
 8006c5a:	45b0      	cmp	r8, r6
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	d135      	bne.n	8006ccc <_dtoa_r+0x6d4>
 8006c60:	f7f9 fa84 	bl	800016c <__adddf3>
 8006c64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c68:	4606      	mov	r6, r0
 8006c6a:	460f      	mov	r7, r1
 8006c6c:	f7f9 fec4 	bl	80009f8 <__aeabi_dcmpgt>
 8006c70:	b9c8      	cbnz	r0, 8006ca6 <_dtoa_r+0x6ae>
 8006c72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c76:	4630      	mov	r0, r6
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 fe95 	bl	80009a8 <__aeabi_dcmpeq>
 8006c7e:	b110      	cbz	r0, 8006c86 <_dtoa_r+0x68e>
 8006c80:	f019 0f01 	tst.w	r9, #1
 8006c84:	d10f      	bne.n	8006ca6 <_dtoa_r+0x6ae>
 8006c86:	4659      	mov	r1, fp
 8006c88:	4620      	mov	r0, r4
 8006c8a:	f000 facc 	bl	8007226 <_Bfree>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006c92:	702b      	strb	r3, [r5, #0]
 8006c94:	f10a 0301 	add.w	r3, sl, #1
 8006c98:	6013      	str	r3, [r2, #0]
 8006c9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f43f acf3 	beq.w	8006688 <_dtoa_r+0x90>
 8006ca2:	601d      	str	r5, [r3, #0]
 8006ca4:	e4f0      	b.n	8006688 <_dtoa_r+0x90>
 8006ca6:	4657      	mov	r7, sl
 8006ca8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006cac:	1e6b      	subs	r3, r5, #1
 8006cae:	2a39      	cmp	r2, #57	; 0x39
 8006cb0:	d106      	bne.n	8006cc0 <_dtoa_r+0x6c8>
 8006cb2:	9a06      	ldr	r2, [sp, #24]
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d107      	bne.n	8006cc8 <_dtoa_r+0x6d0>
 8006cb8:	2330      	movs	r3, #48	; 0x30
 8006cba:	7013      	strb	r3, [r2, #0]
 8006cbc:	4613      	mov	r3, r2
 8006cbe:	3701      	adds	r7, #1
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	3201      	adds	r2, #1
 8006cc4:	701a      	strb	r2, [r3, #0]
 8006cc6:	e791      	b.n	8006bec <_dtoa_r+0x5f4>
 8006cc8:	461d      	mov	r5, r3
 8006cca:	e7ed      	b.n	8006ca8 <_dtoa_r+0x6b0>
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4b99      	ldr	r3, [pc, #612]	; (8006f34 <_dtoa_r+0x93c>)
 8006cd0:	f7f9 fc02 	bl	80004d8 <__aeabi_dmul>
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	4606      	mov	r6, r0
 8006cda:	460f      	mov	r7, r1
 8006cdc:	f7f9 fe64 	bl	80009a8 <__aeabi_dcmpeq>
 8006ce0:	2800      	cmp	r0, #0
 8006ce2:	d09e      	beq.n	8006c22 <_dtoa_r+0x62a>
 8006ce4:	e7cf      	b.n	8006c86 <_dtoa_r+0x68e>
 8006ce6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	f000 8088 	beq.w	8006dfe <_dtoa_r+0x806>
 8006cee:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006cf0:	2a01      	cmp	r2, #1
 8006cf2:	dc6d      	bgt.n	8006dd0 <_dtoa_r+0x7d8>
 8006cf4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	d066      	beq.n	8006dc8 <_dtoa_r+0x7d0>
 8006cfa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006cfe:	464d      	mov	r5, r9
 8006d00:	9e08      	ldr	r6, [sp, #32]
 8006d02:	9a07      	ldr	r2, [sp, #28]
 8006d04:	2101      	movs	r1, #1
 8006d06:	441a      	add	r2, r3
 8006d08:	4620      	mov	r0, r4
 8006d0a:	4499      	add	r9, r3
 8006d0c:	9207      	str	r2, [sp, #28]
 8006d0e:	f000 fb2a 	bl	8007366 <__i2b>
 8006d12:	4607      	mov	r7, r0
 8006d14:	2d00      	cmp	r5, #0
 8006d16:	dd0b      	ble.n	8006d30 <_dtoa_r+0x738>
 8006d18:	9b07      	ldr	r3, [sp, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	dd08      	ble.n	8006d30 <_dtoa_r+0x738>
 8006d1e:	42ab      	cmp	r3, r5
 8006d20:	bfa8      	it	ge
 8006d22:	462b      	movge	r3, r5
 8006d24:	9a07      	ldr	r2, [sp, #28]
 8006d26:	eba9 0903 	sub.w	r9, r9, r3
 8006d2a:	1aed      	subs	r5, r5, r3
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	9307      	str	r3, [sp, #28]
 8006d30:	9b08      	ldr	r3, [sp, #32]
 8006d32:	b1eb      	cbz	r3, 8006d70 <_dtoa_r+0x778>
 8006d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d065      	beq.n	8006e06 <_dtoa_r+0x80e>
 8006d3a:	b18e      	cbz	r6, 8006d60 <_dtoa_r+0x768>
 8006d3c:	4639      	mov	r1, r7
 8006d3e:	4632      	mov	r2, r6
 8006d40:	4620      	mov	r0, r4
 8006d42:	f000 fbaf 	bl	80074a4 <__pow5mult>
 8006d46:	465a      	mov	r2, fp
 8006d48:	4601      	mov	r1, r0
 8006d4a:	4607      	mov	r7, r0
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	f000 fb13 	bl	8007378 <__multiply>
 8006d52:	4659      	mov	r1, fp
 8006d54:	900a      	str	r0, [sp, #40]	; 0x28
 8006d56:	4620      	mov	r0, r4
 8006d58:	f000 fa65 	bl	8007226 <_Bfree>
 8006d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5e:	469b      	mov	fp, r3
 8006d60:	9b08      	ldr	r3, [sp, #32]
 8006d62:	1b9a      	subs	r2, r3, r6
 8006d64:	d004      	beq.n	8006d70 <_dtoa_r+0x778>
 8006d66:	4659      	mov	r1, fp
 8006d68:	4620      	mov	r0, r4
 8006d6a:	f000 fb9b 	bl	80074a4 <__pow5mult>
 8006d6e:	4683      	mov	fp, r0
 8006d70:	2101      	movs	r1, #1
 8006d72:	4620      	mov	r0, r4
 8006d74:	f000 faf7 	bl	8007366 <__i2b>
 8006d78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006d7a:	4606      	mov	r6, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 81c6 	beq.w	800710e <_dtoa_r+0xb16>
 8006d82:	461a      	mov	r2, r3
 8006d84:	4601      	mov	r1, r0
 8006d86:	4620      	mov	r0, r4
 8006d88:	f000 fb8c 	bl	80074a4 <__pow5mult>
 8006d8c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006d8e:	4606      	mov	r6, r0
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	dc3e      	bgt.n	8006e12 <_dtoa_r+0x81a>
 8006d94:	9b02      	ldr	r3, [sp, #8]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d137      	bne.n	8006e0a <_dtoa_r+0x812>
 8006d9a:	9b03      	ldr	r3, [sp, #12]
 8006d9c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d134      	bne.n	8006e0e <_dtoa_r+0x816>
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006daa:	0d1b      	lsrs	r3, r3, #20
 8006dac:	051b      	lsls	r3, r3, #20
 8006dae:	b12b      	cbz	r3, 8006dbc <_dtoa_r+0x7c4>
 8006db0:	9b07      	ldr	r3, [sp, #28]
 8006db2:	f109 0901 	add.w	r9, r9, #1
 8006db6:	3301      	adds	r3, #1
 8006db8:	9307      	str	r3, [sp, #28]
 8006dba:	2301      	movs	r3, #1
 8006dbc:	9308      	str	r3, [sp, #32]
 8006dbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d128      	bne.n	8006e16 <_dtoa_r+0x81e>
 8006dc4:	2001      	movs	r0, #1
 8006dc6:	e02e      	b.n	8006e26 <_dtoa_r+0x82e>
 8006dc8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006dca:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006dce:	e796      	b.n	8006cfe <_dtoa_r+0x706>
 8006dd0:	9b08      	ldr	r3, [sp, #32]
 8006dd2:	f108 36ff 	add.w	r6, r8, #4294967295
 8006dd6:	42b3      	cmp	r3, r6
 8006dd8:	bfb7      	itett	lt
 8006dda:	9b08      	ldrlt	r3, [sp, #32]
 8006ddc:	1b9e      	subge	r6, r3, r6
 8006dde:	1af2      	sublt	r2, r6, r3
 8006de0:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8006de2:	bfbf      	itttt	lt
 8006de4:	9608      	strlt	r6, [sp, #32]
 8006de6:	189b      	addlt	r3, r3, r2
 8006de8:	930c      	strlt	r3, [sp, #48]	; 0x30
 8006dea:	2600      	movlt	r6, #0
 8006dec:	f1b8 0f00 	cmp.w	r8, #0
 8006df0:	bfb9      	ittee	lt
 8006df2:	eba9 0508 	sublt.w	r5, r9, r8
 8006df6:	2300      	movlt	r3, #0
 8006df8:	464d      	movge	r5, r9
 8006dfa:	4643      	movge	r3, r8
 8006dfc:	e781      	b.n	8006d02 <_dtoa_r+0x70a>
 8006dfe:	9e08      	ldr	r6, [sp, #32]
 8006e00:	464d      	mov	r5, r9
 8006e02:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006e04:	e786      	b.n	8006d14 <_dtoa_r+0x71c>
 8006e06:	9a08      	ldr	r2, [sp, #32]
 8006e08:	e7ad      	b.n	8006d66 <_dtoa_r+0x76e>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e7d6      	b.n	8006dbc <_dtoa_r+0x7c4>
 8006e0e:	9b02      	ldr	r3, [sp, #8]
 8006e10:	e7d4      	b.n	8006dbc <_dtoa_r+0x7c4>
 8006e12:	2300      	movs	r3, #0
 8006e14:	9308      	str	r3, [sp, #32]
 8006e16:	6933      	ldr	r3, [r6, #16]
 8006e18:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006e1c:	6918      	ldr	r0, [r3, #16]
 8006e1e:	f000 fa54 	bl	80072ca <__hi0bits>
 8006e22:	f1c0 0020 	rsb	r0, r0, #32
 8006e26:	9b07      	ldr	r3, [sp, #28]
 8006e28:	4418      	add	r0, r3
 8006e2a:	f010 001f 	ands.w	r0, r0, #31
 8006e2e:	d047      	beq.n	8006ec0 <_dtoa_r+0x8c8>
 8006e30:	f1c0 0320 	rsb	r3, r0, #32
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	dd3b      	ble.n	8006eb0 <_dtoa_r+0x8b8>
 8006e38:	9b07      	ldr	r3, [sp, #28]
 8006e3a:	f1c0 001c 	rsb	r0, r0, #28
 8006e3e:	4481      	add	r9, r0
 8006e40:	4405      	add	r5, r0
 8006e42:	4403      	add	r3, r0
 8006e44:	9307      	str	r3, [sp, #28]
 8006e46:	f1b9 0f00 	cmp.w	r9, #0
 8006e4a:	dd05      	ble.n	8006e58 <_dtoa_r+0x860>
 8006e4c:	4659      	mov	r1, fp
 8006e4e:	464a      	mov	r2, r9
 8006e50:	4620      	mov	r0, r4
 8006e52:	f000 fb75 	bl	8007540 <__lshift>
 8006e56:	4683      	mov	fp, r0
 8006e58:	9b07      	ldr	r3, [sp, #28]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd05      	ble.n	8006e6a <_dtoa_r+0x872>
 8006e5e:	4631      	mov	r1, r6
 8006e60:	461a      	mov	r2, r3
 8006e62:	4620      	mov	r0, r4
 8006e64:	f000 fb6c 	bl	8007540 <__lshift>
 8006e68:	4606      	mov	r6, r0
 8006e6a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006e6c:	b353      	cbz	r3, 8006ec4 <_dtoa_r+0x8cc>
 8006e6e:	4631      	mov	r1, r6
 8006e70:	4658      	mov	r0, fp
 8006e72:	f000 fbb9 	bl	80075e8 <__mcmp>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	da24      	bge.n	8006ec4 <_dtoa_r+0x8cc>
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	220a      	movs	r2, #10
 8006e80:	4620      	mov	r0, r4
 8006e82:	f000 f9e7 	bl	8007254 <__multadd>
 8006e86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e88:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e8c:	4683      	mov	fp, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	f000 8144 	beq.w	800711c <_dtoa_r+0xb24>
 8006e94:	2300      	movs	r3, #0
 8006e96:	4639      	mov	r1, r7
 8006e98:	220a      	movs	r2, #10
 8006e9a:	4620      	mov	r0, r4
 8006e9c:	f000 f9da 	bl	8007254 <__multadd>
 8006ea0:	9b04      	ldr	r3, [sp, #16]
 8006ea2:	4607      	mov	r7, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	dc4d      	bgt.n	8006f44 <_dtoa_r+0x94c>
 8006ea8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006eaa:	2b02      	cmp	r3, #2
 8006eac:	dd4a      	ble.n	8006f44 <_dtoa_r+0x94c>
 8006eae:	e011      	b.n	8006ed4 <_dtoa_r+0x8dc>
 8006eb0:	d0c9      	beq.n	8006e46 <_dtoa_r+0x84e>
 8006eb2:	9a07      	ldr	r2, [sp, #28]
 8006eb4:	331c      	adds	r3, #28
 8006eb6:	441a      	add	r2, r3
 8006eb8:	4499      	add	r9, r3
 8006eba:	441d      	add	r5, r3
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	e7c1      	b.n	8006e44 <_dtoa_r+0x84c>
 8006ec0:	4603      	mov	r3, r0
 8006ec2:	e7f6      	b.n	8006eb2 <_dtoa_r+0x8ba>
 8006ec4:	f1b8 0f00 	cmp.w	r8, #0
 8006ec8:	dc36      	bgt.n	8006f38 <_dtoa_r+0x940>
 8006eca:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	dd33      	ble.n	8006f38 <_dtoa_r+0x940>
 8006ed0:	f8cd 8010 	str.w	r8, [sp, #16]
 8006ed4:	9b04      	ldr	r3, [sp, #16]
 8006ed6:	b963      	cbnz	r3, 8006ef2 <_dtoa_r+0x8fa>
 8006ed8:	4631      	mov	r1, r6
 8006eda:	2205      	movs	r2, #5
 8006edc:	4620      	mov	r0, r4
 8006ede:	f000 f9b9 	bl	8007254 <__multadd>
 8006ee2:	4601      	mov	r1, r0
 8006ee4:	4606      	mov	r6, r0
 8006ee6:	4658      	mov	r0, fp
 8006ee8:	f000 fb7e 	bl	80075e8 <__mcmp>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	f73f add3 	bgt.w	8006a98 <_dtoa_r+0x4a0>
 8006ef2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006ef4:	9d06      	ldr	r5, [sp, #24]
 8006ef6:	ea6f 0a03 	mvn.w	sl, r3
 8006efa:	f04f 0900 	mov.w	r9, #0
 8006efe:	4631      	mov	r1, r6
 8006f00:	4620      	mov	r0, r4
 8006f02:	f000 f990 	bl	8007226 <_Bfree>
 8006f06:	2f00      	cmp	r7, #0
 8006f08:	f43f aebd 	beq.w	8006c86 <_dtoa_r+0x68e>
 8006f0c:	f1b9 0f00 	cmp.w	r9, #0
 8006f10:	d005      	beq.n	8006f1e <_dtoa_r+0x926>
 8006f12:	45b9      	cmp	r9, r7
 8006f14:	d003      	beq.n	8006f1e <_dtoa_r+0x926>
 8006f16:	4649      	mov	r1, r9
 8006f18:	4620      	mov	r0, r4
 8006f1a:	f000 f984 	bl	8007226 <_Bfree>
 8006f1e:	4639      	mov	r1, r7
 8006f20:	4620      	mov	r0, r4
 8006f22:	f000 f980 	bl	8007226 <_Bfree>
 8006f26:	e6ae      	b.n	8006c86 <_dtoa_r+0x68e>
 8006f28:	2600      	movs	r6, #0
 8006f2a:	4637      	mov	r7, r6
 8006f2c:	e7e1      	b.n	8006ef2 <_dtoa_r+0x8fa>
 8006f2e:	46ba      	mov	sl, r7
 8006f30:	4637      	mov	r7, r6
 8006f32:	e5b1      	b.n	8006a98 <_dtoa_r+0x4a0>
 8006f34:	40240000 	.word	0x40240000
 8006f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f3a:	f8cd 8010 	str.w	r8, [sp, #16]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 80f3 	beq.w	800712a <_dtoa_r+0xb32>
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	dd05      	ble.n	8006f54 <_dtoa_r+0x95c>
 8006f48:	4639      	mov	r1, r7
 8006f4a:	462a      	mov	r2, r5
 8006f4c:	4620      	mov	r0, r4
 8006f4e:	f000 faf7 	bl	8007540 <__lshift>
 8006f52:	4607      	mov	r7, r0
 8006f54:	9b08      	ldr	r3, [sp, #32]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d04c      	beq.n	8006ff4 <_dtoa_r+0x9fc>
 8006f5a:	6879      	ldr	r1, [r7, #4]
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f000 f92e 	bl	80071be <_Balloc>
 8006f62:	4605      	mov	r5, r0
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	f107 010c 	add.w	r1, r7, #12
 8006f6a:	3202      	adds	r2, #2
 8006f6c:	0092      	lsls	r2, r2, #2
 8006f6e:	300c      	adds	r0, #12
 8006f70:	f000 f91a 	bl	80071a8 <memcpy>
 8006f74:	2201      	movs	r2, #1
 8006f76:	4629      	mov	r1, r5
 8006f78:	4620      	mov	r0, r4
 8006f7a:	f000 fae1 	bl	8007540 <__lshift>
 8006f7e:	46b9      	mov	r9, r7
 8006f80:	4607      	mov	r7, r0
 8006f82:	9b06      	ldr	r3, [sp, #24]
 8006f84:	9307      	str	r3, [sp, #28]
 8006f86:	9b02      	ldr	r3, [sp, #8]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	9308      	str	r3, [sp, #32]
 8006f8e:	4631      	mov	r1, r6
 8006f90:	4658      	mov	r0, fp
 8006f92:	f7ff faa3 	bl	80064dc <quorem>
 8006f96:	4649      	mov	r1, r9
 8006f98:	4605      	mov	r5, r0
 8006f9a:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006f9e:	4658      	mov	r0, fp
 8006fa0:	f000 fb22 	bl	80075e8 <__mcmp>
 8006fa4:	463a      	mov	r2, r7
 8006fa6:	9002      	str	r0, [sp, #8]
 8006fa8:	4631      	mov	r1, r6
 8006faa:	4620      	mov	r0, r4
 8006fac:	f000 fb36 	bl	800761c <__mdiff>
 8006fb0:	68c3      	ldr	r3, [r0, #12]
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	bb03      	cbnz	r3, 8006ff8 <_dtoa_r+0xa00>
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	9009      	str	r0, [sp, #36]	; 0x24
 8006fba:	4658      	mov	r0, fp
 8006fbc:	f000 fb14 	bl	80075e8 <__mcmp>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4620      	mov	r0, r4
 8006fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fca:	f000 f92c 	bl	8007226 <_Bfree>
 8006fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd0:	b9a3      	cbnz	r3, 8006ffc <_dtoa_r+0xa04>
 8006fd2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006fd4:	b992      	cbnz	r2, 8006ffc <_dtoa_r+0xa04>
 8006fd6:	9a08      	ldr	r2, [sp, #32]
 8006fd8:	b982      	cbnz	r2, 8006ffc <_dtoa_r+0xa04>
 8006fda:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006fde:	d029      	beq.n	8007034 <_dtoa_r+0xa3c>
 8006fe0:	9b02      	ldr	r3, [sp, #8]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	dd01      	ble.n	8006fea <_dtoa_r+0x9f2>
 8006fe6:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8006fea:	9b07      	ldr	r3, [sp, #28]
 8006fec:	1c5d      	adds	r5, r3, #1
 8006fee:	f883 8000 	strb.w	r8, [r3]
 8006ff2:	e784      	b.n	8006efe <_dtoa_r+0x906>
 8006ff4:	4638      	mov	r0, r7
 8006ff6:	e7c2      	b.n	8006f7e <_dtoa_r+0x986>
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e7e3      	b.n	8006fc4 <_dtoa_r+0x9cc>
 8006ffc:	9a02      	ldr	r2, [sp, #8]
 8006ffe:	2a00      	cmp	r2, #0
 8007000:	db04      	blt.n	800700c <_dtoa_r+0xa14>
 8007002:	d123      	bne.n	800704c <_dtoa_r+0xa54>
 8007004:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007006:	bb0a      	cbnz	r2, 800704c <_dtoa_r+0xa54>
 8007008:	9a08      	ldr	r2, [sp, #32]
 800700a:	b9fa      	cbnz	r2, 800704c <_dtoa_r+0xa54>
 800700c:	2b00      	cmp	r3, #0
 800700e:	ddec      	ble.n	8006fea <_dtoa_r+0x9f2>
 8007010:	4659      	mov	r1, fp
 8007012:	2201      	movs	r2, #1
 8007014:	4620      	mov	r0, r4
 8007016:	f000 fa93 	bl	8007540 <__lshift>
 800701a:	4631      	mov	r1, r6
 800701c:	4683      	mov	fp, r0
 800701e:	f000 fae3 	bl	80075e8 <__mcmp>
 8007022:	2800      	cmp	r0, #0
 8007024:	dc03      	bgt.n	800702e <_dtoa_r+0xa36>
 8007026:	d1e0      	bne.n	8006fea <_dtoa_r+0x9f2>
 8007028:	f018 0f01 	tst.w	r8, #1
 800702c:	d0dd      	beq.n	8006fea <_dtoa_r+0x9f2>
 800702e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007032:	d1d8      	bne.n	8006fe6 <_dtoa_r+0x9ee>
 8007034:	9b07      	ldr	r3, [sp, #28]
 8007036:	9a07      	ldr	r2, [sp, #28]
 8007038:	1c5d      	adds	r5, r3, #1
 800703a:	2339      	movs	r3, #57	; 0x39
 800703c:	7013      	strb	r3, [r2, #0]
 800703e:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007042:	1e6a      	subs	r2, r5, #1
 8007044:	2b39      	cmp	r3, #57	; 0x39
 8007046:	d04d      	beq.n	80070e4 <_dtoa_r+0xaec>
 8007048:	3301      	adds	r3, #1
 800704a:	e052      	b.n	80070f2 <_dtoa_r+0xafa>
 800704c:	9a07      	ldr	r2, [sp, #28]
 800704e:	2b00      	cmp	r3, #0
 8007050:	f102 0501 	add.w	r5, r2, #1
 8007054:	dd06      	ble.n	8007064 <_dtoa_r+0xa6c>
 8007056:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800705a:	d0eb      	beq.n	8007034 <_dtoa_r+0xa3c>
 800705c:	f108 0801 	add.w	r8, r8, #1
 8007060:	9b07      	ldr	r3, [sp, #28]
 8007062:	e7c4      	b.n	8006fee <_dtoa_r+0x9f6>
 8007064:	9b06      	ldr	r3, [sp, #24]
 8007066:	9a04      	ldr	r2, [sp, #16]
 8007068:	1aeb      	subs	r3, r5, r3
 800706a:	4293      	cmp	r3, r2
 800706c:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007070:	d021      	beq.n	80070b6 <_dtoa_r+0xabe>
 8007072:	4659      	mov	r1, fp
 8007074:	2300      	movs	r3, #0
 8007076:	220a      	movs	r2, #10
 8007078:	4620      	mov	r0, r4
 800707a:	f000 f8eb 	bl	8007254 <__multadd>
 800707e:	45b9      	cmp	r9, r7
 8007080:	4683      	mov	fp, r0
 8007082:	f04f 0300 	mov.w	r3, #0
 8007086:	f04f 020a 	mov.w	r2, #10
 800708a:	4649      	mov	r1, r9
 800708c:	4620      	mov	r0, r4
 800708e:	d105      	bne.n	800709c <_dtoa_r+0xaa4>
 8007090:	f000 f8e0 	bl	8007254 <__multadd>
 8007094:	4681      	mov	r9, r0
 8007096:	4607      	mov	r7, r0
 8007098:	9507      	str	r5, [sp, #28]
 800709a:	e778      	b.n	8006f8e <_dtoa_r+0x996>
 800709c:	f000 f8da 	bl	8007254 <__multadd>
 80070a0:	4639      	mov	r1, r7
 80070a2:	4681      	mov	r9, r0
 80070a4:	2300      	movs	r3, #0
 80070a6:	220a      	movs	r2, #10
 80070a8:	4620      	mov	r0, r4
 80070aa:	f000 f8d3 	bl	8007254 <__multadd>
 80070ae:	4607      	mov	r7, r0
 80070b0:	e7f2      	b.n	8007098 <_dtoa_r+0xaa0>
 80070b2:	f04f 0900 	mov.w	r9, #0
 80070b6:	4659      	mov	r1, fp
 80070b8:	2201      	movs	r2, #1
 80070ba:	4620      	mov	r0, r4
 80070bc:	f000 fa40 	bl	8007540 <__lshift>
 80070c0:	4631      	mov	r1, r6
 80070c2:	4683      	mov	fp, r0
 80070c4:	f000 fa90 	bl	80075e8 <__mcmp>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	dcb8      	bgt.n	800703e <_dtoa_r+0xa46>
 80070cc:	d102      	bne.n	80070d4 <_dtoa_r+0xadc>
 80070ce:	f018 0f01 	tst.w	r8, #1
 80070d2:	d1b4      	bne.n	800703e <_dtoa_r+0xa46>
 80070d4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80070d8:	1e6a      	subs	r2, r5, #1
 80070da:	2b30      	cmp	r3, #48	; 0x30
 80070dc:	f47f af0f 	bne.w	8006efe <_dtoa_r+0x906>
 80070e0:	4615      	mov	r5, r2
 80070e2:	e7f7      	b.n	80070d4 <_dtoa_r+0xadc>
 80070e4:	9b06      	ldr	r3, [sp, #24]
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d105      	bne.n	80070f6 <_dtoa_r+0xafe>
 80070ea:	2331      	movs	r3, #49	; 0x31
 80070ec:	9a06      	ldr	r2, [sp, #24]
 80070ee:	f10a 0a01 	add.w	sl, sl, #1
 80070f2:	7013      	strb	r3, [r2, #0]
 80070f4:	e703      	b.n	8006efe <_dtoa_r+0x906>
 80070f6:	4615      	mov	r5, r2
 80070f8:	e7a1      	b.n	800703e <_dtoa_r+0xa46>
 80070fa:	4b17      	ldr	r3, [pc, #92]	; (8007158 <_dtoa_r+0xb60>)
 80070fc:	f7ff bae1 	b.w	80066c2 <_dtoa_r+0xca>
 8007100:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007102:	2b00      	cmp	r3, #0
 8007104:	f47f aabb 	bne.w	800667e <_dtoa_r+0x86>
 8007108:	4b14      	ldr	r3, [pc, #80]	; (800715c <_dtoa_r+0xb64>)
 800710a:	f7ff bada 	b.w	80066c2 <_dtoa_r+0xca>
 800710e:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007110:	2b01      	cmp	r3, #1
 8007112:	f77f ae3f 	ble.w	8006d94 <_dtoa_r+0x79c>
 8007116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007118:	9308      	str	r3, [sp, #32]
 800711a:	e653      	b.n	8006dc4 <_dtoa_r+0x7cc>
 800711c:	9b04      	ldr	r3, [sp, #16]
 800711e:	2b00      	cmp	r3, #0
 8007120:	dc03      	bgt.n	800712a <_dtoa_r+0xb32>
 8007122:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8007124:	2b02      	cmp	r3, #2
 8007126:	f73f aed5 	bgt.w	8006ed4 <_dtoa_r+0x8dc>
 800712a:	9d06      	ldr	r5, [sp, #24]
 800712c:	4631      	mov	r1, r6
 800712e:	4658      	mov	r0, fp
 8007130:	f7ff f9d4 	bl	80064dc <quorem>
 8007134:	9b06      	ldr	r3, [sp, #24]
 8007136:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800713a:	f805 8b01 	strb.w	r8, [r5], #1
 800713e:	9a04      	ldr	r2, [sp, #16]
 8007140:	1aeb      	subs	r3, r5, r3
 8007142:	429a      	cmp	r2, r3
 8007144:	ddb5      	ble.n	80070b2 <_dtoa_r+0xaba>
 8007146:	4659      	mov	r1, fp
 8007148:	2300      	movs	r3, #0
 800714a:	220a      	movs	r2, #10
 800714c:	4620      	mov	r0, r4
 800714e:	f000 f881 	bl	8007254 <__multadd>
 8007152:	4683      	mov	fp, r0
 8007154:	e7ea      	b.n	800712c <_dtoa_r+0xb34>
 8007156:	bf00      	nop
 8007158:	08008fe0 	.word	0x08008fe0
 800715c:	08009004 	.word	0x08009004

08007160 <_localeconv_r>:
 8007160:	4b04      	ldr	r3, [pc, #16]	; (8007174 <_localeconv_r+0x14>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	6a18      	ldr	r0, [r3, #32]
 8007166:	4b04      	ldr	r3, [pc, #16]	; (8007178 <_localeconv_r+0x18>)
 8007168:	2800      	cmp	r0, #0
 800716a:	bf08      	it	eq
 800716c:	4618      	moveq	r0, r3
 800716e:	30f0      	adds	r0, #240	; 0xf0
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	20000014 	.word	0x20000014
 8007178:	20000078 	.word	0x20000078

0800717c <malloc>:
 800717c:	4b02      	ldr	r3, [pc, #8]	; (8007188 <malloc+0xc>)
 800717e:	4601      	mov	r1, r0
 8007180:	6818      	ldr	r0, [r3, #0]
 8007182:	f000 bb53 	b.w	800782c <_malloc_r>
 8007186:	bf00      	nop
 8007188:	20000014 	.word	0x20000014

0800718c <memchr>:
 800718c:	b510      	push	{r4, lr}
 800718e:	b2c9      	uxtb	r1, r1
 8007190:	4402      	add	r2, r0
 8007192:	4290      	cmp	r0, r2
 8007194:	4603      	mov	r3, r0
 8007196:	d101      	bne.n	800719c <memchr+0x10>
 8007198:	2300      	movs	r3, #0
 800719a:	e003      	b.n	80071a4 <memchr+0x18>
 800719c:	781c      	ldrb	r4, [r3, #0]
 800719e:	3001      	adds	r0, #1
 80071a0:	428c      	cmp	r4, r1
 80071a2:	d1f6      	bne.n	8007192 <memchr+0x6>
 80071a4:	4618      	mov	r0, r3
 80071a6:	bd10      	pop	{r4, pc}

080071a8 <memcpy>:
 80071a8:	b510      	push	{r4, lr}
 80071aa:	1e43      	subs	r3, r0, #1
 80071ac:	440a      	add	r2, r1
 80071ae:	4291      	cmp	r1, r2
 80071b0:	d100      	bne.n	80071b4 <memcpy+0xc>
 80071b2:	bd10      	pop	{r4, pc}
 80071b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071bc:	e7f7      	b.n	80071ae <memcpy+0x6>

080071be <_Balloc>:
 80071be:	b570      	push	{r4, r5, r6, lr}
 80071c0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80071c2:	4604      	mov	r4, r0
 80071c4:	460e      	mov	r6, r1
 80071c6:	b93d      	cbnz	r5, 80071d8 <_Balloc+0x1a>
 80071c8:	2010      	movs	r0, #16
 80071ca:	f7ff ffd7 	bl	800717c <malloc>
 80071ce:	6260      	str	r0, [r4, #36]	; 0x24
 80071d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80071d4:	6005      	str	r5, [r0, #0]
 80071d6:	60c5      	str	r5, [r0, #12]
 80071d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80071da:	68eb      	ldr	r3, [r5, #12]
 80071dc:	b183      	cbz	r3, 8007200 <_Balloc+0x42>
 80071de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80071e6:	b9b8      	cbnz	r0, 8007218 <_Balloc+0x5a>
 80071e8:	2101      	movs	r1, #1
 80071ea:	fa01 f506 	lsl.w	r5, r1, r6
 80071ee:	1d6a      	adds	r2, r5, #5
 80071f0:	0092      	lsls	r2, r2, #2
 80071f2:	4620      	mov	r0, r4
 80071f4:	f000 fabf 	bl	8007776 <_calloc_r>
 80071f8:	b160      	cbz	r0, 8007214 <_Balloc+0x56>
 80071fa:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80071fe:	e00e      	b.n	800721e <_Balloc+0x60>
 8007200:	2221      	movs	r2, #33	; 0x21
 8007202:	2104      	movs	r1, #4
 8007204:	4620      	mov	r0, r4
 8007206:	f000 fab6 	bl	8007776 <_calloc_r>
 800720a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800720c:	60e8      	str	r0, [r5, #12]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d1e4      	bne.n	80071de <_Balloc+0x20>
 8007214:	2000      	movs	r0, #0
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	6802      	ldr	r2, [r0, #0]
 800721a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800721e:	2300      	movs	r3, #0
 8007220:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007224:	e7f7      	b.n	8007216 <_Balloc+0x58>

08007226 <_Bfree>:
 8007226:	b570      	push	{r4, r5, r6, lr}
 8007228:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800722a:	4606      	mov	r6, r0
 800722c:	460d      	mov	r5, r1
 800722e:	b93c      	cbnz	r4, 8007240 <_Bfree+0x1a>
 8007230:	2010      	movs	r0, #16
 8007232:	f7ff ffa3 	bl	800717c <malloc>
 8007236:	6270      	str	r0, [r6, #36]	; 0x24
 8007238:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800723c:	6004      	str	r4, [r0, #0]
 800723e:	60c4      	str	r4, [r0, #12]
 8007240:	b13d      	cbz	r5, 8007252 <_Bfree+0x2c>
 8007242:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007244:	686a      	ldr	r2, [r5, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800724c:	6029      	str	r1, [r5, #0]
 800724e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007252:	bd70      	pop	{r4, r5, r6, pc}

08007254 <__multadd>:
 8007254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007258:	461f      	mov	r7, r3
 800725a:	4606      	mov	r6, r0
 800725c:	460c      	mov	r4, r1
 800725e:	2300      	movs	r3, #0
 8007260:	690d      	ldr	r5, [r1, #16]
 8007262:	f101 0c14 	add.w	ip, r1, #20
 8007266:	f8dc 0000 	ldr.w	r0, [ip]
 800726a:	3301      	adds	r3, #1
 800726c:	b281      	uxth	r1, r0
 800726e:	fb02 7101 	mla	r1, r2, r1, r7
 8007272:	0c00      	lsrs	r0, r0, #16
 8007274:	0c0f      	lsrs	r7, r1, #16
 8007276:	fb02 7000 	mla	r0, r2, r0, r7
 800727a:	b289      	uxth	r1, r1
 800727c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007280:	429d      	cmp	r5, r3
 8007282:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007286:	f84c 1b04 	str.w	r1, [ip], #4
 800728a:	dcec      	bgt.n	8007266 <__multadd+0x12>
 800728c:	b1d7      	cbz	r7, 80072c4 <__multadd+0x70>
 800728e:	68a3      	ldr	r3, [r4, #8]
 8007290:	42ab      	cmp	r3, r5
 8007292:	dc12      	bgt.n	80072ba <__multadd+0x66>
 8007294:	6861      	ldr	r1, [r4, #4]
 8007296:	4630      	mov	r0, r6
 8007298:	3101      	adds	r1, #1
 800729a:	f7ff ff90 	bl	80071be <_Balloc>
 800729e:	4680      	mov	r8, r0
 80072a0:	6922      	ldr	r2, [r4, #16]
 80072a2:	f104 010c 	add.w	r1, r4, #12
 80072a6:	3202      	adds	r2, #2
 80072a8:	0092      	lsls	r2, r2, #2
 80072aa:	300c      	adds	r0, #12
 80072ac:	f7ff ff7c 	bl	80071a8 <memcpy>
 80072b0:	4621      	mov	r1, r4
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7ff ffb7 	bl	8007226 <_Bfree>
 80072b8:	4644      	mov	r4, r8
 80072ba:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072be:	3501      	adds	r5, #1
 80072c0:	615f      	str	r7, [r3, #20]
 80072c2:	6125      	str	r5, [r4, #16]
 80072c4:	4620      	mov	r0, r4
 80072c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080072ca <__hi0bits>:
 80072ca:	0c02      	lsrs	r2, r0, #16
 80072cc:	0412      	lsls	r2, r2, #16
 80072ce:	4603      	mov	r3, r0
 80072d0:	b9b2      	cbnz	r2, 8007300 <__hi0bits+0x36>
 80072d2:	0403      	lsls	r3, r0, #16
 80072d4:	2010      	movs	r0, #16
 80072d6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80072da:	bf04      	itt	eq
 80072dc:	021b      	lsleq	r3, r3, #8
 80072de:	3008      	addeq	r0, #8
 80072e0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80072e4:	bf04      	itt	eq
 80072e6:	011b      	lsleq	r3, r3, #4
 80072e8:	3004      	addeq	r0, #4
 80072ea:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072ee:	bf04      	itt	eq
 80072f0:	009b      	lsleq	r3, r3, #2
 80072f2:	3002      	addeq	r0, #2
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	db06      	blt.n	8007306 <__hi0bits+0x3c>
 80072f8:	005b      	lsls	r3, r3, #1
 80072fa:	d503      	bpl.n	8007304 <__hi0bits+0x3a>
 80072fc:	3001      	adds	r0, #1
 80072fe:	4770      	bx	lr
 8007300:	2000      	movs	r0, #0
 8007302:	e7e8      	b.n	80072d6 <__hi0bits+0xc>
 8007304:	2020      	movs	r0, #32
 8007306:	4770      	bx	lr

08007308 <__lo0bits>:
 8007308:	6803      	ldr	r3, [r0, #0]
 800730a:	4601      	mov	r1, r0
 800730c:	f013 0207 	ands.w	r2, r3, #7
 8007310:	d00b      	beq.n	800732a <__lo0bits+0x22>
 8007312:	07da      	lsls	r2, r3, #31
 8007314:	d423      	bmi.n	800735e <__lo0bits+0x56>
 8007316:	0798      	lsls	r0, r3, #30
 8007318:	bf49      	itett	mi
 800731a:	085b      	lsrmi	r3, r3, #1
 800731c:	089b      	lsrpl	r3, r3, #2
 800731e:	2001      	movmi	r0, #1
 8007320:	600b      	strmi	r3, [r1, #0]
 8007322:	bf5c      	itt	pl
 8007324:	600b      	strpl	r3, [r1, #0]
 8007326:	2002      	movpl	r0, #2
 8007328:	4770      	bx	lr
 800732a:	b298      	uxth	r0, r3
 800732c:	b9a8      	cbnz	r0, 800735a <__lo0bits+0x52>
 800732e:	2010      	movs	r0, #16
 8007330:	0c1b      	lsrs	r3, r3, #16
 8007332:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007336:	bf04      	itt	eq
 8007338:	0a1b      	lsreq	r3, r3, #8
 800733a:	3008      	addeq	r0, #8
 800733c:	071a      	lsls	r2, r3, #28
 800733e:	bf04      	itt	eq
 8007340:	091b      	lsreq	r3, r3, #4
 8007342:	3004      	addeq	r0, #4
 8007344:	079a      	lsls	r2, r3, #30
 8007346:	bf04      	itt	eq
 8007348:	089b      	lsreq	r3, r3, #2
 800734a:	3002      	addeq	r0, #2
 800734c:	07da      	lsls	r2, r3, #31
 800734e:	d402      	bmi.n	8007356 <__lo0bits+0x4e>
 8007350:	085b      	lsrs	r3, r3, #1
 8007352:	d006      	beq.n	8007362 <__lo0bits+0x5a>
 8007354:	3001      	adds	r0, #1
 8007356:	600b      	str	r3, [r1, #0]
 8007358:	4770      	bx	lr
 800735a:	4610      	mov	r0, r2
 800735c:	e7e9      	b.n	8007332 <__lo0bits+0x2a>
 800735e:	2000      	movs	r0, #0
 8007360:	4770      	bx	lr
 8007362:	2020      	movs	r0, #32
 8007364:	4770      	bx	lr

08007366 <__i2b>:
 8007366:	b510      	push	{r4, lr}
 8007368:	460c      	mov	r4, r1
 800736a:	2101      	movs	r1, #1
 800736c:	f7ff ff27 	bl	80071be <_Balloc>
 8007370:	2201      	movs	r2, #1
 8007372:	6144      	str	r4, [r0, #20]
 8007374:	6102      	str	r2, [r0, #16]
 8007376:	bd10      	pop	{r4, pc}

08007378 <__multiply>:
 8007378:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800737c:	4614      	mov	r4, r2
 800737e:	690a      	ldr	r2, [r1, #16]
 8007380:	6923      	ldr	r3, [r4, #16]
 8007382:	4688      	mov	r8, r1
 8007384:	429a      	cmp	r2, r3
 8007386:	bfbe      	ittt	lt
 8007388:	460b      	movlt	r3, r1
 800738a:	46a0      	movlt	r8, r4
 800738c:	461c      	movlt	r4, r3
 800738e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007392:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800739a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800739e:	eb07 0609 	add.w	r6, r7, r9
 80073a2:	42b3      	cmp	r3, r6
 80073a4:	bfb8      	it	lt
 80073a6:	3101      	addlt	r1, #1
 80073a8:	f7ff ff09 	bl	80071be <_Balloc>
 80073ac:	f100 0514 	add.w	r5, r0, #20
 80073b0:	462b      	mov	r3, r5
 80073b2:	2200      	movs	r2, #0
 80073b4:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80073b8:	4573      	cmp	r3, lr
 80073ba:	d316      	bcc.n	80073ea <__multiply+0x72>
 80073bc:	f104 0214 	add.w	r2, r4, #20
 80073c0:	f108 0114 	add.w	r1, r8, #20
 80073c4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80073c8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80073cc:	9300      	str	r3, [sp, #0]
 80073ce:	9b00      	ldr	r3, [sp, #0]
 80073d0:	9201      	str	r2, [sp, #4]
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d80c      	bhi.n	80073f0 <__multiply+0x78>
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	dd03      	ble.n	80073e2 <__multiply+0x6a>
 80073da:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d05d      	beq.n	800749e <__multiply+0x126>
 80073e2:	6106      	str	r6, [r0, #16]
 80073e4:	b003      	add	sp, #12
 80073e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ea:	f843 2b04 	str.w	r2, [r3], #4
 80073ee:	e7e3      	b.n	80073b8 <__multiply+0x40>
 80073f0:	f8b2 b000 	ldrh.w	fp, [r2]
 80073f4:	f1bb 0f00 	cmp.w	fp, #0
 80073f8:	d023      	beq.n	8007442 <__multiply+0xca>
 80073fa:	4689      	mov	r9, r1
 80073fc:	46ac      	mov	ip, r5
 80073fe:	f04f 0800 	mov.w	r8, #0
 8007402:	f859 4b04 	ldr.w	r4, [r9], #4
 8007406:	f8dc a000 	ldr.w	sl, [ip]
 800740a:	b2a3      	uxth	r3, r4
 800740c:	fa1f fa8a 	uxth.w	sl, sl
 8007410:	fb0b a303 	mla	r3, fp, r3, sl
 8007414:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8007418:	f8dc 4000 	ldr.w	r4, [ip]
 800741c:	4443      	add	r3, r8
 800741e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007422:	fb0b 840a 	mla	r4, fp, sl, r8
 8007426:	46e2      	mov	sl, ip
 8007428:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800742c:	b29b      	uxth	r3, r3
 800742e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007432:	454f      	cmp	r7, r9
 8007434:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8007438:	f84a 3b04 	str.w	r3, [sl], #4
 800743c:	d82b      	bhi.n	8007496 <__multiply+0x11e>
 800743e:	f8cc 8004 	str.w	r8, [ip, #4]
 8007442:	9b01      	ldr	r3, [sp, #4]
 8007444:	3204      	adds	r2, #4
 8007446:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800744a:	f1ba 0f00 	cmp.w	sl, #0
 800744e:	d020      	beq.n	8007492 <__multiply+0x11a>
 8007450:	4689      	mov	r9, r1
 8007452:	46a8      	mov	r8, r5
 8007454:	f04f 0b00 	mov.w	fp, #0
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	f8b9 c000 	ldrh.w	ip, [r9]
 800745e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8007462:	b29b      	uxth	r3, r3
 8007464:	fb0a 440c 	mla	r4, sl, ip, r4
 8007468:	46c4      	mov	ip, r8
 800746a:	445c      	add	r4, fp
 800746c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007470:	f84c 3b04 	str.w	r3, [ip], #4
 8007474:	f859 3b04 	ldr.w	r3, [r9], #4
 8007478:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800747c:	0c1b      	lsrs	r3, r3, #16
 800747e:	fb0a b303 	mla	r3, sl, r3, fp
 8007482:	454f      	cmp	r7, r9
 8007484:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8007488:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800748c:	d805      	bhi.n	800749a <__multiply+0x122>
 800748e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007492:	3504      	adds	r5, #4
 8007494:	e79b      	b.n	80073ce <__multiply+0x56>
 8007496:	46d4      	mov	ip, sl
 8007498:	e7b3      	b.n	8007402 <__multiply+0x8a>
 800749a:	46e0      	mov	r8, ip
 800749c:	e7dd      	b.n	800745a <__multiply+0xe2>
 800749e:	3e01      	subs	r6, #1
 80074a0:	e799      	b.n	80073d6 <__multiply+0x5e>
	...

080074a4 <__pow5mult>:
 80074a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074a8:	4615      	mov	r5, r2
 80074aa:	f012 0203 	ands.w	r2, r2, #3
 80074ae:	4606      	mov	r6, r0
 80074b0:	460f      	mov	r7, r1
 80074b2:	d007      	beq.n	80074c4 <__pow5mult+0x20>
 80074b4:	4c21      	ldr	r4, [pc, #132]	; (800753c <__pow5mult+0x98>)
 80074b6:	3a01      	subs	r2, #1
 80074b8:	2300      	movs	r3, #0
 80074ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074be:	f7ff fec9 	bl	8007254 <__multadd>
 80074c2:	4607      	mov	r7, r0
 80074c4:	10ad      	asrs	r5, r5, #2
 80074c6:	d035      	beq.n	8007534 <__pow5mult+0x90>
 80074c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80074ca:	b93c      	cbnz	r4, 80074dc <__pow5mult+0x38>
 80074cc:	2010      	movs	r0, #16
 80074ce:	f7ff fe55 	bl	800717c <malloc>
 80074d2:	6270      	str	r0, [r6, #36]	; 0x24
 80074d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074d8:	6004      	str	r4, [r0, #0]
 80074da:	60c4      	str	r4, [r0, #12]
 80074dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80074e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074e4:	b94c      	cbnz	r4, 80074fa <__pow5mult+0x56>
 80074e6:	f240 2171 	movw	r1, #625	; 0x271
 80074ea:	4630      	mov	r0, r6
 80074ec:	f7ff ff3b 	bl	8007366 <__i2b>
 80074f0:	2300      	movs	r3, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80074f8:	6003      	str	r3, [r0, #0]
 80074fa:	f04f 0800 	mov.w	r8, #0
 80074fe:	07eb      	lsls	r3, r5, #31
 8007500:	d50a      	bpl.n	8007518 <__pow5mult+0x74>
 8007502:	4639      	mov	r1, r7
 8007504:	4622      	mov	r2, r4
 8007506:	4630      	mov	r0, r6
 8007508:	f7ff ff36 	bl	8007378 <__multiply>
 800750c:	4681      	mov	r9, r0
 800750e:	4639      	mov	r1, r7
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff fe88 	bl	8007226 <_Bfree>
 8007516:	464f      	mov	r7, r9
 8007518:	106d      	asrs	r5, r5, #1
 800751a:	d00b      	beq.n	8007534 <__pow5mult+0x90>
 800751c:	6820      	ldr	r0, [r4, #0]
 800751e:	b938      	cbnz	r0, 8007530 <__pow5mult+0x8c>
 8007520:	4622      	mov	r2, r4
 8007522:	4621      	mov	r1, r4
 8007524:	4630      	mov	r0, r6
 8007526:	f7ff ff27 	bl	8007378 <__multiply>
 800752a:	6020      	str	r0, [r4, #0]
 800752c:	f8c0 8000 	str.w	r8, [r0]
 8007530:	4604      	mov	r4, r0
 8007532:	e7e4      	b.n	80074fe <__pow5mult+0x5a>
 8007534:	4638      	mov	r0, r7
 8007536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753a:	bf00      	nop
 800753c:	08009108 	.word	0x08009108

08007540 <__lshift>:
 8007540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007544:	460c      	mov	r4, r1
 8007546:	4607      	mov	r7, r0
 8007548:	4616      	mov	r6, r2
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007550:	eb0a 0903 	add.w	r9, sl, r3
 8007554:	6849      	ldr	r1, [r1, #4]
 8007556:	68a3      	ldr	r3, [r4, #8]
 8007558:	f109 0501 	add.w	r5, r9, #1
 800755c:	42ab      	cmp	r3, r5
 800755e:	db32      	blt.n	80075c6 <__lshift+0x86>
 8007560:	4638      	mov	r0, r7
 8007562:	f7ff fe2c 	bl	80071be <_Balloc>
 8007566:	2300      	movs	r3, #0
 8007568:	4680      	mov	r8, r0
 800756a:	461a      	mov	r2, r3
 800756c:	f100 0114 	add.w	r1, r0, #20
 8007570:	4553      	cmp	r3, sl
 8007572:	db2b      	blt.n	80075cc <__lshift+0x8c>
 8007574:	6920      	ldr	r0, [r4, #16]
 8007576:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800757a:	f104 0314 	add.w	r3, r4, #20
 800757e:	f016 021f 	ands.w	r2, r6, #31
 8007582:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007586:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800758a:	d025      	beq.n	80075d8 <__lshift+0x98>
 800758c:	2000      	movs	r0, #0
 800758e:	f1c2 0e20 	rsb	lr, r2, #32
 8007592:	468a      	mov	sl, r1
 8007594:	681e      	ldr	r6, [r3, #0]
 8007596:	4096      	lsls	r6, r2
 8007598:	4330      	orrs	r0, r6
 800759a:	f84a 0b04 	str.w	r0, [sl], #4
 800759e:	f853 0b04 	ldr.w	r0, [r3], #4
 80075a2:	459c      	cmp	ip, r3
 80075a4:	fa20 f00e 	lsr.w	r0, r0, lr
 80075a8:	d814      	bhi.n	80075d4 <__lshift+0x94>
 80075aa:	6048      	str	r0, [r1, #4]
 80075ac:	b108      	cbz	r0, 80075b2 <__lshift+0x72>
 80075ae:	f109 0502 	add.w	r5, r9, #2
 80075b2:	3d01      	subs	r5, #1
 80075b4:	4638      	mov	r0, r7
 80075b6:	f8c8 5010 	str.w	r5, [r8, #16]
 80075ba:	4621      	mov	r1, r4
 80075bc:	f7ff fe33 	bl	8007226 <_Bfree>
 80075c0:	4640      	mov	r0, r8
 80075c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075c6:	3101      	adds	r1, #1
 80075c8:	005b      	lsls	r3, r3, #1
 80075ca:	e7c7      	b.n	800755c <__lshift+0x1c>
 80075cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80075d0:	3301      	adds	r3, #1
 80075d2:	e7cd      	b.n	8007570 <__lshift+0x30>
 80075d4:	4651      	mov	r1, sl
 80075d6:	e7dc      	b.n	8007592 <__lshift+0x52>
 80075d8:	3904      	subs	r1, #4
 80075da:	f853 2b04 	ldr.w	r2, [r3], #4
 80075de:	459c      	cmp	ip, r3
 80075e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80075e4:	d8f9      	bhi.n	80075da <__lshift+0x9a>
 80075e6:	e7e4      	b.n	80075b2 <__lshift+0x72>

080075e8 <__mcmp>:
 80075e8:	6903      	ldr	r3, [r0, #16]
 80075ea:	690a      	ldr	r2, [r1, #16]
 80075ec:	b530      	push	{r4, r5, lr}
 80075ee:	1a9b      	subs	r3, r3, r2
 80075f0:	d10c      	bne.n	800760c <__mcmp+0x24>
 80075f2:	0092      	lsls	r2, r2, #2
 80075f4:	3014      	adds	r0, #20
 80075f6:	3114      	adds	r1, #20
 80075f8:	1884      	adds	r4, r0, r2
 80075fa:	4411      	add	r1, r2
 80075fc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007600:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007604:	4295      	cmp	r5, r2
 8007606:	d003      	beq.n	8007610 <__mcmp+0x28>
 8007608:	d305      	bcc.n	8007616 <__mcmp+0x2e>
 800760a:	2301      	movs	r3, #1
 800760c:	4618      	mov	r0, r3
 800760e:	bd30      	pop	{r4, r5, pc}
 8007610:	42a0      	cmp	r0, r4
 8007612:	d3f3      	bcc.n	80075fc <__mcmp+0x14>
 8007614:	e7fa      	b.n	800760c <__mcmp+0x24>
 8007616:	f04f 33ff 	mov.w	r3, #4294967295
 800761a:	e7f7      	b.n	800760c <__mcmp+0x24>

0800761c <__mdiff>:
 800761c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007620:	460d      	mov	r5, r1
 8007622:	4607      	mov	r7, r0
 8007624:	4611      	mov	r1, r2
 8007626:	4628      	mov	r0, r5
 8007628:	4614      	mov	r4, r2
 800762a:	f7ff ffdd 	bl	80075e8 <__mcmp>
 800762e:	1e06      	subs	r6, r0, #0
 8007630:	d108      	bne.n	8007644 <__mdiff+0x28>
 8007632:	4631      	mov	r1, r6
 8007634:	4638      	mov	r0, r7
 8007636:	f7ff fdc2 	bl	80071be <_Balloc>
 800763a:	2301      	movs	r3, #1
 800763c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007644:	bfa4      	itt	ge
 8007646:	4623      	movge	r3, r4
 8007648:	462c      	movge	r4, r5
 800764a:	4638      	mov	r0, r7
 800764c:	6861      	ldr	r1, [r4, #4]
 800764e:	bfa6      	itte	ge
 8007650:	461d      	movge	r5, r3
 8007652:	2600      	movge	r6, #0
 8007654:	2601      	movlt	r6, #1
 8007656:	f7ff fdb2 	bl	80071be <_Balloc>
 800765a:	f04f 0e00 	mov.w	lr, #0
 800765e:	60c6      	str	r6, [r0, #12]
 8007660:	692b      	ldr	r3, [r5, #16]
 8007662:	6926      	ldr	r6, [r4, #16]
 8007664:	f104 0214 	add.w	r2, r4, #20
 8007668:	f105 0914 	add.w	r9, r5, #20
 800766c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8007670:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8007674:	f100 0114 	add.w	r1, r0, #20
 8007678:	f852 ab04 	ldr.w	sl, [r2], #4
 800767c:	f859 5b04 	ldr.w	r5, [r9], #4
 8007680:	fa1f f38a 	uxth.w	r3, sl
 8007684:	4473      	add	r3, lr
 8007686:	b2ac      	uxth	r4, r5
 8007688:	1b1b      	subs	r3, r3, r4
 800768a:	0c2c      	lsrs	r4, r5, #16
 800768c:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 8007690:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007694:	b29b      	uxth	r3, r3
 8007696:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800769a:	45c8      	cmp	r8, r9
 800769c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80076a0:	4694      	mov	ip, r2
 80076a2:	f841 4b04 	str.w	r4, [r1], #4
 80076a6:	d8e7      	bhi.n	8007678 <__mdiff+0x5c>
 80076a8:	45bc      	cmp	ip, r7
 80076aa:	d304      	bcc.n	80076b6 <__mdiff+0x9a>
 80076ac:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80076b0:	b183      	cbz	r3, 80076d4 <__mdiff+0xb8>
 80076b2:	6106      	str	r6, [r0, #16]
 80076b4:	e7c4      	b.n	8007640 <__mdiff+0x24>
 80076b6:	f85c 4b04 	ldr.w	r4, [ip], #4
 80076ba:	b2a2      	uxth	r2, r4
 80076bc:	4472      	add	r2, lr
 80076be:	1413      	asrs	r3, r2, #16
 80076c0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80076c4:	b292      	uxth	r2, r2
 80076c6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80076ca:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80076ce:	f841 2b04 	str.w	r2, [r1], #4
 80076d2:	e7e9      	b.n	80076a8 <__mdiff+0x8c>
 80076d4:	3e01      	subs	r6, #1
 80076d6:	e7e9      	b.n	80076ac <__mdiff+0x90>

080076d8 <__d2b>:
 80076d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80076dc:	461c      	mov	r4, r3
 80076de:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 80076e2:	2101      	movs	r1, #1
 80076e4:	4690      	mov	r8, r2
 80076e6:	f7ff fd6a 	bl	80071be <_Balloc>
 80076ea:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80076ee:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80076f2:	4607      	mov	r7, r0
 80076f4:	bb34      	cbnz	r4, 8007744 <__d2b+0x6c>
 80076f6:	9201      	str	r2, [sp, #4]
 80076f8:	f1b8 0200 	subs.w	r2, r8, #0
 80076fc:	d027      	beq.n	800774e <__d2b+0x76>
 80076fe:	a802      	add	r0, sp, #8
 8007700:	f840 2d08 	str.w	r2, [r0, #-8]!
 8007704:	f7ff fe00 	bl	8007308 <__lo0bits>
 8007708:	9900      	ldr	r1, [sp, #0]
 800770a:	b1f0      	cbz	r0, 800774a <__d2b+0x72>
 800770c:	9a01      	ldr	r2, [sp, #4]
 800770e:	f1c0 0320 	rsb	r3, r0, #32
 8007712:	fa02 f303 	lsl.w	r3, r2, r3
 8007716:	430b      	orrs	r3, r1
 8007718:	40c2      	lsrs	r2, r0
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	9201      	str	r2, [sp, #4]
 800771e:	9b01      	ldr	r3, [sp, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	bf14      	ite	ne
 8007724:	2102      	movne	r1, #2
 8007726:	2101      	moveq	r1, #1
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	6139      	str	r1, [r7, #16]
 800772c:	b1c4      	cbz	r4, 8007760 <__d2b+0x88>
 800772e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8007732:	4404      	add	r4, r0
 8007734:	6034      	str	r4, [r6, #0]
 8007736:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800773a:	6028      	str	r0, [r5, #0]
 800773c:	4638      	mov	r0, r7
 800773e:	b002      	add	sp, #8
 8007740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007744:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007748:	e7d5      	b.n	80076f6 <__d2b+0x1e>
 800774a:	6179      	str	r1, [r7, #20]
 800774c:	e7e7      	b.n	800771e <__d2b+0x46>
 800774e:	a801      	add	r0, sp, #4
 8007750:	f7ff fdda 	bl	8007308 <__lo0bits>
 8007754:	2101      	movs	r1, #1
 8007756:	9b01      	ldr	r3, [sp, #4]
 8007758:	6139      	str	r1, [r7, #16]
 800775a:	617b      	str	r3, [r7, #20]
 800775c:	3020      	adds	r0, #32
 800775e:	e7e5      	b.n	800772c <__d2b+0x54>
 8007760:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007764:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8007768:	6030      	str	r0, [r6, #0]
 800776a:	6918      	ldr	r0, [r3, #16]
 800776c:	f7ff fdad 	bl	80072ca <__hi0bits>
 8007770:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8007774:	e7e1      	b.n	800773a <__d2b+0x62>

08007776 <_calloc_r>:
 8007776:	b538      	push	{r3, r4, r5, lr}
 8007778:	fb02 f401 	mul.w	r4, r2, r1
 800777c:	4621      	mov	r1, r4
 800777e:	f000 f855 	bl	800782c <_malloc_r>
 8007782:	4605      	mov	r5, r0
 8007784:	b118      	cbz	r0, 800778e <_calloc_r+0x18>
 8007786:	4622      	mov	r2, r4
 8007788:	2100      	movs	r1, #0
 800778a:	f7fe fa2f 	bl	8005bec <memset>
 800778e:	4628      	mov	r0, r5
 8007790:	bd38      	pop	{r3, r4, r5, pc}
	...

08007794 <_free_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4605      	mov	r5, r0
 8007798:	2900      	cmp	r1, #0
 800779a:	d043      	beq.n	8007824 <_free_r+0x90>
 800779c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a0:	1f0c      	subs	r4, r1, #4
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	bfb8      	it	lt
 80077a6:	18e4      	addlt	r4, r4, r3
 80077a8:	f000 fa27 	bl	8007bfa <__malloc_lock>
 80077ac:	4a1e      	ldr	r2, [pc, #120]	; (8007828 <_free_r+0x94>)
 80077ae:	6813      	ldr	r3, [r2, #0]
 80077b0:	4610      	mov	r0, r2
 80077b2:	b933      	cbnz	r3, 80077c2 <_free_r+0x2e>
 80077b4:	6063      	str	r3, [r4, #4]
 80077b6:	6014      	str	r4, [r2, #0]
 80077b8:	4628      	mov	r0, r5
 80077ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077be:	f000 ba1d 	b.w	8007bfc <__malloc_unlock>
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	d90b      	bls.n	80077de <_free_r+0x4a>
 80077c6:	6821      	ldr	r1, [r4, #0]
 80077c8:	1862      	adds	r2, r4, r1
 80077ca:	4293      	cmp	r3, r2
 80077cc:	bf01      	itttt	eq
 80077ce:	681a      	ldreq	r2, [r3, #0]
 80077d0:	685b      	ldreq	r3, [r3, #4]
 80077d2:	1852      	addeq	r2, r2, r1
 80077d4:	6022      	streq	r2, [r4, #0]
 80077d6:	6063      	str	r3, [r4, #4]
 80077d8:	6004      	str	r4, [r0, #0]
 80077da:	e7ed      	b.n	80077b8 <_free_r+0x24>
 80077dc:	4613      	mov	r3, r2
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	b10a      	cbz	r2, 80077e6 <_free_r+0x52>
 80077e2:	42a2      	cmp	r2, r4
 80077e4:	d9fa      	bls.n	80077dc <_free_r+0x48>
 80077e6:	6819      	ldr	r1, [r3, #0]
 80077e8:	1858      	adds	r0, r3, r1
 80077ea:	42a0      	cmp	r0, r4
 80077ec:	d10b      	bne.n	8007806 <_free_r+0x72>
 80077ee:	6820      	ldr	r0, [r4, #0]
 80077f0:	4401      	add	r1, r0
 80077f2:	1858      	adds	r0, r3, r1
 80077f4:	4282      	cmp	r2, r0
 80077f6:	6019      	str	r1, [r3, #0]
 80077f8:	d1de      	bne.n	80077b8 <_free_r+0x24>
 80077fa:	6810      	ldr	r0, [r2, #0]
 80077fc:	6852      	ldr	r2, [r2, #4]
 80077fe:	4401      	add	r1, r0
 8007800:	6019      	str	r1, [r3, #0]
 8007802:	605a      	str	r2, [r3, #4]
 8007804:	e7d8      	b.n	80077b8 <_free_r+0x24>
 8007806:	d902      	bls.n	800780e <_free_r+0x7a>
 8007808:	230c      	movs	r3, #12
 800780a:	602b      	str	r3, [r5, #0]
 800780c:	e7d4      	b.n	80077b8 <_free_r+0x24>
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	1821      	adds	r1, r4, r0
 8007812:	428a      	cmp	r2, r1
 8007814:	bf01      	itttt	eq
 8007816:	6811      	ldreq	r1, [r2, #0]
 8007818:	6852      	ldreq	r2, [r2, #4]
 800781a:	1809      	addeq	r1, r1, r0
 800781c:	6021      	streq	r1, [r4, #0]
 800781e:	6062      	str	r2, [r4, #4]
 8007820:	605c      	str	r4, [r3, #4]
 8007822:	e7c9      	b.n	80077b8 <_free_r+0x24>
 8007824:	bd38      	pop	{r3, r4, r5, pc}
 8007826:	bf00      	nop
 8007828:	20000614 	.word	0x20000614

0800782c <_malloc_r>:
 800782c:	b570      	push	{r4, r5, r6, lr}
 800782e:	1ccd      	adds	r5, r1, #3
 8007830:	f025 0503 	bic.w	r5, r5, #3
 8007834:	3508      	adds	r5, #8
 8007836:	2d0c      	cmp	r5, #12
 8007838:	bf38      	it	cc
 800783a:	250c      	movcc	r5, #12
 800783c:	2d00      	cmp	r5, #0
 800783e:	4606      	mov	r6, r0
 8007840:	db01      	blt.n	8007846 <_malloc_r+0x1a>
 8007842:	42a9      	cmp	r1, r5
 8007844:	d903      	bls.n	800784e <_malloc_r+0x22>
 8007846:	230c      	movs	r3, #12
 8007848:	6033      	str	r3, [r6, #0]
 800784a:	2000      	movs	r0, #0
 800784c:	bd70      	pop	{r4, r5, r6, pc}
 800784e:	f000 f9d4 	bl	8007bfa <__malloc_lock>
 8007852:	4a21      	ldr	r2, [pc, #132]	; (80078d8 <_malloc_r+0xac>)
 8007854:	6814      	ldr	r4, [r2, #0]
 8007856:	4621      	mov	r1, r4
 8007858:	b991      	cbnz	r1, 8007880 <_malloc_r+0x54>
 800785a:	4c20      	ldr	r4, [pc, #128]	; (80078dc <_malloc_r+0xb0>)
 800785c:	6823      	ldr	r3, [r4, #0]
 800785e:	b91b      	cbnz	r3, 8007868 <_malloc_r+0x3c>
 8007860:	4630      	mov	r0, r6
 8007862:	f000 f98f 	bl	8007b84 <_sbrk_r>
 8007866:	6020      	str	r0, [r4, #0]
 8007868:	4629      	mov	r1, r5
 800786a:	4630      	mov	r0, r6
 800786c:	f000 f98a 	bl	8007b84 <_sbrk_r>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d124      	bne.n	80078be <_malloc_r+0x92>
 8007874:	230c      	movs	r3, #12
 8007876:	4630      	mov	r0, r6
 8007878:	6033      	str	r3, [r6, #0]
 800787a:	f000 f9bf 	bl	8007bfc <__malloc_unlock>
 800787e:	e7e4      	b.n	800784a <_malloc_r+0x1e>
 8007880:	680b      	ldr	r3, [r1, #0]
 8007882:	1b5b      	subs	r3, r3, r5
 8007884:	d418      	bmi.n	80078b8 <_malloc_r+0x8c>
 8007886:	2b0b      	cmp	r3, #11
 8007888:	d90f      	bls.n	80078aa <_malloc_r+0x7e>
 800788a:	600b      	str	r3, [r1, #0]
 800788c:	18cc      	adds	r4, r1, r3
 800788e:	50cd      	str	r5, [r1, r3]
 8007890:	4630      	mov	r0, r6
 8007892:	f000 f9b3 	bl	8007bfc <__malloc_unlock>
 8007896:	f104 000b 	add.w	r0, r4, #11
 800789a:	1d23      	adds	r3, r4, #4
 800789c:	f020 0007 	bic.w	r0, r0, #7
 80078a0:	1ac3      	subs	r3, r0, r3
 80078a2:	d0d3      	beq.n	800784c <_malloc_r+0x20>
 80078a4:	425a      	negs	r2, r3
 80078a6:	50e2      	str	r2, [r4, r3]
 80078a8:	e7d0      	b.n	800784c <_malloc_r+0x20>
 80078aa:	684b      	ldr	r3, [r1, #4]
 80078ac:	428c      	cmp	r4, r1
 80078ae:	bf16      	itet	ne
 80078b0:	6063      	strne	r3, [r4, #4]
 80078b2:	6013      	streq	r3, [r2, #0]
 80078b4:	460c      	movne	r4, r1
 80078b6:	e7eb      	b.n	8007890 <_malloc_r+0x64>
 80078b8:	460c      	mov	r4, r1
 80078ba:	6849      	ldr	r1, [r1, #4]
 80078bc:	e7cc      	b.n	8007858 <_malloc_r+0x2c>
 80078be:	1cc4      	adds	r4, r0, #3
 80078c0:	f024 0403 	bic.w	r4, r4, #3
 80078c4:	42a0      	cmp	r0, r4
 80078c6:	d005      	beq.n	80078d4 <_malloc_r+0xa8>
 80078c8:	1a21      	subs	r1, r4, r0
 80078ca:	4630      	mov	r0, r6
 80078cc:	f000 f95a 	bl	8007b84 <_sbrk_r>
 80078d0:	3001      	adds	r0, #1
 80078d2:	d0cf      	beq.n	8007874 <_malloc_r+0x48>
 80078d4:	6025      	str	r5, [r4, #0]
 80078d6:	e7db      	b.n	8007890 <_malloc_r+0x64>
 80078d8:	20000614 	.word	0x20000614
 80078dc:	20000618 	.word	0x20000618

080078e0 <__ssputs_r>:
 80078e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e4:	688e      	ldr	r6, [r1, #8]
 80078e6:	4682      	mov	sl, r0
 80078e8:	429e      	cmp	r6, r3
 80078ea:	460c      	mov	r4, r1
 80078ec:	4690      	mov	r8, r2
 80078ee:	4699      	mov	r9, r3
 80078f0:	d837      	bhi.n	8007962 <__ssputs_r+0x82>
 80078f2:	898a      	ldrh	r2, [r1, #12]
 80078f4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078f8:	d031      	beq.n	800795e <__ssputs_r+0x7e>
 80078fa:	2302      	movs	r3, #2
 80078fc:	6825      	ldr	r5, [r4, #0]
 80078fe:	6909      	ldr	r1, [r1, #16]
 8007900:	1a6f      	subs	r7, r5, r1
 8007902:	6965      	ldr	r5, [r4, #20]
 8007904:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007908:	fb95 f5f3 	sdiv	r5, r5, r3
 800790c:	f109 0301 	add.w	r3, r9, #1
 8007910:	443b      	add	r3, r7
 8007912:	429d      	cmp	r5, r3
 8007914:	bf38      	it	cc
 8007916:	461d      	movcc	r5, r3
 8007918:	0553      	lsls	r3, r2, #21
 800791a:	d530      	bpl.n	800797e <__ssputs_r+0x9e>
 800791c:	4629      	mov	r1, r5
 800791e:	f7ff ff85 	bl	800782c <_malloc_r>
 8007922:	4606      	mov	r6, r0
 8007924:	b950      	cbnz	r0, 800793c <__ssputs_r+0x5c>
 8007926:	230c      	movs	r3, #12
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	f8ca 3000 	str.w	r3, [sl]
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007936:	81a3      	strh	r3, [r4, #12]
 8007938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800793c:	463a      	mov	r2, r7
 800793e:	6921      	ldr	r1, [r4, #16]
 8007940:	f7ff fc32 	bl	80071a8 <memcpy>
 8007944:	89a3      	ldrh	r3, [r4, #12]
 8007946:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800794a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	6126      	str	r6, [r4, #16]
 8007952:	443e      	add	r6, r7
 8007954:	6026      	str	r6, [r4, #0]
 8007956:	464e      	mov	r6, r9
 8007958:	6165      	str	r5, [r4, #20]
 800795a:	1bed      	subs	r5, r5, r7
 800795c:	60a5      	str	r5, [r4, #8]
 800795e:	454e      	cmp	r6, r9
 8007960:	d900      	bls.n	8007964 <__ssputs_r+0x84>
 8007962:	464e      	mov	r6, r9
 8007964:	4632      	mov	r2, r6
 8007966:	4641      	mov	r1, r8
 8007968:	6820      	ldr	r0, [r4, #0]
 800796a:	f000 f92d 	bl	8007bc8 <memmove>
 800796e:	68a3      	ldr	r3, [r4, #8]
 8007970:	2000      	movs	r0, #0
 8007972:	1b9b      	subs	r3, r3, r6
 8007974:	60a3      	str	r3, [r4, #8]
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	441e      	add	r6, r3
 800797a:	6026      	str	r6, [r4, #0]
 800797c:	e7dc      	b.n	8007938 <__ssputs_r+0x58>
 800797e:	462a      	mov	r2, r5
 8007980:	f000 f93d 	bl	8007bfe <_realloc_r>
 8007984:	4606      	mov	r6, r0
 8007986:	2800      	cmp	r0, #0
 8007988:	d1e2      	bne.n	8007950 <__ssputs_r+0x70>
 800798a:	6921      	ldr	r1, [r4, #16]
 800798c:	4650      	mov	r0, sl
 800798e:	f7ff ff01 	bl	8007794 <_free_r>
 8007992:	e7c8      	b.n	8007926 <__ssputs_r+0x46>

08007994 <_svfiprintf_r>:
 8007994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007998:	461d      	mov	r5, r3
 800799a:	898b      	ldrh	r3, [r1, #12]
 800799c:	b09d      	sub	sp, #116	; 0x74
 800799e:	061f      	lsls	r7, r3, #24
 80079a0:	4680      	mov	r8, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	4616      	mov	r6, r2
 80079a6:	d50f      	bpl.n	80079c8 <_svfiprintf_r+0x34>
 80079a8:	690b      	ldr	r3, [r1, #16]
 80079aa:	b96b      	cbnz	r3, 80079c8 <_svfiprintf_r+0x34>
 80079ac:	2140      	movs	r1, #64	; 0x40
 80079ae:	f7ff ff3d 	bl	800782c <_malloc_r>
 80079b2:	6020      	str	r0, [r4, #0]
 80079b4:	6120      	str	r0, [r4, #16]
 80079b6:	b928      	cbnz	r0, 80079c4 <_svfiprintf_r+0x30>
 80079b8:	230c      	movs	r3, #12
 80079ba:	f8c8 3000 	str.w	r3, [r8]
 80079be:	f04f 30ff 	mov.w	r0, #4294967295
 80079c2:	e0c8      	b.n	8007b56 <_svfiprintf_r+0x1c2>
 80079c4:	2340      	movs	r3, #64	; 0x40
 80079c6:	6163      	str	r3, [r4, #20]
 80079c8:	2300      	movs	r3, #0
 80079ca:	9309      	str	r3, [sp, #36]	; 0x24
 80079cc:	2320      	movs	r3, #32
 80079ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079d2:	2330      	movs	r3, #48	; 0x30
 80079d4:	f04f 0b01 	mov.w	fp, #1
 80079d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079dc:	9503      	str	r5, [sp, #12]
 80079de:	4637      	mov	r7, r6
 80079e0:	463d      	mov	r5, r7
 80079e2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80079e6:	b10b      	cbz	r3, 80079ec <_svfiprintf_r+0x58>
 80079e8:	2b25      	cmp	r3, #37	; 0x25
 80079ea:	d13e      	bne.n	8007a6a <_svfiprintf_r+0xd6>
 80079ec:	ebb7 0a06 	subs.w	sl, r7, r6
 80079f0:	d00b      	beq.n	8007a0a <_svfiprintf_r+0x76>
 80079f2:	4653      	mov	r3, sl
 80079f4:	4632      	mov	r2, r6
 80079f6:	4621      	mov	r1, r4
 80079f8:	4640      	mov	r0, r8
 80079fa:	f7ff ff71 	bl	80078e0 <__ssputs_r>
 80079fe:	3001      	adds	r0, #1
 8007a00:	f000 80a4 	beq.w	8007b4c <_svfiprintf_r+0x1b8>
 8007a04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a06:	4453      	add	r3, sl
 8007a08:	9309      	str	r3, [sp, #36]	; 0x24
 8007a0a:	783b      	ldrb	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f000 809d 	beq.w	8007b4c <_svfiprintf_r+0x1b8>
 8007a12:	2300      	movs	r3, #0
 8007a14:	f04f 32ff 	mov.w	r2, #4294967295
 8007a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a1c:	9304      	str	r3, [sp, #16]
 8007a1e:	9307      	str	r3, [sp, #28]
 8007a20:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a24:	931a      	str	r3, [sp, #104]	; 0x68
 8007a26:	462f      	mov	r7, r5
 8007a28:	2205      	movs	r2, #5
 8007a2a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007a2e:	4850      	ldr	r0, [pc, #320]	; (8007b70 <_svfiprintf_r+0x1dc>)
 8007a30:	f7ff fbac 	bl	800718c <memchr>
 8007a34:	9b04      	ldr	r3, [sp, #16]
 8007a36:	b9d0      	cbnz	r0, 8007a6e <_svfiprintf_r+0xda>
 8007a38:	06d9      	lsls	r1, r3, #27
 8007a3a:	bf44      	itt	mi
 8007a3c:	2220      	movmi	r2, #32
 8007a3e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a42:	071a      	lsls	r2, r3, #28
 8007a44:	bf44      	itt	mi
 8007a46:	222b      	movmi	r2, #43	; 0x2b
 8007a48:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007a4c:	782a      	ldrb	r2, [r5, #0]
 8007a4e:	2a2a      	cmp	r2, #42	; 0x2a
 8007a50:	d015      	beq.n	8007a7e <_svfiprintf_r+0xea>
 8007a52:	462f      	mov	r7, r5
 8007a54:	2000      	movs	r0, #0
 8007a56:	250a      	movs	r5, #10
 8007a58:	9a07      	ldr	r2, [sp, #28]
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a60:	3b30      	subs	r3, #48	; 0x30
 8007a62:	2b09      	cmp	r3, #9
 8007a64:	d94d      	bls.n	8007b02 <_svfiprintf_r+0x16e>
 8007a66:	b1b8      	cbz	r0, 8007a98 <_svfiprintf_r+0x104>
 8007a68:	e00f      	b.n	8007a8a <_svfiprintf_r+0xf6>
 8007a6a:	462f      	mov	r7, r5
 8007a6c:	e7b8      	b.n	80079e0 <_svfiprintf_r+0x4c>
 8007a6e:	4a40      	ldr	r2, [pc, #256]	; (8007b70 <_svfiprintf_r+0x1dc>)
 8007a70:	463d      	mov	r5, r7
 8007a72:	1a80      	subs	r0, r0, r2
 8007a74:	fa0b f000 	lsl.w	r0, fp, r0
 8007a78:	4318      	orrs	r0, r3
 8007a7a:	9004      	str	r0, [sp, #16]
 8007a7c:	e7d3      	b.n	8007a26 <_svfiprintf_r+0x92>
 8007a7e:	9a03      	ldr	r2, [sp, #12]
 8007a80:	1d11      	adds	r1, r2, #4
 8007a82:	6812      	ldr	r2, [r2, #0]
 8007a84:	9103      	str	r1, [sp, #12]
 8007a86:	2a00      	cmp	r2, #0
 8007a88:	db01      	blt.n	8007a8e <_svfiprintf_r+0xfa>
 8007a8a:	9207      	str	r2, [sp, #28]
 8007a8c:	e004      	b.n	8007a98 <_svfiprintf_r+0x104>
 8007a8e:	4252      	negs	r2, r2
 8007a90:	f043 0302 	orr.w	r3, r3, #2
 8007a94:	9207      	str	r2, [sp, #28]
 8007a96:	9304      	str	r3, [sp, #16]
 8007a98:	783b      	ldrb	r3, [r7, #0]
 8007a9a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a9c:	d10c      	bne.n	8007ab8 <_svfiprintf_r+0x124>
 8007a9e:	787b      	ldrb	r3, [r7, #1]
 8007aa0:	2b2a      	cmp	r3, #42	; 0x2a
 8007aa2:	d133      	bne.n	8007b0c <_svfiprintf_r+0x178>
 8007aa4:	9b03      	ldr	r3, [sp, #12]
 8007aa6:	3702      	adds	r7, #2
 8007aa8:	1d1a      	adds	r2, r3, #4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	9203      	str	r2, [sp, #12]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	bfb8      	it	lt
 8007ab2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ab6:	9305      	str	r3, [sp, #20]
 8007ab8:	4d2e      	ldr	r5, [pc, #184]	; (8007b74 <_svfiprintf_r+0x1e0>)
 8007aba:	2203      	movs	r2, #3
 8007abc:	7839      	ldrb	r1, [r7, #0]
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f7ff fb64 	bl	800718c <memchr>
 8007ac4:	b138      	cbz	r0, 8007ad6 <_svfiprintf_r+0x142>
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	1b40      	subs	r0, r0, r5
 8007aca:	fa03 f000 	lsl.w	r0, r3, r0
 8007ace:	9b04      	ldr	r3, [sp, #16]
 8007ad0:	3701      	adds	r7, #1
 8007ad2:	4303      	orrs	r3, r0
 8007ad4:	9304      	str	r3, [sp, #16]
 8007ad6:	7839      	ldrb	r1, [r7, #0]
 8007ad8:	2206      	movs	r2, #6
 8007ada:	4827      	ldr	r0, [pc, #156]	; (8007b78 <_svfiprintf_r+0x1e4>)
 8007adc:	1c7e      	adds	r6, r7, #1
 8007ade:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ae2:	f7ff fb53 	bl	800718c <memchr>
 8007ae6:	2800      	cmp	r0, #0
 8007ae8:	d038      	beq.n	8007b5c <_svfiprintf_r+0x1c8>
 8007aea:	4b24      	ldr	r3, [pc, #144]	; (8007b7c <_svfiprintf_r+0x1e8>)
 8007aec:	bb13      	cbnz	r3, 8007b34 <_svfiprintf_r+0x1a0>
 8007aee:	9b03      	ldr	r3, [sp, #12]
 8007af0:	3307      	adds	r3, #7
 8007af2:	f023 0307 	bic.w	r3, r3, #7
 8007af6:	3308      	adds	r3, #8
 8007af8:	9303      	str	r3, [sp, #12]
 8007afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007afc:	444b      	add	r3, r9
 8007afe:	9309      	str	r3, [sp, #36]	; 0x24
 8007b00:	e76d      	b.n	80079de <_svfiprintf_r+0x4a>
 8007b02:	fb05 3202 	mla	r2, r5, r2, r3
 8007b06:	2001      	movs	r0, #1
 8007b08:	460f      	mov	r7, r1
 8007b0a:	e7a6      	b.n	8007a5a <_svfiprintf_r+0xc6>
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	250a      	movs	r5, #10
 8007b10:	4619      	mov	r1, r3
 8007b12:	3701      	adds	r7, #1
 8007b14:	9305      	str	r3, [sp, #20]
 8007b16:	4638      	mov	r0, r7
 8007b18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b1c:	3a30      	subs	r2, #48	; 0x30
 8007b1e:	2a09      	cmp	r2, #9
 8007b20:	d903      	bls.n	8007b2a <_svfiprintf_r+0x196>
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0c8      	beq.n	8007ab8 <_svfiprintf_r+0x124>
 8007b26:	9105      	str	r1, [sp, #20]
 8007b28:	e7c6      	b.n	8007ab8 <_svfiprintf_r+0x124>
 8007b2a:	fb05 2101 	mla	r1, r5, r1, r2
 8007b2e:	2301      	movs	r3, #1
 8007b30:	4607      	mov	r7, r0
 8007b32:	e7f0      	b.n	8007b16 <_svfiprintf_r+0x182>
 8007b34:	ab03      	add	r3, sp, #12
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	4622      	mov	r2, r4
 8007b3a:	4b11      	ldr	r3, [pc, #68]	; (8007b80 <_svfiprintf_r+0x1ec>)
 8007b3c:	a904      	add	r1, sp, #16
 8007b3e:	4640      	mov	r0, r8
 8007b40:	f7fe f8ee 	bl	8005d20 <_printf_float>
 8007b44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007b48:	4681      	mov	r9, r0
 8007b4a:	d1d6      	bne.n	8007afa <_svfiprintf_r+0x166>
 8007b4c:	89a3      	ldrh	r3, [r4, #12]
 8007b4e:	065b      	lsls	r3, r3, #25
 8007b50:	f53f af35 	bmi.w	80079be <_svfiprintf_r+0x2a>
 8007b54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b56:	b01d      	add	sp, #116	; 0x74
 8007b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b5c:	ab03      	add	r3, sp, #12
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	4622      	mov	r2, r4
 8007b62:	4b07      	ldr	r3, [pc, #28]	; (8007b80 <_svfiprintf_r+0x1ec>)
 8007b64:	a904      	add	r1, sp, #16
 8007b66:	4640      	mov	r0, r8
 8007b68:	f7fe fb86 	bl	8006278 <_printf_i>
 8007b6c:	e7ea      	b.n	8007b44 <_svfiprintf_r+0x1b0>
 8007b6e:	bf00      	nop
 8007b70:	08009114 	.word	0x08009114
 8007b74:	0800911a 	.word	0x0800911a
 8007b78:	0800911e 	.word	0x0800911e
 8007b7c:	08005d21 	.word	0x08005d21
 8007b80:	080078e1 	.word	0x080078e1

08007b84 <_sbrk_r>:
 8007b84:	b538      	push	{r3, r4, r5, lr}
 8007b86:	2300      	movs	r3, #0
 8007b88:	4c05      	ldr	r4, [pc, #20]	; (8007ba0 <_sbrk_r+0x1c>)
 8007b8a:	4605      	mov	r5, r0
 8007b8c:	4608      	mov	r0, r1
 8007b8e:	6023      	str	r3, [r4, #0]
 8007b90:	f7fa fd40 	bl	8002614 <_sbrk>
 8007b94:	1c43      	adds	r3, r0, #1
 8007b96:	d102      	bne.n	8007b9e <_sbrk_r+0x1a>
 8007b98:	6823      	ldr	r3, [r4, #0]
 8007b9a:	b103      	cbz	r3, 8007b9e <_sbrk_r+0x1a>
 8007b9c:	602b      	str	r3, [r5, #0]
 8007b9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ba0:	20000804 	.word	0x20000804

08007ba4 <__ascii_mbtowc>:
 8007ba4:	b082      	sub	sp, #8
 8007ba6:	b901      	cbnz	r1, 8007baa <__ascii_mbtowc+0x6>
 8007ba8:	a901      	add	r1, sp, #4
 8007baa:	b142      	cbz	r2, 8007bbe <__ascii_mbtowc+0x1a>
 8007bac:	b14b      	cbz	r3, 8007bc2 <__ascii_mbtowc+0x1e>
 8007bae:	7813      	ldrb	r3, [r2, #0]
 8007bb0:	600b      	str	r3, [r1, #0]
 8007bb2:	7812      	ldrb	r2, [r2, #0]
 8007bb4:	1c10      	adds	r0, r2, #0
 8007bb6:	bf18      	it	ne
 8007bb8:	2001      	movne	r0, #1
 8007bba:	b002      	add	sp, #8
 8007bbc:	4770      	bx	lr
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	e7fb      	b.n	8007bba <__ascii_mbtowc+0x16>
 8007bc2:	f06f 0001 	mvn.w	r0, #1
 8007bc6:	e7f8      	b.n	8007bba <__ascii_mbtowc+0x16>

08007bc8 <memmove>:
 8007bc8:	4288      	cmp	r0, r1
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	eb01 0302 	add.w	r3, r1, r2
 8007bd0:	d807      	bhi.n	8007be2 <memmove+0x1a>
 8007bd2:	1e42      	subs	r2, r0, #1
 8007bd4:	4299      	cmp	r1, r3
 8007bd6:	d00a      	beq.n	8007bee <memmove+0x26>
 8007bd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bdc:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007be0:	e7f8      	b.n	8007bd4 <memmove+0xc>
 8007be2:	4283      	cmp	r3, r0
 8007be4:	d9f5      	bls.n	8007bd2 <memmove+0xa>
 8007be6:	1881      	adds	r1, r0, r2
 8007be8:	1ad2      	subs	r2, r2, r3
 8007bea:	42d3      	cmn	r3, r2
 8007bec:	d100      	bne.n	8007bf0 <memmove+0x28>
 8007bee:	bd10      	pop	{r4, pc}
 8007bf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bf4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007bf8:	e7f7      	b.n	8007bea <memmove+0x22>

08007bfa <__malloc_lock>:
 8007bfa:	4770      	bx	lr

08007bfc <__malloc_unlock>:
 8007bfc:	4770      	bx	lr

08007bfe <_realloc_r>:
 8007bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c00:	4607      	mov	r7, r0
 8007c02:	4614      	mov	r4, r2
 8007c04:	460e      	mov	r6, r1
 8007c06:	b921      	cbnz	r1, 8007c12 <_realloc_r+0x14>
 8007c08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007c0c:	4611      	mov	r1, r2
 8007c0e:	f7ff be0d 	b.w	800782c <_malloc_r>
 8007c12:	b922      	cbnz	r2, 8007c1e <_realloc_r+0x20>
 8007c14:	f7ff fdbe 	bl	8007794 <_free_r>
 8007c18:	4625      	mov	r5, r4
 8007c1a:	4628      	mov	r0, r5
 8007c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c1e:	f000 f821 	bl	8007c64 <_malloc_usable_size_r>
 8007c22:	42a0      	cmp	r0, r4
 8007c24:	d20f      	bcs.n	8007c46 <_realloc_r+0x48>
 8007c26:	4621      	mov	r1, r4
 8007c28:	4638      	mov	r0, r7
 8007c2a:	f7ff fdff 	bl	800782c <_malloc_r>
 8007c2e:	4605      	mov	r5, r0
 8007c30:	2800      	cmp	r0, #0
 8007c32:	d0f2      	beq.n	8007c1a <_realloc_r+0x1c>
 8007c34:	4631      	mov	r1, r6
 8007c36:	4622      	mov	r2, r4
 8007c38:	f7ff fab6 	bl	80071a8 <memcpy>
 8007c3c:	4631      	mov	r1, r6
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f7ff fda8 	bl	8007794 <_free_r>
 8007c44:	e7e9      	b.n	8007c1a <_realloc_r+0x1c>
 8007c46:	4635      	mov	r5, r6
 8007c48:	e7e7      	b.n	8007c1a <_realloc_r+0x1c>

08007c4a <__ascii_wctomb>:
 8007c4a:	b149      	cbz	r1, 8007c60 <__ascii_wctomb+0x16>
 8007c4c:	2aff      	cmp	r2, #255	; 0xff
 8007c4e:	bf8b      	itete	hi
 8007c50:	238a      	movhi	r3, #138	; 0x8a
 8007c52:	700a      	strbls	r2, [r1, #0]
 8007c54:	6003      	strhi	r3, [r0, #0]
 8007c56:	2001      	movls	r0, #1
 8007c58:	bf88      	it	hi
 8007c5a:	f04f 30ff 	movhi.w	r0, #4294967295
 8007c5e:	4770      	bx	lr
 8007c60:	4608      	mov	r0, r1
 8007c62:	4770      	bx	lr

08007c64 <_malloc_usable_size_r>:
 8007c64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c68:	1f18      	subs	r0, r3, #4
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	bfbc      	itt	lt
 8007c6e:	580b      	ldrlt	r3, [r1, r0]
 8007c70:	18c0      	addlt	r0, r0, r3
 8007c72:	4770      	bx	lr

08007c74 <powf>:
 8007c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c78:	b08d      	sub	sp, #52	; 0x34
 8007c7a:	4605      	mov	r5, r0
 8007c7c:	460c      	mov	r4, r1
 8007c7e:	f000 f959 	bl	8007f34 <__ieee754_powf>
 8007c82:	f8df 82ac 	ldr.w	r8, [pc, #684]	; 8007f30 <powf+0x2bc>
 8007c86:	4606      	mov	r6, r0
 8007c88:	f998 9000 	ldrsb.w	r9, [r8]
 8007c8c:	4647      	mov	r7, r8
 8007c8e:	f1b9 3fff 	cmp.w	r9, #4294967295
 8007c92:	d060      	beq.n	8007d56 <powf+0xe2>
 8007c94:	4621      	mov	r1, r4
 8007c96:	4620      	mov	r0, r4
 8007c98:	f7f9 fa1a 	bl	80010d0 <__aeabi_fcmpun>
 8007c9c:	4683      	mov	fp, r0
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	d159      	bne.n	8007d56 <powf+0xe2>
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4628      	mov	r0, r5
 8007ca6:	f7f9 fa13 	bl	80010d0 <__aeabi_fcmpun>
 8007caa:	2100      	movs	r1, #0
 8007cac:	4682      	mov	sl, r0
 8007cae:	b300      	cbz	r0, 8007cf2 <powf+0x7e>
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f7f9 f9db 	bl	800106c <__aeabi_fcmpeq>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	d04d      	beq.n	8007d56 <powf+0xe2>
 8007cba:	2301      	movs	r3, #1
 8007cbc:	9302      	str	r3, [sp, #8]
 8007cbe:	4b96      	ldr	r3, [pc, #600]	; (8007f18 <powf+0x2a4>)
 8007cc0:	4628      	mov	r0, r5
 8007cc2:	9303      	str	r3, [sp, #12]
 8007cc4:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007cc8:	f7f8 fbae 	bl	8000428 <__aeabi_f2d>
 8007ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	f7f8 fba9 	bl	8000428 <__aeabi_f2d>
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	4b90      	ldr	r3, [pc, #576]	; (8007f1c <powf+0x2a8>)
 8007cda:	f1b9 0f02 	cmp.w	r9, #2
 8007cde:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007ce2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007ce6:	d031      	beq.n	8007d4c <powf+0xd8>
 8007ce8:	a802      	add	r0, sp, #8
 8007cea:	f000 fcc2 	bl	8008672 <matherr>
 8007cee:	bb38      	cbnz	r0, 8007d40 <powf+0xcc>
 8007cf0:	e05d      	b.n	8007dae <powf+0x13a>
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	f7f9 f9ba 	bl	800106c <__aeabi_fcmpeq>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d05d      	beq.n	8007db8 <powf+0x144>
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	4620      	mov	r0, r4
 8007d00:	f7f9 f9b4 	bl	800106c <__aeabi_fcmpeq>
 8007d04:	4607      	mov	r7, r0
 8007d06:	2800      	cmp	r0, #0
 8007d08:	d029      	beq.n	8007d5e <powf+0xea>
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	9302      	str	r3, [sp, #8]
 8007d0e:	4b82      	ldr	r3, [pc, #520]	; (8007f18 <powf+0x2a4>)
 8007d10:	4628      	mov	r0, r5
 8007d12:	9303      	str	r3, [sp, #12]
 8007d14:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007d18:	f7f8 fb86 	bl	8000428 <__aeabi_f2d>
 8007d1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d20:	4620      	mov	r0, r4
 8007d22:	f7f8 fb81 	bl	8000428 <__aeabi_f2d>
 8007d26:	2200      	movs	r2, #0
 8007d28:	2300      	movs	r3, #0
 8007d2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d2e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d32:	f1b9 0f00 	cmp.w	r9, #0
 8007d36:	d0d7      	beq.n	8007ce8 <powf+0x74>
 8007d38:	2200      	movs	r2, #0
 8007d3a:	4b78      	ldr	r3, [pc, #480]	; (8007f1c <powf+0x2a8>)
 8007d3c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d42:	b11b      	cbz	r3, 8007d4c <powf+0xd8>
 8007d44:	f7fd ff28 	bl	8005b98 <__errno>
 8007d48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d4a:	6003      	str	r3, [r0, #0]
 8007d4c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007d50:	f7f8 fe9a 	bl	8000a88 <__aeabi_d2f>
 8007d54:	4606      	mov	r6, r0
 8007d56:	4630      	mov	r0, r6
 8007d58:	b00d      	add	sp, #52	; 0x34
 8007d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5e:	4620      	mov	r0, r4
 8007d60:	f000 fc8c 	bl	800867c <finitef>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d0f6      	beq.n	8007d56 <powf+0xe2>
 8007d68:	2100      	movs	r1, #0
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f7f9 f988 	bl	8001080 <__aeabi_fcmplt>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d0f0      	beq.n	8007d56 <powf+0xe2>
 8007d74:	2301      	movs	r3, #1
 8007d76:	9302      	str	r3, [sp, #8]
 8007d78:	4b67      	ldr	r3, [pc, #412]	; (8007f18 <powf+0x2a4>)
 8007d7a:	4628      	mov	r0, r5
 8007d7c:	9303      	str	r3, [sp, #12]
 8007d7e:	970a      	str	r7, [sp, #40]	; 0x28
 8007d80:	f7f8 fb52 	bl	8000428 <__aeabi_f2d>
 8007d84:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d88:	4620      	mov	r0, r4
 8007d8a:	f7f8 fb4d 	bl	8000428 <__aeabi_f2d>
 8007d8e:	f998 3000 	ldrsb.w	r3, [r8]
 8007d92:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007d96:	b923      	cbnz	r3, 8007da2 <powf+0x12e>
 8007d98:	2200      	movs	r2, #0
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007da0:	e7a2      	b.n	8007ce8 <powf+0x74>
 8007da2:	2000      	movs	r0, #0
 8007da4:	495e      	ldr	r1, [pc, #376]	; (8007f20 <powf+0x2ac>)
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007dac:	d19c      	bne.n	8007ce8 <powf+0x74>
 8007dae:	f7fd fef3 	bl	8005b98 <__errno>
 8007db2:	2321      	movs	r3, #33	; 0x21
 8007db4:	6003      	str	r3, [r0, #0]
 8007db6:	e7c3      	b.n	8007d40 <powf+0xcc>
 8007db8:	4630      	mov	r0, r6
 8007dba:	f000 fc5f 	bl	800867c <finitef>
 8007dbe:	4681      	mov	r9, r0
 8007dc0:	2800      	cmp	r0, #0
 8007dc2:	d17b      	bne.n	8007ebc <powf+0x248>
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	f000 fc59 	bl	800867c <finitef>
 8007dca:	2800      	cmp	r0, #0
 8007dcc:	d076      	beq.n	8007ebc <powf+0x248>
 8007dce:	4620      	mov	r0, r4
 8007dd0:	f000 fc54 	bl	800867c <finitef>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d071      	beq.n	8007ebc <powf+0x248>
 8007dd8:	4628      	mov	r0, r5
 8007dda:	f7f8 fb25 	bl	8000428 <__aeabi_f2d>
 8007dde:	4682      	mov	sl, r0
 8007de0:	4620      	mov	r0, r4
 8007de2:	468b      	mov	fp, r1
 8007de4:	f7f8 fb20 	bl	8000428 <__aeabi_f2d>
 8007de8:	4602      	mov	r2, r0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4630      	mov	r0, r6
 8007dee:	4631      	mov	r1, r6
 8007df0:	e9cd 2300 	strd	r2, r3, [sp]
 8007df4:	f7f9 f96c 	bl	80010d0 <__aeabi_fcmpun>
 8007df8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007dfc:	f998 8000 	ldrsb.w	r8, [r8]
 8007e00:	4945      	ldr	r1, [pc, #276]	; (8007f18 <powf+0x2a4>)
 8007e02:	b1b0      	cbz	r0, 8007e32 <powf+0x1be>
 8007e04:	2001      	movs	r0, #1
 8007e06:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007e0a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007e0e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8007e12:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e16:	f1b8 0f00 	cmp.w	r8, #0
 8007e1a:	d0bd      	beq.n	8007d98 <powf+0x124>
 8007e1c:	2100      	movs	r1, #0
 8007e1e:	4608      	mov	r0, r1
 8007e20:	f7f9 f844 	bl	8000eac <__aeabi_fdiv>
 8007e24:	f7f8 fb00 	bl	8000428 <__aeabi_f2d>
 8007e28:	f1b8 0f02 	cmp.w	r8, #2
 8007e2c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007e30:	e7bc      	b.n	8007dac <powf+0x138>
 8007e32:	2603      	movs	r6, #3
 8007e34:	900a      	str	r0, [sp, #40]	; 0x28
 8007e36:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8007e40:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8007e44:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007e48:	f7f8 ff7c 	bl	8000d44 <__aeabi_fmul>
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	f1b8 0f00 	cmp.w	r8, #0
 8007e52:	d11e      	bne.n	8007e92 <powf+0x21e>
 8007e54:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007e58:	4b32      	ldr	r3, [pc, #200]	; (8007f24 <powf+0x2b0>)
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	4628      	mov	r0, r5
 8007e5e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e62:	f7f9 f90d 	bl	8001080 <__aeabi_fcmplt>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	d04e      	beq.n	8007f08 <powf+0x294>
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fc12 	bl	8008694 <rintf>
 8007e70:	4621      	mov	r1, r4
 8007e72:	f7f9 f8fb 	bl	800106c <__aeabi_fcmpeq>
 8007e76:	b920      	cbnz	r0, 8007e82 <powf+0x20e>
 8007e78:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007e7c:	4b2a      	ldr	r3, [pc, #168]	; (8007f28 <powf+0x2b4>)
 8007e7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e82:	f997 3000 	ldrsb.w	r3, [r7]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d13e      	bne.n	8007f08 <powf+0x294>
 8007e8a:	f7fd fe85 	bl	8005b98 <__errno>
 8007e8e:	2322      	movs	r3, #34	; 0x22
 8007e90:	e790      	b.n	8007db4 <powf+0x140>
 8007e92:	2200      	movs	r2, #0
 8007e94:	4b25      	ldr	r3, [pc, #148]	; (8007f2c <powf+0x2b8>)
 8007e96:	2100      	movs	r1, #0
 8007e98:	4628      	mov	r0, r5
 8007e9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007e9e:	f7f9 f8ef 	bl	8001080 <__aeabi_fcmplt>
 8007ea2:	2800      	cmp	r0, #0
 8007ea4:	d0ed      	beq.n	8007e82 <powf+0x20e>
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f000 fbf4 	bl	8008694 <rintf>
 8007eac:	4621      	mov	r1, r4
 8007eae:	f7f9 f8dd 	bl	800106c <__aeabi_fcmpeq>
 8007eb2:	2800      	cmp	r0, #0
 8007eb4:	d1e5      	bne.n	8007e82 <powf+0x20e>
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	4b19      	ldr	r3, [pc, #100]	; (8007f20 <powf+0x2ac>)
 8007eba:	e7e0      	b.n	8007e7e <powf+0x20a>
 8007ebc:	2100      	movs	r1, #0
 8007ebe:	4630      	mov	r0, r6
 8007ec0:	f7f9 f8d4 	bl	800106c <__aeabi_fcmpeq>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f43f af46 	beq.w	8007d56 <powf+0xe2>
 8007eca:	4628      	mov	r0, r5
 8007ecc:	f000 fbd6 	bl	800867c <finitef>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f43f af40 	beq.w	8007d56 <powf+0xe2>
 8007ed6:	4620      	mov	r0, r4
 8007ed8:	f000 fbd0 	bl	800867c <finitef>
 8007edc:	2800      	cmp	r0, #0
 8007ede:	f43f af3a 	beq.w	8007d56 <powf+0xe2>
 8007ee2:	2304      	movs	r3, #4
 8007ee4:	9302      	str	r3, [sp, #8]
 8007ee6:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <powf+0x2a4>)
 8007ee8:	4628      	mov	r0, r5
 8007eea:	9303      	str	r3, [sp, #12]
 8007eec:	2300      	movs	r3, #0
 8007eee:	930a      	str	r3, [sp, #40]	; 0x28
 8007ef0:	f7f8 fa9a 	bl	8000428 <__aeabi_f2d>
 8007ef4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f7f8 fa95 	bl	8000428 <__aeabi_f2d>
 8007efe:	2200      	movs	r2, #0
 8007f00:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007f04:	2300      	movs	r3, #0
 8007f06:	e7ba      	b.n	8007e7e <powf+0x20a>
 8007f08:	a802      	add	r0, sp, #8
 8007f0a:	f000 fbb2 	bl	8008672 <matherr>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	f47f af16 	bne.w	8007d40 <powf+0xcc>
 8007f14:	e7b9      	b.n	8007e8a <powf+0x216>
 8007f16:	bf00      	nop
 8007f18:	08009230 	.word	0x08009230
 8007f1c:	3ff00000 	.word	0x3ff00000
 8007f20:	fff00000 	.word	0xfff00000
 8007f24:	47efffff 	.word	0x47efffff
 8007f28:	c7efffff 	.word	0xc7efffff
 8007f2c:	7ff00000 	.word	0x7ff00000
 8007f30:	200001e4 	.word	0x200001e4

08007f34 <__ieee754_powf>:
 8007f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f38:	b087      	sub	sp, #28
 8007f3a:	9101      	str	r1, [sp, #4]
 8007f3c:	9c01      	ldr	r4, [sp, #4]
 8007f3e:	4681      	mov	r9, r0
 8007f40:	f034 4700 	bics.w	r7, r4, #2147483648	; 0x80000000
 8007f44:	f000 8324 	beq.w	8008590 <__ieee754_powf+0x65c>
 8007f48:	f020 4600 	bic.w	r6, r0, #2147483648	; 0x80000000
 8007f4c:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8007f50:	4680      	mov	r8, r0
 8007f52:	dc06      	bgt.n	8007f62 <__ieee754_powf+0x2e>
 8007f54:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007f58:	dd09      	ble.n	8007f6e <__ieee754_powf+0x3a>
 8007f5a:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8007f5e:	f000 8317 	beq.w	8008590 <__ieee754_powf+0x65c>
 8007f62:	4885      	ldr	r0, [pc, #532]	; (8008178 <__ieee754_powf+0x244>)
 8007f64:	b007      	add	sp, #28
 8007f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	f000 bb8f 	b.w	800868c <nanf>
 8007f6e:	2800      	cmp	r0, #0
 8007f70:	da1d      	bge.n	8007fae <__ieee754_powf+0x7a>
 8007f72:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007f76:	da2b      	bge.n	8007fd0 <__ieee754_powf+0x9c>
 8007f78:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007f7c:	db30      	blt.n	8007fe0 <__ieee754_powf+0xac>
 8007f7e:	15fb      	asrs	r3, r7, #23
 8007f80:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007f84:	fa47 f503 	asr.w	r5, r7, r3
 8007f88:	fa05 f303 	lsl.w	r3, r5, r3
 8007f8c:	42bb      	cmp	r3, r7
 8007f8e:	d127      	bne.n	8007fe0 <__ieee754_powf+0xac>
 8007f90:	f005 0501 	and.w	r5, r5, #1
 8007f94:	f1c5 0502 	rsb	r5, r5, #2
 8007f98:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007f9c:	d122      	bne.n	8007fe4 <__ieee754_powf+0xb0>
 8007f9e:	2c00      	cmp	r4, #0
 8007fa0:	4649      	mov	r1, r9
 8007fa2:	da11      	bge.n	8007fc8 <__ieee754_powf+0x94>
 8007fa4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8007fa8:	f7f8 ff80 	bl	8000eac <__aeabi_fdiv>
 8007fac:	e021      	b.n	8007ff2 <__ieee754_powf+0xbe>
 8007fae:	2500      	movs	r5, #0
 8007fb0:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007fb4:	d1f0      	bne.n	8007f98 <__ieee754_powf+0x64>
 8007fb6:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 8007fba:	f000 82e9 	beq.w	8008590 <__ieee754_powf+0x65c>
 8007fbe:	dd09      	ble.n	8007fd4 <__ieee754_powf+0xa0>
 8007fc0:	2c00      	cmp	r4, #0
 8007fc2:	f280 82e8 	bge.w	8008596 <__ieee754_powf+0x662>
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	4608      	mov	r0, r1
 8007fca:	b007      	add	sp, #28
 8007fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd0:	2502      	movs	r5, #2
 8007fd2:	e7ed      	b.n	8007fb0 <__ieee754_powf+0x7c>
 8007fd4:	2c00      	cmp	r4, #0
 8007fd6:	daf6      	bge.n	8007fc6 <__ieee754_powf+0x92>
 8007fd8:	9b01      	ldr	r3, [sp, #4]
 8007fda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007fde:	e7f3      	b.n	8007fc8 <__ieee754_powf+0x94>
 8007fe0:	2500      	movs	r5, #0
 8007fe2:	e7d9      	b.n	8007f98 <__ieee754_powf+0x64>
 8007fe4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8007fe8:	d105      	bne.n	8007ff6 <__ieee754_powf+0xc2>
 8007fea:	4649      	mov	r1, r9
 8007fec:	4608      	mov	r0, r1
 8007fee:	f7f8 fea9 	bl	8000d44 <__aeabi_fmul>
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	e7e8      	b.n	8007fc8 <__ieee754_powf+0x94>
 8007ff6:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8007ffa:	4648      	mov	r0, r9
 8007ffc:	d107      	bne.n	800800e <__ieee754_powf+0xda>
 8007ffe:	f1b8 0f00 	cmp.w	r8, #0
 8008002:	db04      	blt.n	800800e <__ieee754_powf+0xda>
 8008004:	b007      	add	sp, #28
 8008006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800800a:	f000 badf 	b.w	80085cc <__ieee754_sqrtf>
 800800e:	f000 fb32 	bl	8008676 <fabsf>
 8008012:	4601      	mov	r1, r0
 8008014:	b126      	cbz	r6, 8008020 <__ieee754_powf+0xec>
 8008016:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800801a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800801e:	d118      	bne.n	8008052 <__ieee754_powf+0x11e>
 8008020:	2c00      	cmp	r4, #0
 8008022:	da04      	bge.n	800802e <__ieee754_powf+0xfa>
 8008024:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008028:	f7f8 ff40 	bl	8000eac <__aeabi_fdiv>
 800802c:	4601      	mov	r1, r0
 800802e:	f1b8 0f00 	cmp.w	r8, #0
 8008032:	dac9      	bge.n	8007fc8 <__ieee754_powf+0x94>
 8008034:	f1a6 507e 	sub.w	r0, r6, #1065353216	; 0x3f800000
 8008038:	ea50 0305 	orrs.w	r3, r0, r5
 800803c:	d104      	bne.n	8008048 <__ieee754_powf+0x114>
 800803e:	4608      	mov	r0, r1
 8008040:	f7f8 fd76 	bl	8000b30 <__aeabi_fsub>
 8008044:	4601      	mov	r1, r0
 8008046:	e7af      	b.n	8007fa8 <__ieee754_powf+0x74>
 8008048:	2d01      	cmp	r5, #1
 800804a:	d1bd      	bne.n	8007fc8 <__ieee754_powf+0x94>
 800804c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8008050:	e7ba      	b.n	8007fc8 <__ieee754_powf+0x94>
 8008052:	ea4f 78d8 	mov.w	r8, r8, lsr #31
 8008056:	f108 33ff 	add.w	r3, r8, #4294967295
 800805a:	9303      	str	r3, [sp, #12]
 800805c:	432b      	orrs	r3, r5
 800805e:	d101      	bne.n	8008064 <__ieee754_powf+0x130>
 8008060:	4649      	mov	r1, r9
 8008062:	e7ec      	b.n	800803e <__ieee754_powf+0x10a>
 8008064:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8008068:	f340 8098 	ble.w	800819c <__ieee754_powf+0x268>
 800806c:	4b43      	ldr	r3, [pc, #268]	; (800817c <__ieee754_powf+0x248>)
 800806e:	429e      	cmp	r6, r3
 8008070:	dc03      	bgt.n	800807a <__ieee754_powf+0x146>
 8008072:	2c00      	cmp	r4, #0
 8008074:	daa7      	bge.n	8007fc6 <__ieee754_powf+0x92>
 8008076:	4942      	ldr	r1, [pc, #264]	; (8008180 <__ieee754_powf+0x24c>)
 8008078:	e7b8      	b.n	8007fec <__ieee754_powf+0xb8>
 800807a:	4b42      	ldr	r3, [pc, #264]	; (8008184 <__ieee754_powf+0x250>)
 800807c:	429e      	cmp	r6, r3
 800807e:	dd02      	ble.n	8008086 <__ieee754_powf+0x152>
 8008080:	2c00      	cmp	r4, #0
 8008082:	dcf8      	bgt.n	8008076 <__ieee754_powf+0x142>
 8008084:	e79f      	b.n	8007fc6 <__ieee754_powf+0x92>
 8008086:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800808a:	f7f8 fd51 	bl	8000b30 <__aeabi_fsub>
 800808e:	493e      	ldr	r1, [pc, #248]	; (8008188 <__ieee754_powf+0x254>)
 8008090:	4606      	mov	r6, r0
 8008092:	f7f8 fe57 	bl	8000d44 <__aeabi_fmul>
 8008096:	493d      	ldr	r1, [pc, #244]	; (800818c <__ieee754_powf+0x258>)
 8008098:	4607      	mov	r7, r0
 800809a:	4630      	mov	r0, r6
 800809c:	f7f8 fe52 	bl	8000d44 <__aeabi_fmul>
 80080a0:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
 80080a4:	4680      	mov	r8, r0
 80080a6:	4630      	mov	r0, r6
 80080a8:	f7f8 fe4c 	bl	8000d44 <__aeabi_fmul>
 80080ac:	4601      	mov	r1, r0
 80080ae:	4838      	ldr	r0, [pc, #224]	; (8008190 <__ieee754_powf+0x25c>)
 80080b0:	f7f8 fd3e 	bl	8000b30 <__aeabi_fsub>
 80080b4:	4631      	mov	r1, r6
 80080b6:	f7f8 fe45 	bl	8000d44 <__aeabi_fmul>
 80080ba:	4601      	mov	r1, r0
 80080bc:	f04f 507c 	mov.w	r0, #1056964608	; 0x3f000000
 80080c0:	f7f8 fd36 	bl	8000b30 <__aeabi_fsub>
 80080c4:	4631      	mov	r1, r6
 80080c6:	4681      	mov	r9, r0
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7f8 fe3b 	bl	8000d44 <__aeabi_fmul>
 80080ce:	4601      	mov	r1, r0
 80080d0:	4648      	mov	r0, r9
 80080d2:	f7f8 fe37 	bl	8000d44 <__aeabi_fmul>
 80080d6:	492f      	ldr	r1, [pc, #188]	; (8008194 <__ieee754_powf+0x260>)
 80080d8:	f7f8 fe34 	bl	8000d44 <__aeabi_fmul>
 80080dc:	4601      	mov	r1, r0
 80080de:	4640      	mov	r0, r8
 80080e0:	f7f8 fd26 	bl	8000b30 <__aeabi_fsub>
 80080e4:	4601      	mov	r1, r0
 80080e6:	4606      	mov	r6, r0
 80080e8:	4638      	mov	r0, r7
 80080ea:	f7f8 fd23 	bl	8000b34 <__addsf3>
 80080ee:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 80080f2:	f02a 0a0f 	bic.w	sl, sl, #15
 80080f6:	4639      	mov	r1, r7
 80080f8:	4650      	mov	r0, sl
 80080fa:	f7f8 fd19 	bl	8000b30 <__aeabi_fsub>
 80080fe:	4601      	mov	r1, r0
 8008100:	4630      	mov	r0, r6
 8008102:	f7f8 fd15 	bl	8000b30 <__aeabi_fsub>
 8008106:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800810a:	9b03      	ldr	r3, [sp, #12]
 800810c:	3d01      	subs	r5, #1
 800810e:	f024 040f 	bic.w	r4, r4, #15
 8008112:	432b      	orrs	r3, r5
 8008114:	4606      	mov	r6, r0
 8008116:	4621      	mov	r1, r4
 8008118:	9801      	ldr	r0, [sp, #4]
 800811a:	bf0c      	ite	eq
 800811c:	4d1e      	ldreq	r5, [pc, #120]	; (8008198 <__ieee754_powf+0x264>)
 800811e:	f04f 557e 	movne.w	r5, #1065353216	; 0x3f800000
 8008122:	f7f8 fd05 	bl	8000b30 <__aeabi_fsub>
 8008126:	4651      	mov	r1, sl
 8008128:	f7f8 fe0c 	bl	8000d44 <__aeabi_fmul>
 800812c:	9901      	ldr	r1, [sp, #4]
 800812e:	4607      	mov	r7, r0
 8008130:	4630      	mov	r0, r6
 8008132:	f7f8 fe07 	bl	8000d44 <__aeabi_fmul>
 8008136:	4601      	mov	r1, r0
 8008138:	4638      	mov	r0, r7
 800813a:	f7f8 fcfb 	bl	8000b34 <__addsf3>
 800813e:	4621      	mov	r1, r4
 8008140:	4606      	mov	r6, r0
 8008142:	4650      	mov	r0, sl
 8008144:	f7f8 fdfe 	bl	8000d44 <__aeabi_fmul>
 8008148:	4601      	mov	r1, r0
 800814a:	4607      	mov	r7, r0
 800814c:	4681      	mov	r9, r0
 800814e:	4630      	mov	r0, r6
 8008150:	f7f8 fcf0 	bl	8000b34 <__addsf3>
 8008154:	2800      	cmp	r0, #0
 8008156:	4682      	mov	sl, r0
 8008158:	4680      	mov	r8, r0
 800815a:	f020 4400 	bic.w	r4, r0, #2147483648	; 0x80000000
 800815e:	f340 81fb 	ble.w	8008558 <__ieee754_powf+0x624>
 8008162:	f1b4 4f86 	cmp.w	r4, #1124073472	; 0x43000000
 8008166:	f340 8149 	ble.w	80083fc <__ieee754_powf+0x4c8>
 800816a:	4905      	ldr	r1, [pc, #20]	; (8008180 <__ieee754_powf+0x24c>)
 800816c:	4628      	mov	r0, r5
 800816e:	f7f8 fde9 	bl	8000d44 <__aeabi_fmul>
 8008172:	4903      	ldr	r1, [pc, #12]	; (8008180 <__ieee754_powf+0x24c>)
 8008174:	e73b      	b.n	8007fee <__ieee754_powf+0xba>
 8008176:	bf00      	nop
 8008178:	08009119 	.word	0x08009119
 800817c:	3f7ffff7 	.word	0x3f7ffff7
 8008180:	7149f2ca 	.word	0x7149f2ca
 8008184:	3f800007 	.word	0x3f800007
 8008188:	3fb8aa00 	.word	0x3fb8aa00
 800818c:	36eca570 	.word	0x36eca570
 8008190:	3eaaaaab 	.word	0x3eaaaaab
 8008194:	3fb8aa3b 	.word	0x3fb8aa3b
 8008198:	bf800000 	.word	0xbf800000
 800819c:	f5b6 0f00 	cmp.w	r6, #8388608	; 0x800000
 80081a0:	f280 810a 	bge.w	80083b8 <__ieee754_powf+0x484>
 80081a4:	f04f 4197 	mov.w	r1, #1266679808	; 0x4b800000
 80081a8:	f7f8 fdcc 	bl	8000d44 <__aeabi_fmul>
 80081ac:	f06f 0217 	mvn.w	r2, #23
 80081b0:	4606      	mov	r6, r0
 80081b2:	15f3      	asrs	r3, r6, #23
 80081b4:	3b7f      	subs	r3, #127	; 0x7f
 80081b6:	441a      	add	r2, r3
 80081b8:	4b81      	ldr	r3, [pc, #516]	; (80083c0 <__ieee754_powf+0x48c>)
 80081ba:	f3c6 0016 	ubfx	r0, r6, #0, #23
 80081be:	4298      	cmp	r0, r3
 80081c0:	f040 567e 	orr.w	r6, r0, #1065353216	; 0x3f800000
 80081c4:	dd06      	ble.n	80081d4 <__ieee754_powf+0x2a0>
 80081c6:	4b7f      	ldr	r3, [pc, #508]	; (80083c4 <__ieee754_powf+0x490>)
 80081c8:	4298      	cmp	r0, r3
 80081ca:	f340 80f7 	ble.w	80083bc <__ieee754_powf+0x488>
 80081ce:	3201      	adds	r2, #1
 80081d0:	f5a6 0600 	sub.w	r6, r6, #8388608	; 0x800000
 80081d4:	2700      	movs	r7, #0
 80081d6:	4b7c      	ldr	r3, [pc, #496]	; (80083c8 <__ieee754_powf+0x494>)
 80081d8:	4630      	mov	r0, r6
 80081da:	f853 3027 	ldr.w	r3, [r3, r7, lsl #2]
 80081de:	9205      	str	r2, [sp, #20]
 80081e0:	4619      	mov	r1, r3
 80081e2:	9302      	str	r3, [sp, #8]
 80081e4:	f7f8 fca4 	bl	8000b30 <__aeabi_fsub>
 80081e8:	4631      	mov	r1, r6
 80081ea:	4683      	mov	fp, r0
 80081ec:	9802      	ldr	r0, [sp, #8]
 80081ee:	f7f8 fca1 	bl	8000b34 <__addsf3>
 80081f2:	4601      	mov	r1, r0
 80081f4:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80081f8:	f7f8 fe58 	bl	8000eac <__aeabi_fdiv>
 80081fc:	4601      	mov	r1, r0
 80081fe:	9004      	str	r0, [sp, #16]
 8008200:	4658      	mov	r0, fp
 8008202:	f7f8 fd9f 	bl	8000d44 <__aeabi_fmul>
 8008206:	46b2      	mov	sl, r6
 8008208:	1076      	asrs	r6, r6, #1
 800820a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800820e:	f420 687f 	bic.w	r8, r0, #4080	; 0xff0
 8008212:	f506 2680 	add.w	r6, r6, #262144	; 0x40000
 8008216:	f028 080f 	bic.w	r8, r8, #15
 800821a:	eb06 5647 	add.w	r6, r6, r7, lsl #21
 800821e:	4681      	mov	r9, r0
 8008220:	4631      	mov	r1, r6
 8008222:	4640      	mov	r0, r8
 8008224:	f7f8 fd8e 	bl	8000d44 <__aeabi_fmul>
 8008228:	4601      	mov	r1, r0
 800822a:	4658      	mov	r0, fp
 800822c:	f7f8 fc80 	bl	8000b30 <__aeabi_fsub>
 8008230:	9902      	ldr	r1, [sp, #8]
 8008232:	4683      	mov	fp, r0
 8008234:	4630      	mov	r0, r6
 8008236:	f7f8 fc7b 	bl	8000b30 <__aeabi_fsub>
 800823a:	4601      	mov	r1, r0
 800823c:	4650      	mov	r0, sl
 800823e:	f7f8 fc77 	bl	8000b30 <__aeabi_fsub>
 8008242:	4641      	mov	r1, r8
 8008244:	f7f8 fd7e 	bl	8000d44 <__aeabi_fmul>
 8008248:	4601      	mov	r1, r0
 800824a:	4658      	mov	r0, fp
 800824c:	f7f8 fc70 	bl	8000b30 <__aeabi_fsub>
 8008250:	9b04      	ldr	r3, [sp, #16]
 8008252:	4619      	mov	r1, r3
 8008254:	f7f8 fd76 	bl	8000d44 <__aeabi_fmul>
 8008258:	4649      	mov	r1, r9
 800825a:	4683      	mov	fp, r0
 800825c:	4648      	mov	r0, r9
 800825e:	f7f8 fd71 	bl	8000d44 <__aeabi_fmul>
 8008262:	4606      	mov	r6, r0
 8008264:	4959      	ldr	r1, [pc, #356]	; (80083cc <__ieee754_powf+0x498>)
 8008266:	f7f8 fd6d 	bl	8000d44 <__aeabi_fmul>
 800826a:	4959      	ldr	r1, [pc, #356]	; (80083d0 <__ieee754_powf+0x49c>)
 800826c:	f7f8 fc62 	bl	8000b34 <__addsf3>
 8008270:	4631      	mov	r1, r6
 8008272:	f7f8 fd67 	bl	8000d44 <__aeabi_fmul>
 8008276:	4957      	ldr	r1, [pc, #348]	; (80083d4 <__ieee754_powf+0x4a0>)
 8008278:	f7f8 fc5c 	bl	8000b34 <__addsf3>
 800827c:	4631      	mov	r1, r6
 800827e:	f7f8 fd61 	bl	8000d44 <__aeabi_fmul>
 8008282:	4955      	ldr	r1, [pc, #340]	; (80083d8 <__ieee754_powf+0x4a4>)
 8008284:	f7f8 fc56 	bl	8000b34 <__addsf3>
 8008288:	4631      	mov	r1, r6
 800828a:	f7f8 fd5b 	bl	8000d44 <__aeabi_fmul>
 800828e:	4953      	ldr	r1, [pc, #332]	; (80083dc <__ieee754_powf+0x4a8>)
 8008290:	f7f8 fc50 	bl	8000b34 <__addsf3>
 8008294:	4631      	mov	r1, r6
 8008296:	f7f8 fd55 	bl	8000d44 <__aeabi_fmul>
 800829a:	4951      	ldr	r1, [pc, #324]	; (80083e0 <__ieee754_powf+0x4ac>)
 800829c:	f7f8 fc4a 	bl	8000b34 <__addsf3>
 80082a0:	4631      	mov	r1, r6
 80082a2:	4682      	mov	sl, r0
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7f8 fd4d 	bl	8000d44 <__aeabi_fmul>
 80082aa:	4601      	mov	r1, r0
 80082ac:	4650      	mov	r0, sl
 80082ae:	f7f8 fd49 	bl	8000d44 <__aeabi_fmul>
 80082b2:	4606      	mov	r6, r0
 80082b4:	4649      	mov	r1, r9
 80082b6:	4640      	mov	r0, r8
 80082b8:	f7f8 fc3c 	bl	8000b34 <__addsf3>
 80082bc:	4659      	mov	r1, fp
 80082be:	f7f8 fd41 	bl	8000d44 <__aeabi_fmul>
 80082c2:	4631      	mov	r1, r6
 80082c4:	f7f8 fc36 	bl	8000b34 <__addsf3>
 80082c8:	4641      	mov	r1, r8
 80082ca:	4682      	mov	sl, r0
 80082cc:	4640      	mov	r0, r8
 80082ce:	f7f8 fd39 	bl	8000d44 <__aeabi_fmul>
 80082d2:	4944      	ldr	r1, [pc, #272]	; (80083e4 <__ieee754_powf+0x4b0>)
 80082d4:	9002      	str	r0, [sp, #8]
 80082d6:	f7f8 fc2d 	bl	8000b34 <__addsf3>
 80082da:	4651      	mov	r1, sl
 80082dc:	f7f8 fc2a 	bl	8000b34 <__addsf3>
 80082e0:	f420 667f 	bic.w	r6, r0, #4080	; 0xff0
 80082e4:	f026 060f 	bic.w	r6, r6, #15
 80082e8:	4631      	mov	r1, r6
 80082ea:	4640      	mov	r0, r8
 80082ec:	f7f8 fd2a 	bl	8000d44 <__aeabi_fmul>
 80082f0:	493c      	ldr	r1, [pc, #240]	; (80083e4 <__ieee754_powf+0x4b0>)
 80082f2:	4680      	mov	r8, r0
 80082f4:	4630      	mov	r0, r6
 80082f6:	f7f8 fc1b 	bl	8000b30 <__aeabi_fsub>
 80082fa:	9b02      	ldr	r3, [sp, #8]
 80082fc:	4619      	mov	r1, r3
 80082fe:	f7f8 fc17 	bl	8000b30 <__aeabi_fsub>
 8008302:	4601      	mov	r1, r0
 8008304:	4650      	mov	r0, sl
 8008306:	f7f8 fc13 	bl	8000b30 <__aeabi_fsub>
 800830a:	4649      	mov	r1, r9
 800830c:	f7f8 fd1a 	bl	8000d44 <__aeabi_fmul>
 8008310:	4659      	mov	r1, fp
 8008312:	4681      	mov	r9, r0
 8008314:	4630      	mov	r0, r6
 8008316:	f7f8 fd15 	bl	8000d44 <__aeabi_fmul>
 800831a:	4601      	mov	r1, r0
 800831c:	4648      	mov	r0, r9
 800831e:	f7f8 fc09 	bl	8000b34 <__addsf3>
 8008322:	4682      	mov	sl, r0
 8008324:	4601      	mov	r1, r0
 8008326:	4640      	mov	r0, r8
 8008328:	f7f8 fc04 	bl	8000b34 <__addsf3>
 800832c:	f420 697f 	bic.w	r9, r0, #4080	; 0xff0
 8008330:	f029 090f 	bic.w	r9, r9, #15
 8008334:	492c      	ldr	r1, [pc, #176]	; (80083e8 <__ieee754_powf+0x4b4>)
 8008336:	4648      	mov	r0, r9
 8008338:	f7f8 fd04 	bl	8000d44 <__aeabi_fmul>
 800833c:	4641      	mov	r1, r8
 800833e:	4606      	mov	r6, r0
 8008340:	4648      	mov	r0, r9
 8008342:	f7f8 fbf5 	bl	8000b30 <__aeabi_fsub>
 8008346:	4601      	mov	r1, r0
 8008348:	4650      	mov	r0, sl
 800834a:	f7f8 fbf1 	bl	8000b30 <__aeabi_fsub>
 800834e:	4927      	ldr	r1, [pc, #156]	; (80083ec <__ieee754_powf+0x4b8>)
 8008350:	f7f8 fcf8 	bl	8000d44 <__aeabi_fmul>
 8008354:	4926      	ldr	r1, [pc, #152]	; (80083f0 <__ieee754_powf+0x4bc>)
 8008356:	4680      	mov	r8, r0
 8008358:	4648      	mov	r0, r9
 800835a:	f7f8 fcf3 	bl	8000d44 <__aeabi_fmul>
 800835e:	4601      	mov	r1, r0
 8008360:	4640      	mov	r0, r8
 8008362:	f7f8 fbe7 	bl	8000b34 <__addsf3>
 8008366:	4b23      	ldr	r3, [pc, #140]	; (80083f4 <__ieee754_powf+0x4c0>)
 8008368:	f853 1027 	ldr.w	r1, [r3, r7, lsl #2]
 800836c:	f7f8 fbe2 	bl	8000b34 <__addsf3>
 8008370:	9a05      	ldr	r2, [sp, #20]
 8008372:	4680      	mov	r8, r0
 8008374:	4610      	mov	r0, r2
 8008376:	f7f8 fc91 	bl	8000c9c <__aeabi_i2f>
 800837a:	4681      	mov	r9, r0
 800837c:	4b1e      	ldr	r3, [pc, #120]	; (80083f8 <__ieee754_powf+0x4c4>)
 800837e:	4641      	mov	r1, r8
 8008380:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 8008384:	4630      	mov	r0, r6
 8008386:	f7f8 fbd5 	bl	8000b34 <__addsf3>
 800838a:	4639      	mov	r1, r7
 800838c:	f7f8 fbd2 	bl	8000b34 <__addsf3>
 8008390:	4649      	mov	r1, r9
 8008392:	f7f8 fbcf 	bl	8000b34 <__addsf3>
 8008396:	f420 6a7f 	bic.w	sl, r0, #4080	; 0xff0
 800839a:	f02a 0a0f 	bic.w	sl, sl, #15
 800839e:	4649      	mov	r1, r9
 80083a0:	4650      	mov	r0, sl
 80083a2:	f7f8 fbc5 	bl	8000b30 <__aeabi_fsub>
 80083a6:	4639      	mov	r1, r7
 80083a8:	f7f8 fbc2 	bl	8000b30 <__aeabi_fsub>
 80083ac:	4631      	mov	r1, r6
 80083ae:	f7f8 fbbf 	bl	8000b30 <__aeabi_fsub>
 80083b2:	4601      	mov	r1, r0
 80083b4:	4640      	mov	r0, r8
 80083b6:	e6a4      	b.n	8008102 <__ieee754_powf+0x1ce>
 80083b8:	2200      	movs	r2, #0
 80083ba:	e6fa      	b.n	80081b2 <__ieee754_powf+0x27e>
 80083bc:	2701      	movs	r7, #1
 80083be:	e70a      	b.n	80081d6 <__ieee754_powf+0x2a2>
 80083c0:	001cc471 	.word	0x001cc471
 80083c4:	005db3d6 	.word	0x005db3d6
 80083c8:	08009238 	.word	0x08009238
 80083cc:	3e53f142 	.word	0x3e53f142
 80083d0:	3e6c3255 	.word	0x3e6c3255
 80083d4:	3e8ba305 	.word	0x3e8ba305
 80083d8:	3eaaaaab 	.word	0x3eaaaaab
 80083dc:	3edb6db7 	.word	0x3edb6db7
 80083e0:	3f19999a 	.word	0x3f19999a
 80083e4:	40400000 	.word	0x40400000
 80083e8:	3f763800 	.word	0x3f763800
 80083ec:	3f76384f 	.word	0x3f76384f
 80083f0:	369dc3a0 	.word	0x369dc3a0
 80083f4:	08009248 	.word	0x08009248
 80083f8:	08009240 	.word	0x08009240
 80083fc:	f040 80c0 	bne.w	8008580 <__ieee754_powf+0x64c>
 8008400:	4966      	ldr	r1, [pc, #408]	; (800859c <__ieee754_powf+0x668>)
 8008402:	4630      	mov	r0, r6
 8008404:	f7f8 fb96 	bl	8000b34 <__addsf3>
 8008408:	4639      	mov	r1, r7
 800840a:	4681      	mov	r9, r0
 800840c:	4650      	mov	r0, sl
 800840e:	f7f8 fb8f 	bl	8000b30 <__aeabi_fsub>
 8008412:	4601      	mov	r1, r0
 8008414:	4648      	mov	r0, r9
 8008416:	f7f8 fe51 	bl	80010bc <__aeabi_fcmpgt>
 800841a:	2800      	cmp	r0, #0
 800841c:	f47f aea5 	bne.w	800816a <__ieee754_powf+0x236>
 8008420:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008424:	15e4      	asrs	r4, r4, #23
 8008426:	3c7e      	subs	r4, #126	; 0x7e
 8008428:	4123      	asrs	r3, r4
 800842a:	4443      	add	r3, r8
 800842c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008430:	495b      	ldr	r1, [pc, #364]	; (80085a0 <__ieee754_powf+0x66c>)
 8008432:	3a7f      	subs	r2, #127	; 0x7f
 8008434:	f3c3 0416 	ubfx	r4, r3, #0, #23
 8008438:	4111      	asrs	r1, r2
 800843a:	f444 0400 	orr.w	r4, r4, #8388608	; 0x800000
 800843e:	f1c2 0217 	rsb	r2, r2, #23
 8008442:	4114      	asrs	r4, r2
 8008444:	f1b8 0f00 	cmp.w	r8, #0
 8008448:	ea23 0101 	bic.w	r1, r3, r1
 800844c:	4638      	mov	r0, r7
 800844e:	bfb8      	it	lt
 8008450:	4264      	neglt	r4, r4
 8008452:	f7f8 fb6d 	bl	8000b30 <__aeabi_fsub>
 8008456:	4681      	mov	r9, r0
 8008458:	4631      	mov	r1, r6
 800845a:	4648      	mov	r0, r9
 800845c:	f7f8 fb6a 	bl	8000b34 <__addsf3>
 8008460:	f420 677f 	bic.w	r7, r0, #4080	; 0xff0
 8008464:	f027 070f 	bic.w	r7, r7, #15
 8008468:	494e      	ldr	r1, [pc, #312]	; (80085a4 <__ieee754_powf+0x670>)
 800846a:	4638      	mov	r0, r7
 800846c:	f7f8 fc6a 	bl	8000d44 <__aeabi_fmul>
 8008470:	4649      	mov	r1, r9
 8008472:	4680      	mov	r8, r0
 8008474:	4638      	mov	r0, r7
 8008476:	f7f8 fb5b 	bl	8000b30 <__aeabi_fsub>
 800847a:	4601      	mov	r1, r0
 800847c:	4630      	mov	r0, r6
 800847e:	f7f8 fb57 	bl	8000b30 <__aeabi_fsub>
 8008482:	4949      	ldr	r1, [pc, #292]	; (80085a8 <__ieee754_powf+0x674>)
 8008484:	f7f8 fc5e 	bl	8000d44 <__aeabi_fmul>
 8008488:	4948      	ldr	r1, [pc, #288]	; (80085ac <__ieee754_powf+0x678>)
 800848a:	4606      	mov	r6, r0
 800848c:	4638      	mov	r0, r7
 800848e:	f7f8 fc59 	bl	8000d44 <__aeabi_fmul>
 8008492:	4601      	mov	r1, r0
 8008494:	4630      	mov	r0, r6
 8008496:	f7f8 fb4d 	bl	8000b34 <__addsf3>
 800849a:	4607      	mov	r7, r0
 800849c:	4601      	mov	r1, r0
 800849e:	4640      	mov	r0, r8
 80084a0:	f7f8 fb48 	bl	8000b34 <__addsf3>
 80084a4:	4641      	mov	r1, r8
 80084a6:	4606      	mov	r6, r0
 80084a8:	f7f8 fb42 	bl	8000b30 <__aeabi_fsub>
 80084ac:	4601      	mov	r1, r0
 80084ae:	4638      	mov	r0, r7
 80084b0:	f7f8 fb3e 	bl	8000b30 <__aeabi_fsub>
 80084b4:	4631      	mov	r1, r6
 80084b6:	4680      	mov	r8, r0
 80084b8:	4630      	mov	r0, r6
 80084ba:	f7f8 fc43 	bl	8000d44 <__aeabi_fmul>
 80084be:	4607      	mov	r7, r0
 80084c0:	493b      	ldr	r1, [pc, #236]	; (80085b0 <__ieee754_powf+0x67c>)
 80084c2:	f7f8 fc3f 	bl	8000d44 <__aeabi_fmul>
 80084c6:	493b      	ldr	r1, [pc, #236]	; (80085b4 <__ieee754_powf+0x680>)
 80084c8:	f7f8 fb32 	bl	8000b30 <__aeabi_fsub>
 80084cc:	4639      	mov	r1, r7
 80084ce:	f7f8 fc39 	bl	8000d44 <__aeabi_fmul>
 80084d2:	4939      	ldr	r1, [pc, #228]	; (80085b8 <__ieee754_powf+0x684>)
 80084d4:	f7f8 fb2e 	bl	8000b34 <__addsf3>
 80084d8:	4639      	mov	r1, r7
 80084da:	f7f8 fc33 	bl	8000d44 <__aeabi_fmul>
 80084de:	4937      	ldr	r1, [pc, #220]	; (80085bc <__ieee754_powf+0x688>)
 80084e0:	f7f8 fb26 	bl	8000b30 <__aeabi_fsub>
 80084e4:	4639      	mov	r1, r7
 80084e6:	f7f8 fc2d 	bl	8000d44 <__aeabi_fmul>
 80084ea:	4935      	ldr	r1, [pc, #212]	; (80085c0 <__ieee754_powf+0x68c>)
 80084ec:	f7f8 fb22 	bl	8000b34 <__addsf3>
 80084f0:	4639      	mov	r1, r7
 80084f2:	f7f8 fc27 	bl	8000d44 <__aeabi_fmul>
 80084f6:	4601      	mov	r1, r0
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7f8 fb19 	bl	8000b30 <__aeabi_fsub>
 80084fe:	4607      	mov	r7, r0
 8008500:	4601      	mov	r1, r0
 8008502:	4630      	mov	r0, r6
 8008504:	f7f8 fc1e 	bl	8000d44 <__aeabi_fmul>
 8008508:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800850c:	4681      	mov	r9, r0
 800850e:	4638      	mov	r0, r7
 8008510:	f7f8 fb0e 	bl	8000b30 <__aeabi_fsub>
 8008514:	4601      	mov	r1, r0
 8008516:	4648      	mov	r0, r9
 8008518:	f7f8 fcc8 	bl	8000eac <__aeabi_fdiv>
 800851c:	4641      	mov	r1, r8
 800851e:	4607      	mov	r7, r0
 8008520:	4630      	mov	r0, r6
 8008522:	f7f8 fc0f 	bl	8000d44 <__aeabi_fmul>
 8008526:	4641      	mov	r1, r8
 8008528:	f7f8 fb04 	bl	8000b34 <__addsf3>
 800852c:	4601      	mov	r1, r0
 800852e:	4638      	mov	r0, r7
 8008530:	f7f8 fafe 	bl	8000b30 <__aeabi_fsub>
 8008534:	4631      	mov	r1, r6
 8008536:	f7f8 fafb 	bl	8000b30 <__aeabi_fsub>
 800853a:	4601      	mov	r1, r0
 800853c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8008540:	f7f8 faf6 	bl	8000b30 <__aeabi_fsub>
 8008544:	eb00 53c4 	add.w	r3, r0, r4, lsl #23
 8008548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800854c:	da1e      	bge.n	800858c <__ieee754_powf+0x658>
 800854e:	4621      	mov	r1, r4
 8008550:	f000 f8f0 	bl	8008734 <scalbnf>
 8008554:	4629      	mov	r1, r5
 8008556:	e54a      	b.n	8007fee <__ieee754_powf+0xba>
 8008558:	4b1a      	ldr	r3, [pc, #104]	; (80085c4 <__ieee754_powf+0x690>)
 800855a:	429c      	cmp	r4, r3
 800855c:	dd05      	ble.n	800856a <__ieee754_powf+0x636>
 800855e:	491a      	ldr	r1, [pc, #104]	; (80085c8 <__ieee754_powf+0x694>)
 8008560:	4628      	mov	r0, r5
 8008562:	f7f8 fbef 	bl	8000d44 <__aeabi_fmul>
 8008566:	4918      	ldr	r1, [pc, #96]	; (80085c8 <__ieee754_powf+0x694>)
 8008568:	e541      	b.n	8007fee <__ieee754_powf+0xba>
 800856a:	d109      	bne.n	8008580 <__ieee754_powf+0x64c>
 800856c:	4639      	mov	r1, r7
 800856e:	f7f8 fadf 	bl	8000b30 <__aeabi_fsub>
 8008572:	4631      	mov	r1, r6
 8008574:	f7f8 fd98 	bl	80010a8 <__aeabi_fcmpge>
 8008578:	2800      	cmp	r0, #0
 800857a:	f43f af51 	beq.w	8008420 <__ieee754_powf+0x4ec>
 800857e:	e7ee      	b.n	800855e <__ieee754_powf+0x62a>
 8008580:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8008584:	f73f af4c 	bgt.w	8008420 <__ieee754_powf+0x4ec>
 8008588:	2400      	movs	r4, #0
 800858a:	e765      	b.n	8008458 <__ieee754_powf+0x524>
 800858c:	4618      	mov	r0, r3
 800858e:	e7e1      	b.n	8008554 <__ieee754_powf+0x620>
 8008590:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8008594:	e518      	b.n	8007fc8 <__ieee754_powf+0x94>
 8008596:	9901      	ldr	r1, [sp, #4]
 8008598:	e516      	b.n	8007fc8 <__ieee754_powf+0x94>
 800859a:	bf00      	nop
 800859c:	3338aa3c 	.word	0x3338aa3c
 80085a0:	007fffff 	.word	0x007fffff
 80085a4:	3f317200 	.word	0x3f317200
 80085a8:	3f317218 	.word	0x3f317218
 80085ac:	35bfbe8c 	.word	0x35bfbe8c
 80085b0:	3331bb4c 	.word	0x3331bb4c
 80085b4:	35ddea0e 	.word	0x35ddea0e
 80085b8:	388ab355 	.word	0x388ab355
 80085bc:	3b360b61 	.word	0x3b360b61
 80085c0:	3e2aaaab 	.word	0x3e2aaaab
 80085c4:	43160000 	.word	0x43160000
 80085c8:	0da24260 	.word	0x0da24260

080085cc <__ieee754_sqrtf>:
 80085cc:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 80085d0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	4603      	mov	r3, r0
 80085d8:	4604      	mov	r4, r0
 80085da:	d309      	bcc.n	80085f0 <__ieee754_sqrtf+0x24>
 80085dc:	4601      	mov	r1, r0
 80085de:	f7f8 fbb1 	bl	8000d44 <__aeabi_fmul>
 80085e2:	4601      	mov	r1, r0
 80085e4:	4620      	mov	r0, r4
 80085e6:	f7f8 faa5 	bl	8000b34 <__addsf3>
 80085ea:	4604      	mov	r4, r0
 80085ec:	4620      	mov	r0, r4
 80085ee:	bd70      	pop	{r4, r5, r6, pc}
 80085f0:	2a00      	cmp	r2, #0
 80085f2:	d0fb      	beq.n	80085ec <__ieee754_sqrtf+0x20>
 80085f4:	2800      	cmp	r0, #0
 80085f6:	da06      	bge.n	8008606 <__ieee754_sqrtf+0x3a>
 80085f8:	4601      	mov	r1, r0
 80085fa:	f7f8 fa99 	bl	8000b30 <__aeabi_fsub>
 80085fe:	4601      	mov	r1, r0
 8008600:	f7f8 fc54 	bl	8000eac <__aeabi_fdiv>
 8008604:	e7f1      	b.n	80085ea <__ieee754_sqrtf+0x1e>
 8008606:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800860a:	ea4f 54e0 	mov.w	r4, r0, asr #23
 800860e:	d32e      	bcc.n	800866e <__ieee754_sqrtf+0xa2>
 8008610:	3c7f      	subs	r4, #127	; 0x7f
 8008612:	07e2      	lsls	r2, r4, #31
 8008614:	f04f 0200 	mov.w	r2, #0
 8008618:	ea4f 0164 	mov.w	r1, r4, asr #1
 800861c:	4616      	mov	r6, r2
 800861e:	f04f 0419 	mov.w	r4, #25
 8008622:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8008626:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800862a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800862e:	bf48      	it	mi
 8008630:	005b      	lslmi	r3, r3, #1
 8008632:	005b      	lsls	r3, r3, #1
 8008634:	1835      	adds	r5, r6, r0
 8008636:	429d      	cmp	r5, r3
 8008638:	bfde      	ittt	le
 800863a:	182e      	addle	r6, r5, r0
 800863c:	1b5b      	suble	r3, r3, r5
 800863e:	1812      	addle	r2, r2, r0
 8008640:	3c01      	subs	r4, #1
 8008642:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008646:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800864a:	d1f3      	bne.n	8008634 <__ieee754_sqrtf+0x68>
 800864c:	b113      	cbz	r3, 8008654 <__ieee754_sqrtf+0x88>
 800864e:	3201      	adds	r2, #1
 8008650:	f022 0201 	bic.w	r2, r2, #1
 8008654:	1054      	asrs	r4, r2, #1
 8008656:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 800865a:	eb04 54c1 	add.w	r4, r4, r1, lsl #23
 800865e:	e7c5      	b.n	80085ec <__ieee754_sqrtf+0x20>
 8008660:	005b      	lsls	r3, r3, #1
 8008662:	3201      	adds	r2, #1
 8008664:	0219      	lsls	r1, r3, #8
 8008666:	d5fb      	bpl.n	8008660 <__ieee754_sqrtf+0x94>
 8008668:	3a01      	subs	r2, #1
 800866a:	1aa4      	subs	r4, r4, r2
 800866c:	e7d0      	b.n	8008610 <__ieee754_sqrtf+0x44>
 800866e:	2200      	movs	r2, #0
 8008670:	e7f8      	b.n	8008664 <__ieee754_sqrtf+0x98>

08008672 <matherr>:
 8008672:	2000      	movs	r0, #0
 8008674:	4770      	bx	lr

08008676 <fabsf>:
 8008676:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800867a:	4770      	bx	lr

0800867c <finitef>:
 800867c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008680:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8008684:	bfac      	ite	ge
 8008686:	2000      	movge	r0, #0
 8008688:	2001      	movlt	r0, #1
 800868a:	4770      	bx	lr

0800868c <nanf>:
 800868c:	4800      	ldr	r0, [pc, #0]	; (8008690 <nanf+0x4>)
 800868e:	4770      	bx	lr
 8008690:	7fc00000 	.word	0x7fc00000

08008694 <rintf>:
 8008694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008696:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800869a:	0dd5      	lsrs	r5, r2, #23
 800869c:	3d7f      	subs	r5, #127	; 0x7f
 800869e:	2d16      	cmp	r5, #22
 80086a0:	4601      	mov	r1, r0
 80086a2:	dc3b      	bgt.n	800871c <rintf+0x88>
 80086a4:	b1e2      	cbz	r2, 80086e0 <rintf+0x4c>
 80086a6:	2d00      	cmp	r5, #0
 80086a8:	4602      	mov	r2, r0
 80086aa:	ea4f 74d0 	mov.w	r4, r0, lsr #31
 80086ae:	da1a      	bge.n	80086e6 <rintf+0x52>
 80086b0:	4a1e      	ldr	r2, [pc, #120]	; (800872c <rintf+0x98>)
 80086b2:	f3c0 0116 	ubfx	r1, r0, #0, #23
 80086b6:	4249      	negs	r1, r1
 80086b8:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 80086bc:	0d03      	lsrs	r3, r0, #20
 80086be:	0a49      	lsrs	r1, r1, #9
 80086c0:	051b      	lsls	r3, r3, #20
 80086c2:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80086c6:	4319      	orrs	r1, r3
 80086c8:	4628      	mov	r0, r5
 80086ca:	f7f8 fa33 	bl	8000b34 <__addsf3>
 80086ce:	9001      	str	r0, [sp, #4]
 80086d0:	4629      	mov	r1, r5
 80086d2:	9801      	ldr	r0, [sp, #4]
 80086d4:	f7f8 fa2c 	bl	8000b30 <__aeabi_fsub>
 80086d8:	f020 4100 	bic.w	r1, r0, #2147483648	; 0x80000000
 80086dc:	ea41 71c4 	orr.w	r1, r1, r4, lsl #31
 80086e0:	4608      	mov	r0, r1
 80086e2:	b003      	add	sp, #12
 80086e4:	bd30      	pop	{r4, r5, pc}
 80086e6:	4b12      	ldr	r3, [pc, #72]	; (8008730 <rintf+0x9c>)
 80086e8:	412b      	asrs	r3, r5
 80086ea:	4218      	tst	r0, r3
 80086ec:	d0f8      	beq.n	80086e0 <rintf+0x4c>
 80086ee:	0859      	lsrs	r1, r3, #1
 80086f0:	4208      	tst	r0, r1
 80086f2:	d006      	beq.n	8008702 <rintf+0x6e>
 80086f4:	ea20 0201 	bic.w	r2, r0, r1
 80086f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086fc:	fa41 f505 	asr.w	r5, r1, r5
 8008700:	432a      	orrs	r2, r5
 8008702:	4b0a      	ldr	r3, [pc, #40]	; (800872c <rintf+0x98>)
 8008704:	4611      	mov	r1, r2
 8008706:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 800870a:	4620      	mov	r0, r4
 800870c:	f7f8 fa12 	bl	8000b34 <__addsf3>
 8008710:	9001      	str	r0, [sp, #4]
 8008712:	9801      	ldr	r0, [sp, #4]
 8008714:	4621      	mov	r1, r4
 8008716:	f7f8 fa0b 	bl	8000b30 <__aeabi_fsub>
 800871a:	e004      	b.n	8008726 <rintf+0x92>
 800871c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8008720:	d3de      	bcc.n	80086e0 <rintf+0x4c>
 8008722:	f7f8 fa07 	bl	8000b34 <__addsf3>
 8008726:	4601      	mov	r1, r0
 8008728:	e7da      	b.n	80086e0 <rintf+0x4c>
 800872a:	bf00      	nop
 800872c:	08009250 	.word	0x08009250
 8008730:	007fffff 	.word	0x007fffff

08008734 <scalbnf>:
 8008734:	f030 4300 	bics.w	r3, r0, #2147483648	; 0x80000000
 8008738:	b510      	push	{r4, lr}
 800873a:	4602      	mov	r2, r0
 800873c:	460c      	mov	r4, r1
 800873e:	4601      	mov	r1, r0
 8008740:	d027      	beq.n	8008792 <scalbnf+0x5e>
 8008742:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8008746:	d303      	bcc.n	8008750 <scalbnf+0x1c>
 8008748:	f7f8 f9f4 	bl	8000b34 <__addsf3>
 800874c:	4602      	mov	r2, r0
 800874e:	e020      	b.n	8008792 <scalbnf+0x5e>
 8008750:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008754:	d215      	bcs.n	8008782 <scalbnf+0x4e>
 8008756:	f04f 4198 	mov.w	r1, #1275068416	; 0x4c000000
 800875a:	f7f8 faf3 	bl	8000d44 <__aeabi_fmul>
 800875e:	4b18      	ldr	r3, [pc, #96]	; (80087c0 <scalbnf+0x8c>)
 8008760:	4602      	mov	r2, r0
 8008762:	429c      	cmp	r4, r3
 8008764:	db22      	blt.n	80087ac <scalbnf+0x78>
 8008766:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800876a:	3b19      	subs	r3, #25
 800876c:	4423      	add	r3, r4
 800876e:	2bfe      	cmp	r3, #254	; 0xfe
 8008770:	dd09      	ble.n	8008786 <scalbnf+0x52>
 8008772:	4611      	mov	r1, r2
 8008774:	4813      	ldr	r0, [pc, #76]	; (80087c4 <scalbnf+0x90>)
 8008776:	f000 f829 	bl	80087cc <copysignf>
 800877a:	4912      	ldr	r1, [pc, #72]	; (80087c4 <scalbnf+0x90>)
 800877c:	f7f8 fae2 	bl	8000d44 <__aeabi_fmul>
 8008780:	e7e4      	b.n	800874c <scalbnf+0x18>
 8008782:	0ddb      	lsrs	r3, r3, #23
 8008784:	e7f2      	b.n	800876c <scalbnf+0x38>
 8008786:	2b00      	cmp	r3, #0
 8008788:	dd05      	ble.n	8008796 <scalbnf+0x62>
 800878a:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 800878e:	ea40 52c3 	orr.w	r2, r0, r3, lsl #23
 8008792:	4610      	mov	r0, r2
 8008794:	bd10      	pop	{r4, pc}
 8008796:	f113 0f16 	cmn.w	r3, #22
 800879a:	da09      	bge.n	80087b0 <scalbnf+0x7c>
 800879c:	f24c 3350 	movw	r3, #50000	; 0xc350
 80087a0:	429c      	cmp	r4, r3
 80087a2:	4611      	mov	r1, r2
 80087a4:	dce6      	bgt.n	8008774 <scalbnf+0x40>
 80087a6:	4808      	ldr	r0, [pc, #32]	; (80087c8 <scalbnf+0x94>)
 80087a8:	f000 f810 	bl	80087cc <copysignf>
 80087ac:	4906      	ldr	r1, [pc, #24]	; (80087c8 <scalbnf+0x94>)
 80087ae:	e7e5      	b.n	800877c <scalbnf+0x48>
 80087b0:	3319      	adds	r3, #25
 80087b2:	f020 40ff 	bic.w	r0, r0, #2139095040	; 0x7f800000
 80087b6:	f04f 514c 	mov.w	r1, #855638016	; 0x33000000
 80087ba:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 80087be:	e7dd      	b.n	800877c <scalbnf+0x48>
 80087c0:	ffff3cb0 	.word	0xffff3cb0
 80087c4:	7149f2ca 	.word	0x7149f2ca
 80087c8:	0da24260 	.word	0x0da24260

080087cc <copysignf>:
 80087cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80087d0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80087d4:	4308      	orrs	r0, r1
 80087d6:	4770      	bx	lr

080087d8 <_init>:
 80087d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087da:	bf00      	nop
 80087dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087de:	bc08      	pop	{r3}
 80087e0:	469e      	mov	lr, r3
 80087e2:	4770      	bx	lr

080087e4 <_fini>:
 80087e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e6:	bf00      	nop
 80087e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ea:	bc08      	pop	{r3}
 80087ec:	469e      	mov	lr, r3
 80087ee:	4770      	bx	lr
